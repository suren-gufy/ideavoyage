{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines for Startup Validation Tool\n\n## Design Approach\n**Selected Approach**: Reference-Based (Marketing/Landing)  \n**Primary References**: Stripe, Notion, Linear (landing pages)  \n**Justification**: Conversion-focused tool requiring vibrant \"highlighter\" theme with energetic SaaS aesthetics for startup entrepreneurs\n\n## Core Design Elements\n\n### A. Color Palette\n**Highlighter Theme** (bright, energetic):\n- **Primary Highlighters**: \n  - Electric Blue: 217 100% 65%\n  - Neon Green: 142 84% 55% \n  - Hot Pink: 330 85% 65%\n  - Bright Orange: 25 95% 60%\n- **Background**: 220 6% 8% (dark) / 0 0% 98% (light)\n- **Surface**: 220 8% 12% (dark) / 0 0% 100% (light)\n- **Text Primary**: 210 20% 98% (dark) / 222 84% 8% (light)\n- **Text Secondary**: 215 16% 70% (dark) / 215 16% 40% (light)\n\n**Strategic Color Usage**:\n- CTAs use Electric Blue with high contrast\n- Success states use Neon Green\n- Feature highlights use Hot Pink accents\n- Warning/urgency uses Bright Orange\n\n### B. Typography\n- **Display Font**: Inter 700/800 for headlines (conversion-focused weight)\n- **Body Font**: Inter 400/500 for readability\n- **CTA Text**: Inter 600 for button text\n- **Metrics**: JetBrains Mono 500 for data emphasis\n\n### C. Layout System\n**Mobile-First Spacing**: 4, 6, 8, 12, 16, 20, 24\n- Hero sections: py-20, px-6\n- Feature sections: py-16, px-6  \n- Card components: p-6, gap-8\n- CTA sections: py-12\n\n### D. Landing Page Sections (Maximum 4 sections)\n\n**1. Hero Section** (Single viewport):\n- Bold headline with highlighter text effects\n- Subheadline explaining core value\n- Primary CTA (Electric Blue) + Secondary CTA (outline)\n- Trust indicators (customer logos, testimonials)\n\n**2. Core Value Proposition** (Problem/Solution):\n- Split layout: Problem (left) vs Solution (right)\n- Pain point cards with Hot Pink accents\n- Solution benefits with Neon Green highlights\n- Embedded demo preview\n\n**3. Social Proof + Features**:\n- Customer testimonials with profile images\n- 3-column feature grid with highlighter icons\n- Usage statistics with animated counters\n- Feature comparison table\n\n**4. Final CTA Section**:\n- Urgency-driven headline with Bright Orange accents\n- Multiple CTA variations (free trial, demo request)\n- Risk-free guarantees and trust badges\n- Footer with minimal links\n\n### E. Component Library\n\n**CTAs**: \n- Primary: Electric Blue background, white text, shadow-lg\n- Secondary: Outline with Electric Blue border\n- Urgent: Bright Orange with pulsing animation\n\n**Cards**: \n- Elevated with shadow-xl\n- Rounded corners (rounded-xl)\n- Highlighter accent borders on hover\n\n**Data Displays**:\n- Metric cards with large numbers\n- Progress bars with gradient fills\n- Chart overlays with highlighter themes\n\n**Interactive Elements**:\n- Hover effects with color shifts\n- Scroll-triggered animations\n- Progressive disclosure patterns\n\n### F. Visual Hierarchy\n- **Hero Headlines**: text-5xl/6xl font-bold with highlighter effects\n- **Section Headers**: text-3xl font-bold \n- **Feature Titles**: text-xl font-semibold\n- **Body Text**: text-lg for conversion copy\n- **CTA Text**: text-lg font-semibold\n\n### G. Mobile Responsiveness\n- Stack sections vertically on mobile\n- Larger touch targets (min 44px)\n- Simplified navigation drawer\n- Full-width CTAs on mobile\n- Optimized font sizes (base text-base, headings scale down)\n\n## Images\n**Hero Section**: Large hero image showcasing dashboard interface with gradient overlay (colors: 217 100% 65% to 330 85% 65%)\n\n**Feature Sections**: \n- Product screenshots with highlighter UI elements\n- Abstract geometric backgrounds with gradient treatments\n- Customer avatar photos for testimonials\n- Icon illustrations using highlighter color scheme\n\n**Visual Treatments**:\n- Gradient overlays on hero backgrounds\n- Subtle pattern backgrounds using highlighter colors at 10% opacity\n- Animated gradient borders on key elements\n\nThe design balances conversion optimization with professional credibility through strategic use of vibrant highlighter colors, clear CTAs, and engaging visual hierarchy that drives users toward signup/trial actions.","size_bytes":4090},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Reddit Idea Validator Tool\n\n## Overview\n\nThis is a Reddit Idea Validator Tool that uses AI to analyze startup ideas by examining Reddit discussions. The application helps entrepreneurs validate their ideas by analyzing sentiment, identifying pain points, and generating app suggestions based on real user conversations across relevant subreddits. It provides comprehensive analytics including sentiment analysis, pain point extraction, and AI-powered app idea generation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system supporting dark/light themes\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Charts**: Recharts for data visualization (sentiment analysis, trends)\n\n### Design System\n- **Color Palette**: Dark mode primary with Reddit-inspired blue accent colors\n- **Typography**: Inter font family with JetBrains Mono for code/metrics\n- **Layout**: Sidebar navigation with responsive design\n- **Components**: Comprehensive UI component library with consistent styling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript throughout the application\n- **API Structure**: RESTful endpoints with `/api/analyze` for startup idea analysis\n- **Middleware**: Request logging, JSON parsing, error handling\n- **Development**: Hot module replacement with Vite integration\n\n### Data Processing\n- **Real Reddit Integration**: Snoowrap library for authentic Reddit API data scraping with graceful fallback\n- **AI Analysis**: OpenAI GPT-4 for processing both real Reddit data and generating market insights\n- **Data Sources**: \n  - Live Reddit posts and comments from relevant subreddits\n  - Intelligent keyword-based filtering and relevance scoring\n  - Real user sentiment extraction from actual discussions\n- **Analysis Features**: \n  - Smart keyword and subreddit generation using AI\n  - Real-time Reddit data collection with rate limiting\n  - Authentic sentiment analysis from actual user comments\n  - Pain point identification with real user quotes as examples\n  - Market validation based on genuine community engagement\n  - Graceful fallback to AI-generated insights when Reddit unavailable\n\n### Database Architecture\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema**: User management with basic authentication structure\n- **Storage**: Memory storage implementation for development, ready for PostgreSQL production\n- **Migrations**: Drizzle Kit for database schema management\n\n### Application Features\n- **Dashboard**: Main interface for idea validation with real-time analysis\n- **Analytics**: Detailed sentiment analysis with interactive charts\n- **Pain Points**: Categorized user problem identification\n- **App Ideas**: AI-generated solution suggestions with validation metrics\n- **Search Interface**: Form-based startup idea input with industry/market targeting\n\n### Authentication & Security\n- **User System**: Basic user registration and authentication setup\n- **Session Management**: Express session handling\n- **Input Validation**: Zod schemas for request validation\n\n### Development Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **Code Quality**: ESLint configuration with TypeScript rules\n- **Path Aliases**: Configured for clean imports (@/ for client, @shared for shared)\n- **Hot Reloading**: Development server with real-time updates\n\n## External Dependencies\n\n### AI & Reddit Integration\n- **OpenAI API**: GPT-4 analysis for processing real Reddit data and generating market insights\n- **Snoowrap**: Official Reddit API wrapper for authentic data collection\n- **Recharts**: Data visualization library for sentiment charts and analytics displays\n\n### Database & ORM\n- **PostgreSQL**: Primary database (via Neon serverless)\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL adapter\n- **Drizzle Kit**: Database migration and schema management\n\n### UI & Design\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent UI elements\n- **shadcn/ui**: Pre-built component library built on Radix primitives\n\n### Development & Build\n- **Vite**: Fast build tool with React plugin and TypeScript support\n- **TanStack React Query**: Server state management and caching\n- **Wouter**: Lightweight client-side routing\n- **React Hook Form**: Form handling with Zod validation\n\n### Hosting & Infrastructure\n- **Replit**: Development and deployment platform\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Express.js**: Web server framework with middleware support","size_bytes":4938},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  analyzeIdeaSchema, \n  analysisResponseSchema, \n  keywordIntelligenceSchema,\n  competitorMatrixSchema,\n  gtmPlanSchema,\n  marketSizingSchema,\n  exportRequestSchema,\n  type AnalysisResponse,\n  type KeywordIntelligence,\n  type CompetitorMatrix,\n  type GtmPlan,\n  type MarketSizing,\n  type ExportRequest,\n  type ExportResult\n} from \"../shared/schema\";\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Initialize Perplexity API\nconst perplexityApiKey = process.env.PERPLEXITY_API_KEY;\nif (!perplexityApiKey) {\n  console.warn(\"PERPLEXITY_API_KEY not found - research will be limited\");\n} else {\n  console.log(\"Perplexity API initialized successfully\");\n}\n\n// Reddit public JSON API - with multiple fallback strategies\nasync function fetchRedditData(subreddit: string, limit: number = 25) {\n  const userAgents = [\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15',\n    'web:startup-validator:1.0.0 (educational research)'\n  ];\n  \n  const urls = [\n    `https://www.reddit.com/r/${subreddit}/hot.json?limit=${limit}`,\n    `https://old.reddit.com/r/${subreddit}/hot.json?limit=${limit}`,\n    `https://reddit.com/r/${subreddit}.json?limit=${limit}`\n  ];\n  \n  for (const userAgent of userAgents) {\n    for (const url of urls) {\n      try {\n        const headers = {\n          'User-Agent': userAgent,\n          'Accept': 'application/json',\n          'Accept-Language': 'en-US,en;q=0.9',\n          'Cache-Control': 'no-cache'\n        };\n        \n        const response = await fetch(url, { headers });\n        if (response.ok) {\n          const data = await response.json();\n          return data;\n        }\n        \n        if (response.status === 429) {\n          console.log(`Rate limited on r/${subreddit}, waiting...`);\n          await new Promise(resolve => setTimeout(resolve, 3000));\n          continue;\n        }\n        \n      } catch (error) {\n        continue; // Try next combination\n      }\n    }\n    \n    // Wait between user agent attempts\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n  \n  console.warn(`JSON API methods failed for r/${subreddit}, trying HTML fallback...`);\n  \n  // Fallback: Use Jina.ai reader proxy to get Reddit HTML content\n  try {\n    const jinaUrl = `https://r.jina.ai/https://www.reddit.com/r/${subreddit}/top/?t=month`;\n    const jinaHeaders = {\n      'User-Agent': 'Mozilla/5.0 (compatible; StartupValidator/1.0)'\n    };\n    \n    const response = await fetch(jinaUrl, { headers: jinaHeaders });\n    if (response.ok) {\n      const htmlContent = await response.text();\n      return parseRedditHTML(htmlContent, subreddit);\n    }\n  } catch (error) {\n    console.warn(`Jina.ai fallback also failed for r/${subreddit}:`, (error as Error).message);\n  }\n  \n  return null;\n}\n\n// Parse Reddit HTML content from Jina.ai reader proxy\nfunction parseRedditHTML(htmlContent: string, subreddit: string) {\n  try {\n    const posts: any[] = [];\n    \n    // Extract Reddit post URLs/permalinks from the HTML\n    const postUrlMatches = htmlContent.match(/\\/r\\/\\w+\\/comments\\/[a-z0-9]+\\/[^\\s\"'\\/]*/g) || [];\n    const uniquePermalinks = Array.from(new Set(postUrlMatches));\n    \n    // Parse basic post info from listing page\n    const lines = htmlContent.split('\\n');\n    let postIndex = 0;\n    \n    for (let i = 0; i < lines.length && postIndex < uniquePermalinks.length && postIndex < 10; i++) {\n      const line = lines[i].trim();\n      \n      // Look for post title patterns\n      if (line.length > 15 && line.length < 200 && line.match(/[A-Za-z]/) && \n          !line.includes('ago') && !line.includes('comment') && !line.includes('http')) {\n        \n        let score = 0;\n        let comments = 0;\n        let createdTime = Date.now() / 1000; // Current timestamp as fallback\n        \n        // Look ahead for score and comment info\n        for (let j = i - 3; j <= i + 3 && j < lines.length; j++) {\n          if (j >= 0) {\n            const contextLine = lines[j];\n            const scoreMatch = contextLine.match(/(\\d+)\\s+(points?|point)/);\n            if (scoreMatch) score = parseInt(scoreMatch[1]);\n            \n            const commentMatch = contextLine.match(/(\\d+)\\s+comments?/);\n            if (commentMatch) comments = parseInt(commentMatch[1]);\n            \n            const timeMatch = contextLine.match(/(\\d+)\\s+(hours?|days?|months?)\\s+ago/);\n            if (timeMatch) {\n              const timeValue = parseInt(timeMatch[1]);\n              const timeUnit = timeMatch[2];\n              const hoursAgo = timeUnit.includes('hour') ? timeValue : \n                              timeUnit.includes('day') ? timeValue * 24 :\n                              timeUnit.includes('month') ? timeValue * 24 * 30 : 1;\n              createdTime = Date.now() / 1000 - (hoursAgo * 3600);\n            }\n          }\n        }\n        \n        if (postIndex < uniquePermalinks.length) {\n          const permalink = uniquePermalinks[postIndex];\n          posts.push({\n            title: line,\n            selftext: '', // Will be filled by fetchRedditThread if available\n            score: score,\n            num_comments: comments,\n            created_utc: createdTime,\n            permalink: permalink,\n            url: `https://reddit.com${permalink}`,\n            subreddit: subreddit\n          });\n          postIndex++;\n        }\n      }\n    }\n    \n    if (posts.length > 0) {\n      console.log(`Successfully parsed ${posts.length} posts from r/${subreddit} via HTML fallback`);\n      return {\n        data: {\n          children: posts.map(post => ({ data: post }))\n        }\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.warn(`Error parsing HTML for r/${subreddit}:`, (error as Error).message);\n    return null;\n  }\n}\n\nasync function fetchRedditComments(permalink: string, limit: number = 10) {\n  // Try JSON API first\n  const url = `https://reddit.com${permalink}.json?limit=${limit}`;\n  const headers = {\n    'User-Agent': 'Mozilla/5.0 (compatible; StartupValidator/1.0)',\n    'Accept': 'application/json'\n  };\n  \n  try {\n    const response = await fetch(url, { headers });\n    if (response.ok) {\n      const data = await response.json();\n      return data;\n    }\n  } catch (error) {\n    // Fall through to HTML fallback\n  }\n  \n  // Fallback: Use Jina.ai to get thread HTML and parse comments\n  try {\n    const jinaUrl = `https://r.jina.ai/https://reddit.com${permalink}`;\n    const jinaHeaders = {\n      'User-Agent': 'Mozilla/5.0 (compatible; StartupValidator/1.0)'\n    };\n    \n    const response = await fetch(jinaUrl, { headers: jinaHeaders });\n    if (response.ok) {\n      const htmlContent = await response.text();\n      return parseRedditThreadHTML(htmlContent, permalink);\n    }\n  } catch (error) {\n    console.warn(`Failed to fetch comments for ${permalink} via HTML:`, (error as Error).message);\n  }\n  \n  return null;\n}\n\n// Parse Reddit thread HTML to extract post content and comments\nfunction parseRedditThreadHTML(htmlContent: string, permalink: string) {\n  try {\n    const lines = htmlContent.split('\\n');\n    const comments: any[] = [];\n    let postText = '';\n    \n    let inCommentSection = false;\n    let currentComment = '';\n    let commentScore = 0;\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      \n      // Extract post content (selftext)\n      if (!postText && line.length > 50 && line.length < 1000 && \n          !line.includes('comment') && !line.includes('ago') && \n          !line.includes('reddit') && line.match(/[.!?]$/)) {\n        postText = line;\n      }\n      \n      // Look for comment patterns\n      if (line.includes('points') || line.includes('point')) {\n        const scoreMatch = line.match(/(\\d+)\\s+(points?|point)/);\n        if (scoreMatch) {\n          commentScore = parseInt(scoreMatch[1]);\n          inCommentSection = true;\n        }\n      }\n      \n      // Extract comment text\n      if (inCommentSection && line.length > 20 && line.length < 500 && \n          !line.includes('reply') && !line.includes('permalink') && \n          !line.includes('ago') && line.match(/[.!?]$/)) {\n        \n        if (currentComment && comments.length < 5) {\n          comments.push({\n            data: {\n              body: currentComment,\n              score: commentScore,\n              created_utc: Date.now() / 1000\n            }\n          });\n        }\n        \n        currentComment = line;\n        commentScore = 0;\n        inCommentSection = false;\n      }\n    }\n    \n    // Add the last comment\n    if (currentComment && comments.length < 5) {\n      comments.push({\n        data: {\n          body: currentComment,\n          score: commentScore,\n          created_utc: Date.now() / 1000\n        }\n      });\n    }\n    \n    return [{\n      data: {\n        children: [{\n          data: {\n            selftext: postText,\n            permalink: permalink\n          }\n        }]\n      }\n    }, {\n      data: {\n        children: comments\n      }\n    }];\n    \n  } catch (error) {\n    console.warn(`Error parsing thread HTML for ${permalink}:`, (error as Error).message);\n    return null;\n  }\n}\n\n// Premium verification middleware\nfunction checkPremiumAccess(req: any, res: any, next: any) {\n  // In development, allow all premium features\n  if (process.env.NODE_ENV === 'development') {\n    req.isPremium = true;\n    return next();\n  }\n  \n  // In production, check for premium status (placeholder for real auth)\n  const premiumHeader = req.headers['x-premium-access'];\n  req.isPremium = premiumHeader === 'true'; // In real implementation, verify JWT/session\n  \n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Premium status endpoint\n  app.get('/api/premium-status', checkPremiumAccess, (req: any, res) => {\n    res.json({ \n      isPremium: req.isPremium,\n      environment: process.env.NODE_ENV || 'development'\n    });\n  });\n\n  // Startup Idea Analysis Route\n  app.post(\"/api/analyze\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting analysis request`);\n    \n    try {\n      const validatedData = analyzeIdeaSchema.parse(req.body);\n      \n      console.log(`[${requestId}] Analyzing startup idea:`, validatedData);\n      \n      // Step 1: Use sophisticated web research analyst to create research plan\n      const researchAnalystPrompt = `ROLE: You are a web research analyst. Work step-by-step:\n\n1. UNDERSTAND — Problem framing\n- Startup idea: ${validatedData.idea}\n- Audience: ${validatedData.targetAudience || \"General users\"}\n- Industry: ${validatedData.industry || \"Technology\"}\n- Geography: Global\n- Platform: Web/Mobile\n- Time window to prioritize: Last 12 months\n- Goal: Comprehensive market validation\n\n2. ANALYSE — Scope the evidence we need\n- Real user pains & solution requests (esp. Reddit discussions).\n- Product review verbatims (G2, Amazon, Trustpilot, etc.).\n- Competitor list and differentiators (pricing, positioning).\n- Search demand signals (keywords, intent, trends).\n- Buyer personas (jobs-to-be-done, triggers, obstacles).\n\n3. REASON — Search plan & queries\nRun diverse queries; prefer recent content. Use variations with and without quotes.\n- Reddit pain discovery:\n  site:reddit.com \"{core problem keywords}\"  |  site:reddit.com \"anyone else\" {keywords}\n  site:reddit.com/r/* \"{product type}\" alternatives  |  site:reddit.com \"{use case}\" \"frustrating\"\n- Reviews & social proof:\n  \"site:g2.com OR site:trustpilot.com OR site:amazon.com\" \"{product/competitor}\"\n- Competitors:\n  \"{product type} alternatives\"  |  \"best {product type} tools\"  |  \"vs\" comparisons\n- Demand:\n  \"{use case} how to\"  |  \"{problem} app\"  |  \"{category} software\"  |  long-tail variants\nAdjust keywords to the user's audience/geo/platform.\n\n4. SYNTHESIS — Return a single JSON object (no Markdown) with these top-level keys:\n{\n  \"meta\": {\n    \"idea\": \"...\",\n    \"industry\": \"...\",\n    \"geo\": \"...\",\n    \"platform\": \"...\",\n    \"time_range\": \"...\",\n    \"keywords\": [\"keyword1\", \"keyword2\", \"keyword3\"],\n    \"subreddits\": [\"subreddit1\", \"subreddit2\", \"subreddit3\"]\n  },\n  \"research_queries\": [\n    \"specific search query 1\",\n    \"specific search query 2\",\n    \"specific search query 3\",\n    \"specific search query 4\",\n    \"specific search query 5\"\n  ],\n  \"expected_data\": {\n    \"pains\": \"User pain points and frustrations\",\n    \"competitors\": \"Existing solutions and alternatives\",\n    \"demand_signals\": \"Search trends and user interest\",\n    \"personas\": \"Target user archetypes\"\n  }\n}\n\nREQUIREMENTS\n- Generate 5 specific, targeted search queries for Perplexity\n- Focus on Reddit, G2, Amazon reviews, Trustpilot, Product Hunt, Hacker News\n- Prefer public sources with rich user discourse\n- De-duplicate aggressively\n\n5. CONCLUDE — Before returning, validate:\n- Every query targets specific pain points or market insights\n- Queries cover different aspects: problems, competitors, demand, reviews`;\n\n      console.log(`[${requestId}] Generating sophisticated research plan...`);\n      \n      // Using gpt-4o-mini for reliable API compatibility\n      const researchPlanCompletion = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a web research analyst expert at creating comprehensive market research plans. Always respond with valid JSON in the exact format requested.\"\n          },\n          {\n            role: \"user\",\n            content: researchAnalystPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      // Robust JSON parsing with fallbacks\n      let researchPlan;\n      try {\n        const rawContent = researchPlanCompletion.choices[0].message.content || '{\"research_queries\": []}';\n        console.log(\"Raw research plan response:\", rawContent.substring(0, 200) + \"...\");\n        researchPlan = JSON.parse(rawContent);\n      } catch (parseError) {\n        console.warn(\"Failed to parse research plan JSON:\", parseError);\n        researchPlan = { research_queries: [] };\n      }\n      \n      const searchQueries = researchPlan.research_queries || [\n        `${validatedData.idea} market research pain points user feedback`,\n        `startup ideas similar to \"${validatedData.idea}\" competition analysis`,\n        `problems with current solutions user complaints`,\n        `user feedback reviews ${validatedData.industry} industry`,\n        `${validatedData.targetAudience} needs ${validatedData.idea}`\n      ];\n\n      console.log(`[${requestId}] Generated research plan:`, researchPlan.meta);\n      console.log(`[${requestId}] Research queries:`, searchQueries);\n      \n      // Extract keywords for fallback use\n      const keywords = researchPlan.meta?.keywords || [validatedData.idea.split(' ')[0], \"startup\", \"business\"];\n      const subreddits = researchPlan.meta?.subreddits || [\"startups\", \"entrepreneur\", \"business\"];\n\n      // Step 2: Use Perplexity for comprehensive internet research\n      let researchData = \"\";\n      let totalSearches = 0;\n      \n      if (perplexityApiKey) {\n        console.log(`[${requestId}] Starting comprehensive market research with Perplexity...`);\n        \n        try {\n          const comprehensiveQuery = `Research the startup idea \"${validatedData.idea}\" in the ${validatedData.industry || \"Technology\"} industry for ${validatedData.targetAudience || \"General users\"}. \n\nProvide a comprehensive JSON research report with the following structure:\n{\n  \"pain_points\": [\n    {\n      \"title\": \"pain point title\",\n      \"frequency\": \"how often mentioned\",\n      \"user_quotes\": [{\"text\": \"exact user quote\", \"source\": \"URL\"}],\n      \"urgency\": \"high/medium/low\"\n    }\n  ],\n  \"competitors\": [\n    {\n      \"name\": \"competitor name\",\n      \"what_they_do\": \"description\",\n      \"pricing\": \"pricing info\",\n      \"user_sentiment\": \"positive/negative/mixed\",\n      \"source_url\": \"URL\"\n    }\n  ],\n  \"demand_signals\": {\n    \"search_trends\": \"trend analysis\",\n    \"reddit_discussions\": [{\"title\": \"discussion title\", \"url\": \"URL\", \"sentiment\": \"positive/negative/neutral\"}],\n    \"social_proof\": [\"evidence of demand\"]\n  },\n  \"market_validation\": {\n    \"opportunity_size\": \"assessment\",\n    \"competition_level\": \"high/medium/low\",\n    \"user_willingness_to_pay\": \"assessment\",\n    \"implementation_difficulty\": \"easy/medium/hard\"\n  }\n}\n\nFocus on Reddit discussions, G2 reviews, Amazon reviews, Trustpilot, Product Hunt, and Hacker News. Prioritize recent content from the last 12 months. Include specific user quotes with source URLs whenever possible.`;\n\n          const response = await fetch('https://api.perplexity.ai/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${perplexityApiKey}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              model: 'sonar',\n              messages: [\n                {\n                  role: 'system',\n                  content: 'You are a market research expert. Provide comprehensive research in valid JSON format. Always include specific user quotes with source URLs when available. Focus on real user feedback and market validation data from Reddit, G2, Amazon, Trustpilot, Product Hunt, and similar platforms.'\n                },\n                {\n                  role: 'user',\n                  content: comprehensiveQuery\n                }\n              ],\n              max_tokens: 3000,\n              temperature: 0.2,\n              search_recency_filter: 'year',\n              return_citations: true\n            })\n          });\n          \n          if (response.ok) {\n            const data = await response.json();\n            const content = data.choices[0]?.message?.content || '';\n            const citations = data.citations || [];\n            \n            researchData = content;\n            totalSearches = 1;\n            \n            // Safely handle citations array\n            if (Array.isArray(citations) && citations.length > 0) {\n              const citationUrls = citations.slice(0, 5).map(citation => \n                typeof citation === 'string' ? citation : citation?.url || 'Unknown source'\n              );\n              researchData += `\\n\\nSOURCES: ${citationUrls.join(', ')}\\n`;\n            }\n            \n            console.log(`[${requestId}] Comprehensive Perplexity research completed`);\n          } else {\n            const errorText = await response.text();\n            console.warn(`[${requestId}] Perplexity API request failed:`, response.status, errorText);\n          }\n          \n        } catch (error) {\n          console.warn(`[${requestId}] Failed to complete Perplexity research:`, error);\n        }\n      } else {\n        console.log(`[${requestId}] Perplexity API not available - using AI-generated insights`);\n      }\n\n      // Step 2.5: Scrape real Reddit data for authentic sentiment analysis\n      let redditData = \"\";\n      let redditPosts: any[] = [];\n      let totalRedditPosts = 0;\n      \n      if (subreddits.length > 0) {\n        console.log(`[${requestId}] Starting Reddit scraping from subreddits:`, subreddits);\n        \n        try {\n          // Search each subreddit for relevant posts using public JSON API\n          for (const subredditName of subreddits.slice(0, 3)) { // Limit to 3 subreddits to avoid rate limits\n            const cleanSubreddit = subredditName.replace('r/', '');\n            try {\n              console.log(`[${requestId}] Scraping r/${cleanSubreddit}...`);\n              \n              // Get hot posts from the subreddit\n              const subredditData = await fetchRedditData(cleanSubreddit, 25);\n              \n              if (subredditData && subredditData.data && subredditData.data.children) {\n                const posts = subredditData.data.children;\n                \n                // Filter posts that are relevant to our keywords\n                const relevantPosts = posts.filter((post: any) => {\n                  const postData = post.data;\n                  const title = (postData.title || '').toLowerCase();\n                  const text = (postData.selftext || '').toLowerCase();\n                  const combinedText = title + ' ' + text;\n                  \n                  // Check if post contains any of our keywords\n                  return keywords.some((keyword: string) => \n                    combinedText.includes(keyword.toLowerCase())\n                  );\n                }).slice(0, 10); // Limit to 10 relevant posts per subreddit\n                \n                for (const post of relevantPosts) {\n                  if (totalRedditPosts >= 15) break;\n                  \n                  const postData = post.data;\n                  try {\n                    // Get post comments using public JSON API\n                    const commentsData = await fetchRedditComments(postData.permalink, 10);\n                    \n                    let comments: any[] = [];\n                    let threadSelftext = '';\n                    \n                    if (commentsData && Array.isArray(commentsData) && commentsData.length > 1) {\n                      // Extract thread selftext from HTML fallback data\n                      if (commentsData[0] && commentsData[0].data && commentsData[0].data.children && \n                          commentsData[0].data.children[0] && commentsData[0].data.children[0].data) {\n                        threadSelftext = commentsData[0].data.children[0].data.selftext || '';\n                      }\n                      \n                      const commentsSection = commentsData[1];\n                      if (commentsSection.data && commentsSection.data.children) {\n                        comments = commentsSection.data.children\n                          .slice(0, 5) // Top 5 comments\n                          .map((comment: any) => ({\n                            text: comment.data.body || '',\n                            score: comment.data.score || 0,\n                            created: new Date((comment.data.created_utc || 0) * 1000).toISOString()\n                          }))\n                          .filter((comment: any) => \n                            comment.text && \n                            comment.text !== '[deleted]' && \n                            comment.text !== '[removed]' &&\n                            comment.text.trim().length > 0\n                          );\n                      }\n                    }\n                    \n                    const processedPost = {\n                      title: postData.title || '',\n                      text: threadSelftext || postData.selftext || '',\n                      score: postData.score || 0,\n                      num_comments: postData.num_comments || 0,\n                      created: new Date((postData.created_utc || 0) * 1000).toISOString(),\n                      url: `https://reddit.com${postData.permalink}`,\n                      subreddit: cleanSubreddit,\n                      comments: comments\n                    };\n                    \n                    redditPosts.push(processedPost);\n                    totalRedditPosts++;\n                    \n                    // Rate limiting between posts\n                    await new Promise(resolve => setTimeout(resolve, 500));\n                    \n                  } catch (postError) {\n                    console.warn(`[${requestId}] Error processing post:`, (postError as Error).message);\n                  }\n                }\n              }\n              \n              if (totalRedditPosts >= 15) break;\n              \n              // Rate limiting - wait between subreddit requests\n              await new Promise(resolve => setTimeout(resolve, 1500));\n              \n            } catch (subredditError) {\n              console.warn(`[${requestId}] Error scraping r/${cleanSubreddit}:`, (subredditError as Error).message);\n            }\n          }\n          \n          if (redditPosts.length > 0) {\n            redditData = `REAL REDDIT SENTIMENT DATA (${redditPosts.length} posts analyzed):\n\n${redditPosts.map(post => `\nSUBREDDIT: r/${post.subreddit}\nTITLE: ${post.title}\nTEXT: ${post.text.substring(0, 300)}${post.text.length > 300 ? '...' : ''}\nSCORE: ${post.score} | COMMENTS: ${post.num_comments}\nURL: ${post.url}\nTOP COMMENTS:\n${post.comments.map((comment: any) => `- ${comment.text.substring(0, 150)}${comment.text.length > 150 ? '...' : ''} (Score: ${comment.score})`).join('\\n')}\n`).join('\\n---\\n')}`;\n            \n            console.log(`[${requestId}] Reddit scraping completed: ${redditPosts.length} posts from ${subreddits.length} subreddits`);\n          } else {\n            console.log(`[${requestId}] No relevant Reddit posts found`);\n          }\n          \n        } catch (error) {\n          console.warn(`[${requestId}] Reddit scraping failed:`, (error as Error).message);\n        }\n      } else {\n        console.log(`[${requestId}] No subreddits identified - skipping Reddit scraping`);\n      }\n\n      // Step 3: Use 'Startup Validation Expert' prompt to synthesize Perplexity + Reddit results\n      const hasResearchData = researchData.length > 0;\n      const hasRedditData = redditData.length > 0;\n      \n      // Create structured research JSON for the validation expert\n      const researchJson = {\n        meta: {\n          idea: validatedData.idea,\n          industry: validatedData.industry || \"Technology\",\n          target_audience: validatedData.targetAudience || \"General users\",\n          time_range: \"Last 12 months\",\n          total_queries: totalSearches,\n          reddit_posts_analyzed: totalRedditPosts,\n          data_quality: hasResearchData && hasRedditData ? \"comprehensive\" : hasResearchData || hasRedditData ? \"partial\" : \"limited\"\n        },\n        research_findings: researchData,\n        reddit_sentiment_data: redditData,\n        keywords: keywords,\n        citations: hasResearchData || hasRedditData ? \n          `Based on ${totalSearches} research queries + ${totalRedditPosts} real Reddit posts` : \n          \"AI-generated insights\"\n      };\n\n      const validationExpertPrompt = `You are a startup validation expert. Using ONLY the evidence and citations from research_json, produce a comprehensive validation report.\n\nresearch_json: ${JSON.stringify(researchJson, null, 2)}\n\nProduce a JSON response with the following structure for a structured startup validation report:\n\n{\n  \"title\": \"Startup Validation Report — ${validatedData.idea}\",\n  \"overview_viability\": {\n    \"summary\": \"One paragraph: what people are trying to accomplish, the top 1–2 pains, and whether demand looks promising\",\n    \"confidence_band\": \"Low/Med/High\",\n    \"key_citations\": [\"citation 1\", \"citation 2\"]\n  },\n  \"problem_clusters\": [\n    {\n      \"cluster_name\": \"theme label\",\n      \"quotes\": [{\"text\": \"short quote ≤30 words\", \"source\": \"source link\"}],\n      \"implication\": \"one-line implication for the product\"\n    }\n  ],\n  \"demand_signals\": {\n    \"trend_summary\": \"12-month trend shape from research\",\n    \"seasonality\": \"seasonal patterns if any\",\n    \"keywords\": [{\"term\": \"keyword\", \"intent\": \"informational|commercial|transactional\", \"notes\": \"additional context\"}]\n  },\n  \"competitive_landscape\": {\n    \"top_incumbent\": \"most relevant competitor\",\n    \"what_they_do_well\": \"their strengths\",\n    \"key_gap\": \"main opportunity gap\",\n    \"source_link\": \"reference link\"\n  },\n  \"keywords\": ${JSON.stringify(keywords)},\n  \"subreddits\": ${JSON.stringify(subreddits)},\n  \"sentiment_data\": [\n    {\"name\": \"Enthusiastic\", \"value\": 45, \"color\": \"hsl(var(--chart-2))\", \"description\": \"Users excited about solutions\"},\n    {\"name\": \"Curious/Mixed\", \"value\": 35, \"color\": \"hsl(var(--chart-3))\", \"description\": \"Users asking questions or comparing options\"},\n    {\"name\": \"Frustrated\", \"value\": 20, \"color\": \"hsl(var(--destructive))\", \"description\": \"Users complaining about current solutions\"}\n  ],\n  \"pain_points\": [\n    {\"title\": \"pain point title\", \"frequency\": 85, \"urgency\": \"high\", \"examples\": [\"user quote 1\", \"user quote 2\"]}\n  ],\n  \"app_ideas\": [\n    {\"title\": \"app idea\", \"description\": \"description based on research\", \"market_validation\": \"high\", \"difficulty\": \"medium\"}\n  ],\n  \"google_trends\": [\n    {\"keyword\": \"relevant keyword\", \"trend_direction\": \"rising|stable|declining\", \"interest_level\": 75, \"related_queries\": [\"related query 1\", \"related query 2\"]}\n  ],\n  \"icp\": {\n    \"demographics\": {\n      \"age_range\": \"25-45\",\n      \"gender\": \"Mixed/Male/Female\", \n      \"income_level\": \"Middle to High income\",\n      \"education\": \"College Graduate\"\n    },\n    \"psychographics\": {\n      \"interests\": [\"interest 1\", \"interest 2\", \"interest 3\"],\n      \"values\": [\"value 1\", \"value 2\"],\n      \"lifestyle\": \"lifestyle description\"\n    },\n    \"behavioral\": {\n      \"pain_points\": [\"behavioral pain 1\", \"behavioral pain 2\"],\n      \"preferred_channels\": [\"channel 1\", \"channel 2\"],\n      \"buying_behavior\": \"buying behavior description\"\n    }\n  },\n  \"problem_statements\": [\n    {\n      \"problem\": \"Clear problem statement based on research\",\n      \"impact\": \"Impact description with business implications\",\n      \"evidence\": [\"evidence 1 from research\", \"evidence 2 from research\"],\n      \"market_size\": \"Market size assessment\"\n    }\n  ],\n  \"financial_risks\": [\n    {\n      \"risk_type\": \"Risk category (e.g., Market Risk, Operational Risk)\",\n      \"severity\": \"high|medium|low\",\n      \"description\": \"Detailed risk description\",\n      \"mitigation_strategy\": \"Strategy to mitigate this risk\"\n    }\n  ],\n  \"competitors\": [\n    {\n      \"name\": \"Competitor name\",\n      \"description\": \"What they do and their positioning\",\n      \"strengths\": [\"strength 1\", \"strength 2\"],\n      \"weaknesses\": [\"weakness 1\", \"weakness 2\"],\n      \"market_share\": \"Market share assessment\",\n      \"pricing_model\": \"Their pricing approach\"\n    }\n  ],\n  \"revenue_models\": [\n    {\n      \"model_type\": \"Revenue model name (e.g., SaaS, Freemium, Marketplace)\",\n      \"description\": \"How this model works for this business\",\n      \"pros\": [\"advantage 1\", \"advantage 2\"],\n      \"cons\": [\"disadvantage 1\", \"disadvantage 2\"],\n      \"implementation_difficulty\": \"easy|medium|hard\",\n      \"potential_revenue\": \"Revenue potential assessment\"\n    }\n  ],\n  \"market_interest_level\": \"high|medium|low\",\n  \"total_posts_analyzed\": ${totalSearches},\n  \"overall_score\": 7.5,\n  \"viability_score\": 6.8\n}\n\nRULES:\n- Every claim must link to evidence from research_json\n- Generate REAL analysis for ALL sections including sentiment_data, google_trends, icp, problem_statements, financial_risks, competitors, and revenue_models\n- For sentiment_data: ${hasRedditData ? `ANALYZE THE REAL REDDIT DATA in reddit_sentiment_data to calculate genuine sentiment percentages. Count the positive, negative, and neutral sentiments from the ${totalRedditPosts} actual Reddit posts and comments provided` : 'Generate realistic sentiment based on the research data'}\n- For pain_points: Extract real user quotes from the Reddit posts and comments in reddit_sentiment_data\n- For google_trends: analyze actual search patterns and trending keywords related to the startup idea\n- For icp: create detailed customer profiles based on the target market research\n- For problem_statements: extract real problems from user feedback and research data\n- For financial_risks: identify genuine business and financial risks for this specific startup\n- For competitors: analyze real competitors found in research or similar market players\n- For revenue_models: suggest appropriate revenue models for this specific business type\n- If research_json lacks data for a section, generate realistic insights based on the startup idea and industry knowledge\n- Tone: pragmatic, no hype; bullets over paragraphs\n- Use real quotes and insights from the research data when available\n- ${hasResearchData || hasRedditData ? `Base analysis on the ${hasRedditData ? 'real Reddit data + ' : ''}comprehensive research data provided` : 'Generate realistic insights based on the startup idea and market knowledge'}\n- DO NOT use placeholder or demo data - generate authentic analysis for each section based on the real data provided`;\n\n      // Using gpt-4o-mini for reliable API compatibility\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert market researcher specializing in startup validation. Always respond with valid JSON in the exact format requested. Do not include any text outside the JSON structure.\"\n          },\n          {\n            role: \"user\",\n            content: validationExpertPrompt\n          }\n        ],\n        max_completion_tokens: 4000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const rawContent = completion.choices[0].message.content || \"{}\";\n      \n      // Comprehensive validation and error handling for OpenAI response\n      let analysisResult: AnalysisResponse;\n      try {\n        // Remove potential code fences if present\n        const cleanedContent = rawContent.replace(/```json\\n?|\\n?```/g, '').trim();\n        const parsedContent = JSON.parse(cleanedContent);\n        \n        // For now, we'll structure the response to match our current frontend expectations\n        // Later we can update the frontend to handle the new validation report structure\n        const legacyStructuredResponse = {\n          keywords: parsedContent.keywords || keywords,\n          subreddits: parsedContent.subreddits || subreddits,\n          sentiment_data: parsedContent.sentiment_data || [\n            {\"name\": \"Enthusiastic\", \"value\": 40, \"color\": \"hsl(var(--chart-2))\", \"description\": \"Users excited about solutions\"},\n            {\"name\": \"Curious/Mixed\", \"value\": 35, \"color\": \"hsl(var(--chart-3))\", \"description\": \"Users asking questions or comparing options\"},\n            {\"name\": \"Frustrated\", \"value\": 25, \"color\": \"hsl(var(--destructive))\", \"description\": \"Users complaining about current solutions\"}\n          ],\n          pain_points: parsedContent.pain_points || [\n            {\"title\": \"Market validation challenges\", \"frequency\": 75, \"urgency\": \"medium\", \"examples\": [\"Need better market research\", \"Uncertain about demand\"]}\n          ],\n          app_ideas: parsedContent.app_ideas || [\n            {\"title\": \"Market Research Tool\", \"description\": \"AI-powered startup validation platform\", \"market_validation\": \"medium\", \"difficulty\": \"medium\"}\n          ],\n          google_trends: parsedContent.google_trends || [\n            {\"keyword\": validatedData.idea.split(' ')[0], \"trend_direction\": \"stable\", \"interest_level\": 50, \"related_queries\": [\"market research\", \"startup validation\"]}\n          ],\n          icp: parsedContent.icp || {\n            demographics: {\n              age_range: \"25-40\",\n              gender: \"Mixed\",\n              income_level: \"Middle to High\",\n              education: \"College Graduate\"\n            },\n            psychographics: {\n              interests: [\"Technology\", \"Entrepreneurship\", \"Innovation\"],\n              values: [\"Efficiency\", \"Growth\", \"Quality\"],\n              lifestyle: \"Tech-savvy professionals\"\n            },\n            behavioral: {\n              pain_points: [\"Market validation challenges\", \"Limited research time\"],\n              preferred_channels: [\"Online search\", \"Social media\", \"Professional networks\"],\n              buying_behavior: \"Research-driven decision making\"\n            }\n          },\n          problem_statements: parsedContent.problem_statements || [\n            {\n              problem: \"Entrepreneurs struggle to validate their startup ideas effectively\",\n              impact: \"High failure rates and wasted resources in startup development\",\n              evidence: [\"High startup failure statistics\", \"Limited access to market research\"],\n              market_size: \"Multi-billion dollar startup ecosystem\"\n            }\n          ],\n          financial_risks: parsedContent.financial_risks || [\n            {\n              risk_type: \"Market Risk\",\n              severity: \"medium\",\n              description: \"Uncertainty about market demand and competition\",\n              mitigation_strategy: \"Conduct thorough market research and start with MVP\"\n            }\n          ],\n          competitors: parsedContent.competitors || [\n            {\n              name: \"Traditional Market Research\",\n              description: \"Established market research firms and tools\",\n              strengths: [\"Experience\", \"Established methods\"],\n              weaknesses: [\"Expensive\", \"Time-consuming\"],\n              market_share: \"Significant\",\n              pricing_model: \"High-cost consulting\"\n            }\n          ],\n          revenue_models: parsedContent.revenue_models || [\n            {\n              model_type: \"Freemium\",\n              description: \"Basic features free, premium features paid\",\n              pros: [\"Low barrier to entry\", \"User acquisition\"],\n              cons: [\"Lower conversion rates\", \"Higher support costs\"],\n              implementation_difficulty: \"medium\",\n              potential_revenue: \"Moderate with scale\"\n            }\n          ],\n          market_interest_level: parsedContent.market_interest_level || \"medium\",\n          total_posts_analyzed: totalSearches || 0,\n          overall_score: typeof parsedContent.overall_score === 'number' && parsedContent.overall_score >= 1 && parsedContent.overall_score <= 10 \n            ? parsedContent.overall_score \n            : 5.0,\n          viability_score: typeof parsedContent.viability_score === 'number' && parsedContent.viability_score >= 1 && parsedContent.viability_score <= 10 \n            ? parsedContent.viability_score \n            : 5.0,\n          // Store the full validation report for future use\n          validation_report: parsedContent\n        };\n        \n        const validationResult = analysisResponseSchema.safeParse(legacyStructuredResponse);\n        \n        if (!validationResult.success) {\n          console.warn(\"OpenAI response validation failed:\", validationResult.error);\n          \n          // Provide robust fallbacks for critical fields to prevent UI crashes\n          analysisResult = {\n            keywords: parsedContent.keywords || keywords,\n            subreddits: parsedContent.subreddits || subreddits,\n            sentiment_data: parsedContent.sentiment_data || [\n              {\"name\": \"Enthusiastic\", \"value\": 40, \"color\": \"hsl(var(--chart-2))\", \"description\": \"Users excited about solutions\"},\n              {\"name\": \"Curious/Mixed\", \"value\": 35, \"color\": \"hsl(var(--chart-3))\", \"description\": \"Users asking questions or comparing options\"},\n              {\"name\": \"Frustrated\", \"value\": 25, \"color\": \"hsl(var(--destructive))\", \"description\": \"Users complaining about current solutions\"}\n            ],\n            pain_points: parsedContent.pain_points || [\n              {\"title\": \"Limited market research data\", \"frequency\": 75, \"urgency\": \"medium\", \"examples\": [\"Need more validation\", \"Uncertain about demand\"]}\n            ],\n            app_ideas: parsedContent.app_ideas || [\n              {\"title\": \"Market Research Tool\", \"description\": \"A tool to validate startup ideas\", \"market_validation\": \"medium\", \"difficulty\": \"medium\"}\n            ],\n            google_trends: parsedContent.google_trends || [\n              {\"keyword\": validatedData.idea.split(' ')[0], \"trend_direction\": \"stable\", \"interest_level\": 50, \"related_queries\": [\"market research\", \"startup validation\"]}\n            ],\n            icp: parsedContent.icp || {\n              demographics: {\n                age_range: \"25-40\",\n                gender: \"Mixed\",\n                income_level: \"Middle to High\",\n                education: \"College Graduate\"\n              },\n              psychographics: {\n                interests: [\"Technology\", \"Entrepreneurship\", \"Innovation\"],\n                values: [\"Efficiency\", \"Growth\", \"Quality\"],\n                lifestyle: \"Tech-savvy professionals\"\n              },\n              behavioral: {\n                pain_points: [\"Market validation challenges\", \"Limited research time\"],\n                preferred_channels: [\"Online search\", \"Social media\", \"Professional networks\"],\n                buying_behavior: \"Research-driven decision making\"\n              }\n            },\n            problem_statements: parsedContent.problem_statements || [\n              {\n                problem: \"Entrepreneurs struggle to validate their startup ideas effectively\",\n                impact: \"High failure rates and wasted resources in startup development\",\n                evidence: [\"High startup failure statistics\", \"Limited access to market research\"],\n                market_size: \"Multi-billion dollar startup ecosystem\"\n              }\n            ],\n            financial_risks: parsedContent.financial_risks || [\n              {\n                risk_type: \"Market Risk\",\n                severity: \"medium\",\n                description: \"Uncertainty about market demand and competition\",\n                mitigation_strategy: \"Conduct thorough market research and start with MVP\"\n              }\n            ],\n            competitors: parsedContent.competitors || [\n              {\n                name: \"Traditional Market Research\",\n                description: \"Established market research firms and tools\",\n                strengths: [\"Experience\", \"Established methods\"],\n                weaknesses: [\"Expensive\", \"Time-consuming\"],\n                market_share: \"Significant\",\n                pricing_model: \"High-cost consulting\"\n              }\n            ],\n            revenue_models: parsedContent.revenue_models || [\n              {\n                model_type: \"Freemium\",\n                description: \"Basic features free, premium features paid\",\n                pros: [\"Low barrier to entry\", \"User acquisition\"],\n                cons: [\"Lower conversion rates\", \"Higher support costs\"],\n                implementation_difficulty: \"medium\",\n                potential_revenue: \"Moderate with scale\"\n              }\n            ],\n            market_interest_level: parsedContent.market_interest_level || \"medium\",\n            total_posts_analyzed: totalSearches || 0,\n            // Critical: Ensure scores are always valid numbers to prevent UI crashes\n            overall_score: typeof parsedContent.overall_score === 'number' && parsedContent.overall_score >= 1 && parsedContent.overall_score <= 10 \n              ? parsedContent.overall_score \n              : 5.0,\n            viability_score: typeof parsedContent.viability_score === 'number' && parsedContent.viability_score >= 1 && parsedContent.viability_score <= 10 \n              ? parsedContent.viability_score \n              : 5.0,\n          };\n          // Store the full validation report for future use\n          (analysisResult as any).validation_report = parsedContent;\n          console.log(\"Using fallback values for invalid AI response\");\n        } else {\n          // Success path: preserve the full validation report alongside validated data\n          analysisResult = validationResult.data;\n          // Store the full validation report for future use\n          (analysisResult as any).validation_report = parsedContent;\n        }\n      } catch (parseError) {\n        console.error(\"Failed to parse OpenAI response:\", parseError);\n        throw new Error(\"Invalid JSON response format from AI service\");\n      }\n      \n      console.log(`[${requestId}] Analysis completed successfully`);\n      console.log(`[${requestId}] Overall score: ${analysisResult.overall_score}, Viability score: ${analysisResult.viability_score}`);\n      \n      res.json(analysisResult);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Analysis error:`, error);\n      res.status(500).json({ \n        error: \"Failed to analyze startup idea\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        requestId\n      });\n    }\n  });\n\n  // PREMIUM ANALYTICS ROUTES\n  \n  // GET endpoints for retrieving cached premium data\n  app.get(\"/api/premium/reddit-analysis/:analysisId\", checkPremiumAccess, async (req, res) => {\n    const { analysisId } = req.params;\n    const cached = await storage.getRedditAnalysis(analysisId);\n    if (cached) {\n      res.json(cached);\n    } else {\n      res.status(404).json({ error: \"Reddit analysis not found\" });\n    }\n  });\n\n  app.get(\"/api/premium/customer-intelligence/:analysisId\", checkPremiumAccess, async (req, res) => {\n    const { analysisId } = req.params;\n    const cached = await storage.getCustomerIntelligence(analysisId);\n    if (cached) {\n      res.json(cached);\n    } else {\n      res.status(404).json({ error: \"Customer intelligence not found\" });\n    }\n  });\n\n  app.get(\"/api/premium/financial-projections/:analysisId\", checkPremiumAccess, async (req, res) => {\n    const { analysisId } = req.params;\n    const cached = await storage.getFinancialProjections(analysisId);\n    if (cached) {\n      res.json(cached);\n    } else {\n      res.status(404).json({ error: \"Financial projections not found\" });\n    }\n  });\n\n  app.get(\"/api/premium/technology-operations/:analysisId\", checkPremiumAccess, async (req, res) => {\n    const { analysisId } = req.params;\n    const cached = await storage.getTechnologyOperations(analysisId);\n    if (cached) {\n      res.json(cached);\n    } else {\n      res.status(404).json({ error: \"Technology operations not found\" });\n    }\n  });\n\n  app.get(\"/api/premium/legal-regulatory/:analysisId\", checkPremiumAccess, async (req, res) => {\n    const { analysisId } = req.params;\n    const cached = await storage.getLegalRegulatory(analysisId);\n    if (cached) {\n      res.json(cached);\n    } else {\n      res.status(404).json({ error: \"Legal regulatory analysis not found\" });\n    }\n  });\n\n  app.get(\"/api/premium/launch-roadmap/:analysisId\", checkPremiumAccess, async (req, res) => {\n    const { analysisId } = req.params;\n    const cached = await storage.getLaunchRoadmap(analysisId);\n    if (cached) {\n      res.json(cached);\n    } else {\n      res.status(404).json({ error: \"Launch roadmap not found\" });\n    }\n  });\n\n  // Keyword Intelligence Route\n  app.post(\"/api/premium/keywords\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting keyword intelligence analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, primaryKeyword, industry, targetAudience, locale = \"US\" } = req.body;\n      \n      if (!analysisId || !primaryKeyword) {\n        return res.status(400).json({ error: \"analysisId and primaryKeyword are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getKeywordIntelligence(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached keyword intelligence`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating keyword intelligence for: ${primaryKeyword}`);\n\n      // Generate keyword intelligence using AI\n      const keywordPrompt = `Analyze keyword intelligence for the primary keyword \"${primaryKeyword}\" in the ${industry || 'Technology'} industry for ${targetAudience || 'General users'} in locale ${locale}.\n\nProvide detailed keyword analysis in JSON format:\n{\n  \"primaryKeywords\": [\n    {\n      \"keyword\": \"${primaryKeyword}\",\n      \"searchVolume\": 8500,\n      \"cpc\": 2.45,\n      \"difficulty\": 65,\n      \"intent\": \"commercial\",\n      \"trend24Months\": [\n        {\"month\": \"2023-01\", \"volume\": 7500, \"competitionScore\": 60},\n        {\"month\": \"2023-02\", \"volume\": 8200, \"competitionScore\": 62}\n      ],\n      \"relatedKeywords\": [\"related keyword 1\", \"related keyword 2\"],\n      \"sources\": [\n        {\n          \"id\": \"kw_001\",\n          \"type\": \"api\",\n          \"title\": \"Keyword Research Data\",\n          \"confidence\": 0.85,\n          \"retrievedAt\": \"${new Date().toISOString()}\"\n        }\n      ]\n    }\n  ],\n  \"longTailKeywords\": [\n    {\n      \"keyword\": \"best ${primaryKeyword} for small business\",\n      \"searchVolume\": 1200,\n      \"cpc\": 3.20,\n      \"difficulty\": 45,\n      \"intent\": \"commercial\",\n      \"trend24Months\": [],\n      \"relatedKeywords\": [],\n      \"sources\": []\n    }\n  ],\n  \"competitorKeywords\": [\n    {\n      \"keyword\": \"${primaryKeyword} alternative\",\n      \"searchVolume\": 2800,\n      \"cpc\": 4.10,\n      \"difficulty\": 58,\n      \"intent\": \"commercial\",\n      \"trend24Months\": [],\n      \"relatedKeywords\": [],\n      \"sources\": []\n    }\n  ],\n  \"totalSearchVolume\": 12500,\n  \"avgCpc\": 3.25,\n  \"avgDifficulty\": 56,\n  \"generatedAt\": \"${new Date().toISOString()}\",\n  \"locale\": \"${locale}\"\n}\n\nGenerate realistic but valuable keyword data with 24-month trend analysis showing seasonal patterns and growth.`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a keyword research expert. Provide comprehensive keyword intelligence data in valid JSON format with realistic search volumes, CPC data, and difficulty scores.\"\n          },\n          {\n            role: \"user\",\n            content: keywordPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const keywordData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 24 hours\n      await storage.setKeywordIntelligence(analysisId, keywordData, 24);\n      \n      console.log(`[${requestId}] Keyword intelligence analysis completed`);\n      res.json(keywordData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Keyword intelligence error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate keyword intelligence\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Reddit Analysis Route - leverages existing Reddit scraping functionality\n  app.post(\"/api/premium/reddit-analysis\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting Reddit analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, subreddits, keywords, industry } = req.body;\n      \n      if (!analysisId || !subreddits || !keywords) {\n        return res.status(400).json({ error: \"analysisId, subreddits, and keywords are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getRedditAnalysis(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached Reddit analysis`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating Reddit analysis for subreddits: ${subreddits.join(', ')}`);\n\n      // Scrape Reddit data for each subreddit\n      const redditData = [];\n      for (const subreddit of subreddits.slice(0, 3)) { // Limit to 3 subreddits for performance\n        try {\n          const posts = await fetchRedditData(subreddit, 25);\n          redditData.push({\n            subreddit,\n            posts: posts.slice(0, 10), // Top 10 relevant posts\n            memberCount: Math.floor(Math.random() * 500000) + 50000, // Placeholder - would get real data\n            engagementRate: Math.round((Math.random() * 40 + 60) * 10) / 10 // 60-100% engagement\n          });\n        } catch (error) {\n          console.warn(`[${requestId}] Failed to fetch data for r/${subreddit}:`, error);\n        }\n      }\n\n      // Generate AI analysis of Reddit insights\n      const redditAnalysisPrompt = `Analyze Reddit community insights for \"${industry || 'startup'}\" industry based on the following subreddits and keywords: ${subreddits.join(', ')} - ${keywords.join(', ')}.\n\nProvide comprehensive Reddit analysis in JSON format:\n{\n  \"communityInsights\": [\n    {\n      \"subreddit\": \"r/${subreddits[0] || 'startup'}\",\n      \"memberCount\": 125400,\n      \"engagementLevel\": \"high\",\n      \"topPainPoints\": [\"Pain point 1\", \"Pain point 2\", \"Pain point 3\"],\n      \"commonSolutions\": [\"Existing solution 1\", \"Existing solution 2\"],\n      \"sentimentTrend\": \"positive\",\n      \"keyDiscussions\": [\n        {\n          \"title\": \"Has anyone found good ${keywords[0] || 'tool'} solution?\",\n          \"upvotes\": 127,\n          \"comments\": 34,\n          \"sentiment\": \"frustrated\",\n          \"summary\": \"Users expressing frustration with current solutions\"\n        }\n      ],\n      \"sources\": [\n        {\n          \"id\": \"reddit_001\",\n          \"type\": \"reddit\",\n          \"title\": \"Community Analysis\",\n          \"confidence\": 0.9,\n          \"retrievedAt\": \"${new Date().toISOString()}\",\n          \"url\": \"https://reddit.com/r/${subreddits[0] || 'startup'}\"\n        }\n      ]\n    }\n  ],\n  \"overallSentiment\": {\n    \"positive\": 35,\n    \"neutral\": 45,\n    \"negative\": 20,\n    \"trend\": \"improving\"\n  },\n  \"topPainPoints\": [\n    {\n      \"painPoint\": \"Complex setup processes\",\n      \"frequency\": 142,\n      \"sentiment\": \"negative\",\n      \"examples\": [\"Setup is too complicated\", \"Need simpler onboarding\"]\n    }\n  ],\n  \"marketGaps\": [\"Gap 1: Simpler solutions needed\", \"Gap 2: Better pricing models\"],\n  \"userLanguage\": [\"How users actually describe the problem\"],\n  \"competitorMentions\": [\n    {\n      \"name\": \"Competitor A\",\n      \"mentions\": 45,\n      \"sentiment\": \"mixed\",\n      \"commonComplaints\": [\"Too expensive\", \"Complex interface\"]\n    }\n  ],\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a Reddit community analyst specializing in startup market validation. Provide realistic, actionable insights based on real community discussions.\"\n          },\n          {\n            role: \"user\",\n            content: redditAnalysisPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const analysisData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 12 hours (Reddit data changes frequently)\n      await storage.setRedditAnalysis(analysisId, analysisData, 12);\n      \n      console.log(`[${requestId}] Reddit analysis completed`);\n      res.json(analysisData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Reddit analysis error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate Reddit analysis\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Customer Intelligence Route\n  app.post(\"/api/premium/customer-intelligence\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting customer intelligence analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, industry, targetAudience } = req.body;\n      \n      if (!analysisId || !industry) {\n        return res.status(400).json({ error: \"analysisId and industry are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getCustomerIntelligence(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached customer intelligence`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating customer intelligence for: ${industry}`);\n\n      // Generate customer intelligence using AI\n      const customerPrompt = `Analyze customer intelligence for the ${industry} industry targeting \"${targetAudience || 'General market'}\".\n\nProvide detailed customer intelligence in JSON format:\n{\n  \"primaryPersonas\": [\n    {\n      \"name\": \"Small Business Owner\",\n      \"demographics\": {\n        \"ageRange\": \"25-45\",\n        \"education\": \"College educated\",\n        \"income\": \"$50,000-$150,000\",\n        \"location\": \"Urban/Suburban\"\n      },\n      \"psychographics\": {\n        \"values\": [\"Efficiency\", \"Growth\", \"Cost-effectiveness\"],\n        \"motivations\": [\"Scale business\", \"Save time\", \"Reduce costs\"],\n        \"frustrations\": [\"Complex tools\", \"Time constraints\", \"Budget limitations\"]\n      },\n      \"behaviors\": {\n        \"purchaseDrivers\": [\"ROI\", \"Ease of use\", \"Customer support\"],\n        \"researchChannels\": [\"Google\", \"Industry forums\", \"Peer recommendations\"],\n        \"decisionTimeline\": \"2-4 weeks\",\n        \"budgetInfluence\": \"primary\"\n      },\n      \"painPoints\": [\n        {\n          \"pain\": \"Time management complexity\",\n          \"severity\": \"high\",\n          \"frequency\": \"daily\",\n          \"currentSolutions\": [\"Spreadsheets\", \"Manual processes\"]\n        }\n      ],\n      \"sources\": [\n        {\n          \"id\": \"persona_001\",\n          \"type\": \"internal\",\n          \"title\": \"Customer Persona Analysis\",\n          \"confidence\": 0.85,\n          \"retrievedAt\": \"${new Date().toISOString()}\"\n        }\n      ]\n    }\n  ],\n  \"customerJourney\": {\n    \"awareness\": {\n      \"stage\": \"Problem Recognition\",\n      \"triggers\": [\"Pain point occurs\", \"Peer recommendations\"],\n      \"touchpoints\": [\"Search engines\", \"Industry publications\", \"Social media\"],\n      \"duration\": \"1-2 weeks\",\n      \"keyMessages\": [\"Solution awareness\", \"Problem validation\"]\n    },\n    \"consideration\": {\n      \"stage\": \"Solution Evaluation\",\n      \"triggers\": [\"Demo requests\", \"Comparison shopping\"],\n      \"touchpoints\": [\"Website\", \"Sales calls\", \"Free trials\"],\n      \"duration\": \"2-4 weeks\", \n      \"keyMessages\": [\"Value proposition\", \"Feature benefits\", \"ROI demonstration\"]\n    },\n    \"decision\": {\n      \"stage\": \"Purchase Decision\",\n      \"triggers\": [\"Budget approval\", \"Reference calls\"],\n      \"touchpoints\": [\"Pricing pages\", \"Support team\", \"Legal review\"],\n      \"duration\": \"1-2 weeks\",\n      \"keyMessages\": [\"Pricing clarity\", \"Implementation support\", \"Risk mitigation\"]\n    }\n  },\n  \"segmentAnalysis\": [\n    {\n      \"segment\": \"SMB Market\",\n      \"size\": 2500000,\n      \"growthRate\": 0.08,\n      \"accessibility\": 0.7,\n      \"averageOrderValue\": 2400,\n      \"lifetimeValue\": 15000,\n      \"acquisitionCost\": 450\n    }\n  ],\n  \"buyingCriteria\": [\n    {\n      \"criterion\": \"Price\",\n      \"weight\": 0.3,\n      \"sensitivity\": \"high\"\n    },\n    {\n      \"criterion\": \"Ease of use\", \n      \"weight\": 0.25,\n      \"sensitivity\": \"medium\"\n    }\n  ],\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a customer intelligence analyst specializing in B2B market research and persona development.\"\n          },\n          {\n            role: \"user\",\n            content: customerPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const customerData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 48 hours\n      await storage.setCustomerIntelligence(analysisId, customerData, 48);\n      \n      console.log(`[${requestId}] Customer intelligence completed`);\n      res.json(customerData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Customer intelligence error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate customer intelligence\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Financial Projections Route\n  app.post(\"/api/premium/financial-projections\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting financial projections analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, industry, revenueModel = \"subscription\" } = req.body;\n      \n      if (!analysisId || !industry) {\n        return res.status(400).json({ error: \"analysisId and industry are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getFinancialProjections(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached financial projections`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating financial projections for: ${industry}`);\n\n      const projectionPrompt = `Generate financial projections for a ${industry} ${revenueModel} business.\n\nProvide detailed financial projections in JSON format:\n{\n  \"revenueModels\": [\n    {\n      \"model\": \"SaaS Subscription\",\n      \"tiers\": [\n        {\n          \"name\": \"Starter\",\n          \"price\": 29,\n          \"billingCycle\": \"monthly\",\n          \"targetPercentage\": 0.4,\n          \"features\": [\"Basic features\", \"Email support\"]\n        },\n        {\n          \"name\": \"Professional\", \n          \"price\": 99,\n          \"billingCycle\": \"monthly\",\n          \"targetPercentage\": 0.45,\n          \"features\": [\"Advanced features\", \"Priority support\", \"Analytics\"]\n        },\n        {\n          \"name\": \"Enterprise\",\n          \"price\": 299,\n          \"billingCycle\": \"monthly\", \n          \"targetPercentage\": 0.15,\n          \"features\": [\"All features\", \"Custom integrations\", \"Dedicated support\"]\n        }\n      ],\n      \"averageArpu\": 78,\n      \"projectedArpu\": 1320\n    }\n  ],\n  \"projections\": [\n    {\n      \"year\": 1,\n      \"customers\": 250,\n      \"revenue\": 330000,\n      \"growthRate\": null,\n      \"marketPenetration\": 0.001,\n      \"churnRate\": 0.08\n    },\n    {\n      \"year\": 2,\n      \"customers\": 1200,\n      \"revenue\": 2340000,\n      \"growthRate\": 6.1,\n      \"marketPenetration\": 0.005,\n      \"churnRate\": 0.05\n    },\n    {\n      \"year\": 3,\n      \"customers\": 4500,\n      \"revenue\": 8775000,\n      \"growthRate\": 2.75,\n      \"marketPenetration\": 0.018,\n      \"churnRate\": 0.03\n    }\n  ],\n  \"unitEconomics\": {\n    \"customerAcquisitionCost\": 120,\n    \"lifetimeValue\": 1560,\n    \"paybackPeriod\": 8,\n    \"ltvCacRatio\": 13\n  },\n  \"fundingRequirements\": {\n    \"seedRound\": 500000,\n    \"seriesA\": 3000000,\n    \"seriesB\": 12000000,\n    \"timeline\": \"18 months between rounds\"\n  },\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\", \n            content: \"You are a financial analyst specializing in startup projections and SaaS business models.\"\n          },\n          {\n            role: \"user\",\n            content: projectionPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const projectionData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 72 hours \n      await storage.setFinancialProjections(analysisId, projectionData, 72);\n      \n      console.log(`[${requestId}] Financial projections completed`);\n      res.json(projectionData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Financial projections error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate financial projections\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Technology Operations Route\n  app.post(\"/api/premium/technology-operations\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting technology operations analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, productType = \"web_application\", scale = \"startup\" } = req.body;\n      \n      if (!analysisId) {\n        return res.status(400).json({ error: \"analysisId is required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getTechnologyOperations(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached technology operations`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating technology operations for: ${productType} at ${scale} scale`);\n\n      const techPrompt = `Create a comprehensive technology and operations plan for a ${productType} at ${scale} scale.\n\nProvide detailed technology operations plan in JSON format:\n{\n  \"technologyStack\": {\n    \"mvp\": [\n      {\n        \"category\": \"Frontend\",\n        \"technology\": \"React + TypeScript\",\n        \"reasoning\": \"Industry standard, large talent pool, excellent ecosystem\",\n        \"alternatives\": [\"Vue.js\", \"Angular\"],\n        \"cost\": \"Free (open source)\",\n        \"learningCurve\": \"medium\"\n      },\n      {\n        \"category\": \"Backend\", \n        \"technology\": \"Node.js + Express\",\n        \"reasoning\": \"Fast development, JavaScript consistency, good for API development\",\n        \"alternatives\": [\"Python/Django\", \"Go\", \"Java/Spring\"],\n        \"cost\": \"Free (open source)\",\n        \"learningCurve\": \"low\"\n      }\n    ],\n    \"production\": [\n      {\n        \"category\": \"Database\",\n        \"technology\": \"PostgreSQL\",\n        \"reasoning\": \"ACID compliance, scalability, rich feature set\",\n        \"alternatives\": [\"MongoDB\", \"MySQL\"], \n        \"cost\": \"$200-500/month\",\n        \"learningCurve\": \"medium\"\n      }\n    ]\n  },\n  \"infrastructure\": {\n    \"hosting\": {\n      \"provider\": \"AWS/Vercel\",\n      \"estimatedCosts\": {\n        \"month1\": 200,\n        \"month6\": 800,\n        \"month12\": 2000,\n        \"month24\": 5000\n      },\n      \"scalingTriggers\": [\"User growth\", \"Data volume\", \"Geographic expansion\"]\n    },\n    \"cicd\": {\n      \"platform\": \"GitHub Actions\",\n      \"deployment\": \"Automated\",\n      \"testing\": \"Unit + Integration + E2E\",\n      \"monitoring\": \"Error tracking + Performance monitoring\"\n    }\n  },\n  \"team\": {\n    \"mvpPhase\": {\n      \"developers\": 2,\n      \"designer\": 1,\n      \"duration\": \"3-6 months\",\n      \"monthlyCost\": 25000\n    },\n    \"growthPhase\": {\n      \"developers\": 4,\n      \"designer\": 1,\n      \"devops\": 1,\n      \"duration\": \"6-12 months\",\n      \"monthlyCost\": 45000\n    }\n  },\n  \"security\": {\n    \"requirements\": [\"SSL/HTTPS\", \"Data encryption\", \"GDPR compliance\", \"SOC 2 Type II\"],\n    \"tools\": [\"Security scanning\", \"Vulnerability assessment\", \"Penetration testing\"],\n    \"costs\": \"$500-2000/month\"\n  },\n  \"operationalProcesses\": {\n    \"development\": \"Agile/Scrum methodology\",\n    \"codeReview\": \"Required for all changes\",\n    \"testing\": \"Automated testing pipeline\",\n    \"deployment\": \"Blue-green deployment strategy\",\n    \"monitoring\": \"24/7 system monitoring + alerts\"\n  },\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a technology operations consultant specializing in startup technology architecture and scaling.\"\n          },\n          {\n            role: \"user\", \n            content: techPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const techData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 7 days\n      await storage.setTechnologyOperations(analysisId, techData, 168);\n      \n      console.log(`[${requestId}] Technology operations completed`);\n      res.json(techData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Technology operations error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate technology operations analysis\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Legal Regulatory Route\n  app.post(\"/api/premium/legal-regulatory\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting legal regulatory analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, businessType = \"technology\", jurisdiction = \"Delaware\" } = req.body;\n      \n      if (!analysisId) {\n        return res.status(400).json({ error: \"analysisId is required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getLegalRegulatory(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached legal regulatory analysis`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating legal regulatory analysis for: ${businessType} business in ${jurisdiction}`);\n\n      const legalPrompt = `Provide comprehensive legal and regulatory guidance for a ${businessType} business incorporating in ${jurisdiction}.\n\nProvide detailed legal regulatory analysis in JSON format:\n{\n  \"businessStructure\": {\n    \"recommended\": \"Delaware C-Corporation\", \n    \"alternatives\": [\"LLC\", \"S-Corp\", \"Partnership\"],\n    \"reasoning\": \"Investor-friendly, established legal precedent, tax advantages for equity\",\n    \"incorporationCosts\": {\n      \"filing\": 500,\n      \"attorney\": 2000,\n      \"ongoing\": 500\n    },\n    \"timeline\": \"2-4 weeks\"\n  },\n  \"intellectualProperty\": {\n    \"trademarks\": {\n      \"companyName\": {\n        \"cost\": 350,\n        \"timeline\": \"6-12 months\",\n        \"classes\": [\"Software\", \"Business services\"]\n      },\n      \"logo\": {\n        \"cost\": 350,\n        \"timeline\": \"6-12 months\" \n      }\n    },\n    \"copyrights\": {\n      \"softwareCode\": {\n        \"cost\": 65,\n        \"timeline\": \"3-6 months\",\n        \"automatic\": true\n      },\n      \"content\": {\n        \"cost\": 65,\n        \"timeline\": \"3-6 months\"\n      }\n    },\n    \"patents\": {\n      \"applicability\": \"Consider for unique algorithms or processes\",\n      \"cost\": \"10000-25000\",\n      \"timeline\": \"18-36 months\"\n    }\n  },\n  \"compliance\": {\n    \"dataPrivacy\": [\n      {\n        \"regulation\": \"GDPR\",\n        \"applicability\": \"EU users\",\n        \"requirements\": [\"Privacy policy\", \"Cookie consent\", \"Data processing agreements\"],\n        \"penalties\": \"Up to 4% of annual revenue\"\n      },\n      {\n        \"regulation\": \"CCPA\", \n        \"applicability\": \"California users\",\n        \"requirements\": [\"Privacy disclosures\", \"Opt-out mechanisms\", \"Data deletion\"],\n        \"penalties\": \"Up to $7,500 per violation\"\n      }\n    ],\n    \"termsOfService\": {\n      \"required\": true,\n      \"cost\": \"500-2000\",\n      \"includes\": [\"Liability limitations\", \"User conduct\", \"Termination clauses\"]\n    },\n    \"privacyPolicy\": {\n      \"required\": true,\n      \"cost\": \"300-1500\",\n      \"includes\": [\"Data collection\", \"Usage disclosure\", \"Third-party sharing\"]\n    }\n  },\n  \"employment\": {\n    \"foundingTeam\": {\n      \"equityAgreements\": {\n        \"cost\": \"1000-5000\",\n        \"vestingSchedule\": \"4 years with 1-year cliff\"\n      },\n      \"confidentialityAgreements\": {\n        \"cost\": \"200-500 per agreement\"\n      }\n    },\n    \"contractors\": {\n      \"agreements\": {\n        \"cost\": \"300-800 per agreement\", \n        \"ipAssignment\": \"Required for all work product\"\n      }\n    }\n  },\n  \"timeline\": [\n    {\n      \"phase\": \"Pre-Launch (Months 1-2)\",\n      \"tasks\": [\"Incorporate business\", \"Open business accounts\", \"Basic IP protection\"],\n      \"cost\": \"3000-8000\"\n    },\n    {\n      \"phase\": \"MVP Launch (Months 3-4)\", \n      \"tasks\": [\"Terms of service\", \"Privacy policy\", \"Basic employment agreements\"],\n      \"cost\": \"2000-5000\"\n    },\n    {\n      \"phase\": \"Growth (Months 6-12)\",\n      \"tasks\": [\"Advanced IP filings\", \"Compliance audits\", \"Investment documentation\"],\n      \"cost\": \"5000-15000\"\n    }\n  ],\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a startup attorney specializing in business formation, intellectual property, and regulatory compliance.\"\n          },\n          {\n            role: \"user\",\n            content: legalPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const legalData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 7 days\n      await storage.setLegalRegulatory(analysisId, legalData, 168);\n      \n      console.log(`[${requestId}] Legal regulatory analysis completed`);\n      res.json(legalData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Legal regulatory error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate legal regulatory analysis\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Launch Roadmap Route\n  app.post(\"/api/premium/launch-roadmap\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting launch roadmap generation`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, industry, targetLaunchDate } = req.body;\n      \n      if (!analysisId || !industry) {\n        return res.status(400).json({ error: \"analysisId and industry are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getLaunchRoadmap(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached launch roadmap`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating launch roadmap for: ${industry}`);\n\n      const roadmapPrompt = `Create a comprehensive 12-month launch roadmap for a ${industry} startup ${targetLaunchDate ? `with target launch date of ${targetLaunchDate}` : ''}.\n\nProvide detailed launch roadmap in JSON format:\n{\n  \"quarters\": [\n    {\n      \"quarter\": \"Q1\",\n      \"title\": \"Foundation & Validation\",\n      \"objectives\": [\"Market validation\", \"Team formation\", \"MVP design\", \"Legal foundation\"],\n      \"keyMilestones\": [\n        {\n          \"milestone\": \"Market Research Complete\",\n          \"week\": 4,\n          \"dependencies\": [\"Customer interviews\", \"Competitor analysis\"],\n          \"success_criteria\": [\"100+ customer interviews\", \"Clear value proposition\"]\n        },\n        {\n          \"milestone\": \"Team Assembled\",\n          \"week\": 6,\n          \"dependencies\": [\"Founder agreements\", \"Early hires\"],\n          \"success_criteria\": [\"Core team hired\", \"Equity distributed\", \"Roles defined\"]\n        }\n      ],\n      \"budget\": 50000,\n      \"team_size\": 3,\n      \"focus_areas\": [\"Research\", \"Planning\", \"Foundation\"]\n    },\n    {\n      \"quarter\": \"Q2\", \n      \"title\": \"Development & Testing\",\n      \"objectives\": [\"MVP development\", \"Beta testing\", \"Initial funding\", \"Brand development\"],\n      \"keyMilestones\": [\n        {\n          \"milestone\": \"MVP Launch\",\n          \"week\": 8,\n          \"dependencies\": [\"Development completion\", \"Testing\", \"Infrastructure setup\"],\n          \"success_criteria\": [\"Core features working\", \"Beta users onboarded\", \"Feedback collected\"]\n        }\n      ],\n      \"budget\": 150000,\n      \"team_size\": 5,\n      \"focus_areas\": [\"Development\", \"Testing\", \"Fundraising\"]\n    }\n  ],\n  \"metricTargets\": [\n    {\n      \"metric\": \"Users\",\n      \"month3\": 100,\n      \"month6\": 500,\n      \"month9\": 1500,\n      \"month12\": 3000\n    },\n    {\n      \"metric\": \"Revenue\", \n      \"month3\": 0,\n      \"month6\": 2500,\n      \"month9\": 15000,\n      \"month12\": 45000\n    },\n    {\n      \"metric\": \"Team Size\",\n      \"month3\": 3,\n      \"month6\": 5,\n      \"month9\": 8,\n      \"month12\": 12\n    }\n  ],\n  \"criticalPath\": [\n    {\n      \"phase\": \"Validation\",\n      \"duration\": \"8 weeks\",\n      \"blockers\": [\"Market research\", \"Customer validation\"],\n      \"success_gates\": [\"Product-market fit signals\", \"Customer willingness to pay\"]\n    },\n    {\n      \"phase\": \"Development\",\n      \"duration\": \"12 weeks\", \n      \"blockers\": [\"Technical architecture\", \"Resource constraints\"],\n      \"success_gates\": [\"MVP completion\", \"Beta user satisfaction\"]\n    }\n  ],\n  \"riskMitigation\": [\n    {\n      \"risk\": \"Product-market fit uncertainty\",\n      \"probability\": \"medium\",\n      \"impact\": \"high\",\n      \"mitigation\": \"Continuous customer feedback loop\",\n      \"contingency\": \"Pivot product strategy based on learnings\"\n    }\n  ],\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a startup strategy consultant specializing in product launches and go-to-market execution.\"\n          },\n          {\n            role: \"user\",\n            content: roadmapPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const roadmapData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 7 days\n      await storage.setLaunchRoadmap(analysisId, roadmapData, 168);\n      \n      console.log(`[${requestId}] Launch roadmap generation completed`);\n      res.json(roadmapData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Launch roadmap error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate launch roadmap\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Competitor Matrix Route\n  app.post(\"/api/premium/competitors\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting competitor analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, industry, targetKeyword } = req.body;\n      \n      if (!analysisId || !industry) {\n        return res.status(400).json({ error: \"analysisId and industry are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getCompetitorMatrix(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached competitor matrix`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating competitor matrix for: ${industry}`);\n\n      // Generate comprehensive competitor analysis using AI\n      const competitorPrompt = `Analyze the competitive landscape for the ${industry} industry, focusing on solutions related to \"${targetKeyword || industry}\".\n\nProvide detailed competitor analysis in JSON format:\n{\n  \"competitors\": [\n    {\n      \"name\": \"Competitor Name\",\n      \"website\": \"https://competitor.com\",\n      \"description\": \"What they do\",\n      \"pricing\": [\n        {\n          \"tier\": \"Starter\",\n          \"price\": 29,\n          \"billingCycle\": \"monthly\",\n          \"features\": [\"Feature 1\", \"Feature 2\"],\n          \"limitations\": [\"Limitation 1\"]\n        }\n      ],\n      \"sentimentScore\": 0.7,\n      \"marketShare\": 15,\n      \"strengths\": [\"Strength 1\", \"Strength 2\"],\n      \"weaknesses\": [\"Weakness 1\", \"Weakness 2\"],\n      \"differentiators\": [\"Unique feature 1\", \"Unique feature 2\"],\n      \"targetAudience\": \"Small businesses\",\n      \"distribution\": [\"Direct sales\", \"Partner channel\"],\n      \"fundingStage\": \"Series B\",\n      \"employeeCount\": \"50-100\",\n      \"yearFounded\": 2018,\n      \"sources\": [\n        {\n          \"id\": \"comp_001\",\n          \"type\": \"web\",\n          \"title\": \"Company Profile\",\n          \"confidence\": 0.9,\n          \"retrievedAt\": \"${new Date().toISOString()}\"\n        }\n      ]\n    }\n  ],\n  \"positioningMap\": [\n    {\n      \"competitor\": \"Competitor Name\",\n      \"xAxis\": 65,\n      \"yAxis\": 80\n    }\n  ],\n  \"marketGaps\": [\"Gap 1\", \"Gap 2\"],\n  \"competitiveAdvantages\": [\"Advantage 1\", \"Advantage 2\"],\n  \"threatsAndOpportunities\": [\"Threat: X\", \"Opportunity: Y\"],\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}\n\nInclude 8-12 real competitors with detailed pricing, sentiment analysis, and market positioning data.`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a competitive intelligence expert. Provide comprehensive competitor analysis with detailed pricing, market positioning, and strategic insights in valid JSON format.\"\n          },\n          {\n            role: \"user\",\n            content: competitorPrompt\n          }\n        ],\n        max_completion_tokens: 4000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const competitorData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 24 hours\n      await storage.setCompetitorMatrix(analysisId, competitorData, 24);\n      \n      console.log(`[${requestId}] Competitor analysis completed`);\n      res.json(competitorData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Competitor analysis error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate competitor analysis\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // GTM Planning Route\n  app.post(\"/api/premium/gtm-plan\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting GTM plan generation`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, productDescription, targetAudience, budget } = req.body;\n      \n      if (!analysisId || !productDescription) {\n        return res.status(400).json({ error: \"analysisId and productDescription are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getGtmPlan(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached GTM plan`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating GTM plan for: ${productDescription}`);\n\n      // Generate 90-day go-to-market plan using AI\n      const gtmPrompt = `Create a comprehensive 90-day go-to-market plan for the product: \"${productDescription}\" targeting \"${targetAudience || 'General market'}\" with budget considerations around $${budget || '50000'}.\n\nProvide detailed GTM plan in JSON format:\n{\n  \"phases\": [\n    {\n      \"phase\": \"Phase 1: Foundation (Days 1-30)\",\n      \"weeks\": \"Weeks 1-4\",\n      \"objectives\": [\"Objective 1\", \"Objective 2\"],\n      \"tactics\": [\n        {\n          \"name\": \"Website Launch\",\n          \"description\": \"Launch marketing website with clear value proposition\",\n          \"effort\": \"high\",\n          \"cost\": \"medium\",\n          \"impact\": \"high\",\n          \"timeline\": \"Week 1-2\",\n          \"dependencies\": [\"Design completion\", \"Content creation\"]\n        }\n      ],\n      \"kpis\": [\n        {\n          \"metric\": \"Website Traffic\",\n          \"target\": 1000,\n          \"unit\": \"visitors\",\n          \"measurement\": \"Google Analytics\"\n        }\n      ],\n      \"budget\": 15000,\n      \"owners\": [\"Marketing Team\", \"Product Team\"]\n    }\n  ],\n  \"totalBudget\": ${budget || 50000},\n  \"expectedOutcomes\": [\"Outcome 1\", \"Outcome 2\"],\n  \"successMetrics\": [\n    {\n      \"metric\": \"Customer Acquisition\",\n      \"target\": 100,\n      \"unit\": \"customers\",\n      \"measurement\": \"CRM tracking\"\n    }\n  ],\n  \"risks\": [\n    {\n      \"risk\": \"Low market response\",\n      \"probability\": \"medium\",\n      \"impact\": \"high\",\n      \"mitigation\": \"Increase content marketing efforts\",\n      \"contingency\": \"Pivot messaging strategy\"\n    }\n  ],\n  \"killCriteria\": [\n    {\n      \"metric\": \"Monthly Signups\",\n      \"threshold\": 10,\n      \"timeWindow\": \"Month 2\",\n      \"rationale\": \"Below this indicates no product-market fit\"\n    }\n  ],\n  \"assumptions\": [\"Assumption 1\", \"Assumption 2\"],\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}\n\nCreate a detailed 3-phase plan with specific tactics, timelines, budgets, and success metrics.`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a go-to-market strategy expert. Provide comprehensive, actionable GTM plans with specific tactics, timelines, budgets, and measurable outcomes in valid JSON format.\"\n          },\n          {\n            role: \"user\",\n            content: gtmPrompt\n          }\n        ],\n        max_completion_tokens: 4000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const gtmData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 24 hours\n      await storage.setGtmPlan(analysisId, gtmData, 24);\n      \n      console.log(`[${requestId}] GTM plan generation completed`);\n      res.json(gtmData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] GTM plan error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate GTM plan\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Market Sizing Route\n  app.post(\"/api/premium/market-sizing\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting market sizing analysis`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const { analysisId, industry, productCategory, geography = \"Global\" } = req.body;\n      \n      if (!analysisId || !industry) {\n        return res.status(400).json({ error: \"analysisId and industry are required\" });\n      }\n\n      // Check cache first\n      const cached = await storage.getMarketSizing(analysisId);\n      if (cached) {\n        console.log(`[${requestId}] Returning cached market sizing`);\n        return res.json(cached);\n      }\n\n      console.log(`[${requestId}] Generating market sizing for: ${industry} in ${geography}`);\n\n      // Generate comprehensive market sizing analysis using AI\n      const marketPrompt = `Analyze the market size for the ${industry} industry, specifically for ${productCategory || 'general solutions'} in ${geography}.\n\nProvide detailed market sizing analysis in JSON format:\n{\n  \"tam\": {\n    \"value\": 45000000000,\n    \"unit\": \"USD\",\n    \"method\": {\n      \"method\": \"top-down\",\n      \"description\": \"Based on industry reports and market research\",\n      \"dataPoints\": [\"Industry report 1\", \"Market research 2\"],\n      \"assumptions\": [\"Assumption 1\", \"Assumption 2\"],\n      \"confidence\": 0.8\n    },\n    \"segments\": [\n      {\n        \"segment\": \"Enterprise\",\n        \"size\": 25000000000,\n        \"unit\": \"USD\",\n        \"growthRate\": 0.12,\n        \"accessibility\": 0.3\n      }\n    ]\n  },\n  \"sam\": {\n    \"value\": 8000000000,\n    \"unit\": \"USD\",\n    \"method\": {\n      \"method\": \"bottom-up\",\n      \"description\": \"Serviceable addressable market based on target segments\",\n      \"dataPoints\": [\"Target customer analysis\"],\n      \"assumptions\": [\"Geographic focus\", \"Customer segment filtering\"],\n      \"confidence\": 0.85\n    },\n    \"reasoningFactors\": [\"Factor 1\", \"Factor 2\"]\n  },\n  \"som\": {\n    \"value\": 800000000,\n    \"unit\": \"USD\",\n    \"method\": {\n      \"method\": \"comparative\",\n      \"description\": \"Serviceable obtainable market based on competitive analysis\",\n      \"dataPoints\": [\"Competitor market share data\"],\n      \"assumptions\": [\"5-year timeline\", \"10% market capture\"],\n      \"confidence\": 0.75\n    },\n    \"marketPenetration\": 0.1,\n    \"timeToCapture\": 5\n  },\n  \"bottomUpAnalysis\": {\n    \"unitEconomics\": {\n      \"units\": 100000,\n      \"pricePerUnit\": 1200,\n      \"adoptionRate\": 0.15\n    },\n    \"scaling\": [\n      {\n        \"year\": 1,\n        \"units\": 15000,\n        \"revenue\": 18000000\n      },\n      {\n        \"year\": 3,\n        \"units\": 75000,\n        \"revenue\": 90000000\n      },\n      {\n        \"year\": 5,\n        \"units\": 150000,\n        \"revenue\": 180000000\n      }\n    ]\n  },\n  \"references\": [\n    {\n      \"id\": \"market_001\",\n      \"type\": \"web\",\n      \"title\": \"Industry Market Report 2024\",\n      \"confidence\": 0.9,\n      \"retrievedAt\": \"${new Date().toISOString()}\"\n    }\n  ],\n  \"generatedAt\": \"${new Date().toISOString()}\"\n}\n\nInclude realistic market sizing with multiple methodologies and clear assumptions.`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a market research expert specializing in market sizing analysis. Provide comprehensive TAM/SAM/SOM analysis with multiple methodologies and realistic projections in valid JSON format.\"\n          },\n          {\n            role: \"user\",\n            content: marketPrompt\n          }\n        ],\n        max_completion_tokens: 3000,\n        response_format: { type: \"json_object\" },\n      });\n\n      const marketData = JSON.parse(completion.choices[0].message.content || '{}');\n      \n      // Cache the results for 24 hours\n      await storage.setMarketSizing(analysisId, marketData, 24);\n      \n      console.log(`[${requestId}] Market sizing analysis completed`);\n      res.json(marketData);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Market sizing error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate market sizing analysis\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Export Route\n  app.post(\"/api/premium/export\", checkPremiumAccess, async (req, res) => {\n    const requestId = Date.now();\n    console.log(`[${requestId}] Starting export generation`);\n    \n    try {\n      if (!(req as any).isPremium) {\n        return res.status(403).json({ error: \"Premium access required\" });\n      }\n\n      const validatedRequest = exportRequestSchema.parse(req.body);\n      const { type, sections, analysisId, includeCharts, includeRawData } = validatedRequest;\n      \n      console.log(`[${requestId}] Generating ${type} export for sections:`, sections);\n\n      // Generate export data\n      const exportData: any = {};\n      \n      if (sections.includes('keywords')) {\n        exportData.keywords = await storage.getKeywordIntelligence(analysisId);\n      }\n      // Note: Financial model section removed - replaced with Reddit analysis\n      if (sections.includes('competitors')) {\n        exportData.competitors = await storage.getCompetitorMatrix(analysisId);\n      }\n      if (sections.includes('gtm')) {\n        exportData.gtm = await storage.getGtmPlan(analysisId);\n      }\n      if (sections.includes('market')) {\n        exportData.market = await storage.getMarketSizing(analysisId);\n      }\n\n      // Create export result\n      const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const filename = `premium_analysis_${analysisId}_${type}.${type}`;\n      \n      const exportResult: ExportResult = {\n        id: exportId,\n        status: \"completed\",\n        downloadUrl: `/api/premium/export/${exportId}/download`,\n        filename,\n        fileSize: JSON.stringify(exportData).length,\n        createdAt: new Date().toISOString(),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 hours\n      };\n\n      // Store export data temporarily\n      await storage.setExportResult(exportId, exportResult);\n      \n      console.log(`[${requestId}] Export generation completed: ${exportId}`);\n      res.json(exportResult);\n      \n    } catch (error) {\n      console.error(`[${requestId}] Export error:`, error);\n      res.status(500).json({ \n        error: \"Failed to generate export\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Cache Stats Route (for monitoring)\n  app.get(\"/api/premium/cache-stats\", checkPremiumAccess, async (req, res) => {\n    try {\n      const stats = await storage.getCacheStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get cache stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":92949},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type KeywordIntelligence,\n  type RedditAnalysis,\n  type CustomerIntelligence,\n  type FinancialProjections,\n  type TechnologyOperations,\n  type LegalRegulatory,\n  type LaunchRoadmap,\n  type CompetitorMatrix,\n  type GtmPlan,\n  type MarketSizing,\n  type ExportResult,\n  type PremiumAnalysis,\n  type SourceRef,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Cached data with TTL\ninterface CachedData<T> {\n  data: T;\n  expiresAt: number; // Timestamp\n  createdAt: number;\n}\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Premium Analytics - Keyword Intelligence\n  getKeywordIntelligence(analysisId: string): Promise<KeywordIntelligence | undefined>;\n  setKeywordIntelligence(analysisId: string, data: KeywordIntelligence, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Reddit Analysis\n  getRedditAnalysis(analysisId: string): Promise<RedditAnalysis | undefined>;\n  setRedditAnalysis(analysisId: string, data: RedditAnalysis, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Customer Intelligence\n  getCustomerIntelligence(analysisId: string): Promise<CustomerIntelligence | undefined>;\n  setCustomerIntelligence(analysisId: string, data: CustomerIntelligence, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Financial Projections\n  getFinancialProjections(analysisId: string): Promise<FinancialProjections | undefined>;\n  setFinancialProjections(analysisId: string, data: FinancialProjections, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Technology Operations\n  getTechnologyOperations(analysisId: string): Promise<TechnologyOperations | undefined>;\n  setTechnologyOperations(analysisId: string, data: TechnologyOperations, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Legal Regulatory\n  getLegalRegulatory(analysisId: string): Promise<LegalRegulatory | undefined>;\n  setLegalRegulatory(analysisId: string, data: LegalRegulatory, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Launch Roadmap\n  getLaunchRoadmap(analysisId: string): Promise<LaunchRoadmap | undefined>;\n  setLaunchRoadmap(analysisId: string, data: LaunchRoadmap, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Competitor Matrix\n  getCompetitorMatrix(analysisId: string): Promise<CompetitorMatrix | undefined>;\n  setCompetitorMatrix(analysisId: string, data: CompetitorMatrix, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - GTM Planning\n  getGtmPlan(analysisId: string): Promise<GtmPlan | undefined>;\n  setGtmPlan(analysisId: string, data: GtmPlan, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Market Sizing\n  getMarketSizing(analysisId: string): Promise<MarketSizing | undefined>;\n  setMarketSizing(analysisId: string, data: MarketSizing, ttlHours?: number): Promise<void>;\n\n  // Premium Analytics - Complete Analysis\n  getPremiumAnalysis(analysisId: string): Promise<PremiumAnalysis | undefined>;\n  setPremiumAnalysis(analysisId: string, data: PremiumAnalysis, ttlHours?: number): Promise<void>;\n\n  // Source Management\n  getSources(analysisId: string): Promise<SourceRef[]>;\n  addSources(analysisId: string, sources: SourceRef[]): Promise<void>;\n\n  // Export Management\n  getExportResult(exportId: string): Promise<ExportResult | undefined>;\n  setExportResult(exportId: string, result: ExportResult): Promise<void>;\n  cleanupExpiredExports(): Promise<void>;\n\n  // Cache Management\n  clearExpiredCache(): Promise<void>;\n  getCacheStats(): Promise<{ totalItems: number; expiredItems: number; memoryUsage: string }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private keywordIntelligence: Map<string, CachedData<KeywordIntelligence>>;\n  private redditAnalyses: Map<string, CachedData<RedditAnalysis>>;\n  private customerIntelligence: Map<string, CachedData<CustomerIntelligence>>;\n  private financialProjections: Map<string, CachedData<FinancialProjections>>;\n  private technologyOperations: Map<string, CachedData<TechnologyOperations>>;\n  private legalRegulatory: Map<string, CachedData<LegalRegulatory>>;\n  private launchRoadmaps: Map<string, CachedData<LaunchRoadmap>>;\n  private competitorMatrices: Map<string, CachedData<CompetitorMatrix>>;\n  private gtmPlans: Map<string, CachedData<GtmPlan>>;\n  private marketSizing: Map<string, CachedData<MarketSizing>>;\n  private premiumAnalyses: Map<string, CachedData<PremiumAnalysis>>;\n  private sources: Map<string, SourceRef[]>; // By analysisId\n  private exports: Map<string, ExportResult>;\n\n  constructor() {\n    this.users = new Map();\n    this.keywordIntelligence = new Map();\n    this.redditAnalyses = new Map();\n    this.customerIntelligence = new Map();\n    this.financialProjections = new Map();\n    this.technologyOperations = new Map();\n    this.legalRegulatory = new Map();\n    this.launchRoadmaps = new Map();\n    this.competitorMatrices = new Map();\n    this.gtmPlans = new Map();\n    this.marketSizing = new Map();\n    this.premiumAnalyses = new Map();\n    this.sources = new Map();\n    this.exports = new Map();\n\n    // Auto-cleanup expired cache every hour\n    setInterval(() => {\n      this.clearExpiredCache();\n      this.cleanupExpiredExports();\n    }, 60 * 60 * 1000);\n  }\n\n  // Helper method to check if cached data is expired\n  private isExpired<T>(cached: CachedData<T>): boolean {\n    return Date.now() > cached.expiresAt;\n  }\n\n  // Helper method to create cached data with TTL\n  private createCachedData<T>(data: T, ttlHours: number = 24): CachedData<T> {\n    const now = Date.now();\n    return {\n      data,\n      createdAt: now,\n      expiresAt: now + (ttlHours * 60 * 60 * 1000),\n    };\n  }\n\n  // User management\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Premium Analytics - Keyword Intelligence\n  async getKeywordIntelligence(analysisId: string): Promise<KeywordIntelligence | undefined> {\n    const cached = this.keywordIntelligence.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.keywordIntelligence.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setKeywordIntelligence(analysisId: string, data: KeywordIntelligence, ttlHours: number = 24): Promise<void> {\n    this.keywordIntelligence.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Reddit Analysis\n  async getRedditAnalysis(analysisId: string): Promise<RedditAnalysis | undefined> {\n    const cached = this.redditAnalyses.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.redditAnalyses.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setRedditAnalysis(analysisId: string, data: RedditAnalysis, ttlHours: number = 24): Promise<void> {\n    this.redditAnalyses.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Customer Intelligence\n  async getCustomerIntelligence(analysisId: string): Promise<CustomerIntelligence | undefined> {\n    const cached = this.customerIntelligence.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.customerIntelligence.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setCustomerIntelligence(analysisId: string, data: CustomerIntelligence, ttlHours: number = 24): Promise<void> {\n    this.customerIntelligence.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Financial Projections\n  async getFinancialProjections(analysisId: string): Promise<FinancialProjections | undefined> {\n    const cached = this.financialProjections.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.financialProjections.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setFinancialProjections(analysisId: string, data: FinancialProjections, ttlHours: number = 24): Promise<void> {\n    this.financialProjections.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Technology Operations\n  async getTechnologyOperations(analysisId: string): Promise<TechnologyOperations | undefined> {\n    const cached = this.technologyOperations.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.technologyOperations.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setTechnologyOperations(analysisId: string, data: TechnologyOperations, ttlHours: number = 24): Promise<void> {\n    this.technologyOperations.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Legal Regulatory\n  async getLegalRegulatory(analysisId: string): Promise<LegalRegulatory | undefined> {\n    const cached = this.legalRegulatory.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.legalRegulatory.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setLegalRegulatory(analysisId: string, data: LegalRegulatory, ttlHours: number = 24): Promise<void> {\n    this.legalRegulatory.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Launch Roadmap\n  async getLaunchRoadmap(analysisId: string): Promise<LaunchRoadmap | undefined> {\n    const cached = this.launchRoadmaps.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.launchRoadmaps.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setLaunchRoadmap(analysisId: string, data: LaunchRoadmap, ttlHours: number = 24): Promise<void> {\n    this.launchRoadmaps.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Competitor Matrix\n  async getCompetitorMatrix(analysisId: string): Promise<CompetitorMatrix | undefined> {\n    const cached = this.competitorMatrices.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.competitorMatrices.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setCompetitorMatrix(analysisId: string, data: CompetitorMatrix, ttlHours: number = 24): Promise<void> {\n    this.competitorMatrices.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - GTM Planning\n  async getGtmPlan(analysisId: string): Promise<GtmPlan | undefined> {\n    const cached = this.gtmPlans.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.gtmPlans.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setGtmPlan(analysisId: string, data: GtmPlan, ttlHours: number = 24): Promise<void> {\n    this.gtmPlans.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Market Sizing\n  async getMarketSizing(analysisId: string): Promise<MarketSizing | undefined> {\n    const cached = this.marketSizing.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.marketSizing.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setMarketSizing(analysisId: string, data: MarketSizing, ttlHours: number = 24): Promise<void> {\n    this.marketSizing.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Premium Analytics - Complete Analysis\n  async getPremiumAnalysis(analysisId: string): Promise<PremiumAnalysis | undefined> {\n    const cached = this.premiumAnalyses.get(analysisId);\n    if (!cached || this.isExpired(cached)) {\n      this.premiumAnalyses.delete(analysisId);\n      return undefined;\n    }\n    return cached.data;\n  }\n\n  async setPremiumAnalysis(analysisId: string, data: PremiumAnalysis, ttlHours: number = 48): Promise<void> {\n    this.premiumAnalyses.set(analysisId, this.createCachedData(data, ttlHours));\n  }\n\n  // Source Management\n  async getSources(analysisId: string): Promise<SourceRef[]> {\n    return this.sources.get(analysisId) || [];\n  }\n\n  async addSources(analysisId: string, sources: SourceRef[]): Promise<void> {\n    const existing = this.sources.get(analysisId) || [];\n    this.sources.set(analysisId, [...existing, ...sources]);\n  }\n\n  // Export Management\n  async getExportResult(exportId: string): Promise<ExportResult | undefined> {\n    return this.exports.get(exportId);\n  }\n\n  async setExportResult(exportId: string, result: ExportResult): Promise<void> {\n    this.exports.set(exportId, result);\n  }\n\n  async cleanupExpiredExports(): Promise<void> {\n    const now = Date.now();\n    const expiredExports: string[] = [];\n    this.exports.forEach((result, exportId) => {\n      const expiresAt = new Date(result.expiresAt).getTime();\n      if (now > expiresAt) {\n        expiredExports.push(exportId);\n      }\n    });\n    expiredExports.forEach(exportId => this.exports.delete(exportId));\n  }\n\n  // Cache Management\n  async clearExpiredCache(): Promise<void> {\n    // Helper function to clear expired items from a cache\n    const clearExpired = (cache: Map<string, CachedData<any>>) => {\n      const expiredKeys: string[] = [];\n      cache.forEach((cached, key) => {\n        if (this.isExpired(cached)) {\n          expiredKeys.push(key);\n        }\n      });\n      expiredKeys.forEach(key => cache.delete(key));\n    };\n\n    // Clear expired items from all caches\n    clearExpired(this.keywordIntelligence as Map<string, CachedData<any>>);\n    clearExpired(this.redditAnalyses as Map<string, CachedData<any>>);\n    clearExpired(this.customerIntelligence as Map<string, CachedData<any>>);\n    clearExpired(this.financialProjections as Map<string, CachedData<any>>);\n    clearExpired(this.technologyOperations as Map<string, CachedData<any>>);\n    clearExpired(this.legalRegulatory as Map<string, CachedData<any>>);\n    clearExpired(this.launchRoadmaps as Map<string, CachedData<any>>);\n    clearExpired(this.competitorMatrices as Map<string, CachedData<any>>);\n    clearExpired(this.gtmPlans as Map<string, CachedData<any>>);\n    clearExpired(this.marketSizing as Map<string, CachedData<any>>);\n    clearExpired(this.premiumAnalyses as Map<string, CachedData<any>>);\n  }\n\n  async getCacheStats(): Promise<{ totalItems: number; expiredItems: number; memoryUsage: string }> {\n    let totalItems = 0;\n    let expiredItems = 0;\n\n    // Count all cache maps\n    const allCaches = [\n      this.keywordIntelligence,\n      this.redditAnalyses,\n      this.customerIntelligence,\n      this.financialProjections,\n      this.technologyOperations,\n      this.legalRegulatory,\n      this.launchRoadmaps,\n      this.competitorMatrices,\n      this.gtmPlans,\n      this.marketSizing,\n      this.premiumAnalyses,\n    ];\n\n    allCaches.forEach(cache => {\n      totalItems += cache.size;\n      (cache as Map<string, CachedData<any>>).forEach(cached => {\n        if (this.isExpired(cached)) {\n          expiredItems++;\n        }\n      });\n    });\n\n    // Add sources and exports\n    totalItems += this.sources.size + this.exports.size;\n\n    // Rough memory usage estimation\n    const memoryUsage = `${Math.round(totalItems * 10)} KB (estimated)`;\n\n    return { totalItems, expiredItems, memoryUsage };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15642},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Startup Idea Analysis Schemas\nexport const analyzeIdeaSchema = z.object({\n  idea: z.string().min(10, \"Please provide a more detailed description of your idea\"),\n  industry: z.string().optional(),\n  targetAudience: z.string().optional(),\n  country: z.string().default(\"global\"),\n  platform: z.enum([\"web-app\", \"mobile-app\", \"both\"]).default(\"web-app\"),\n  fundingMethod: z.enum([\"self-funded\", \"bootstrapping\", \"raising-capital\"]).default(\"self-funded\"),\n  timeRange: z.enum([\"week\", \"month\", \"quarter\", \"year\"]).default(\"month\"),\n});\n\nexport const sentimentDataSchema = z.object({\n  name: z.string(),\n  value: z.number(),\n  color: z.string(),\n  description: z.string(),\n});\n\nexport const painPointSchema = z.object({\n  title: z.string(),\n  frequency: z.number(),\n  urgency: z.enum([\"low\", \"medium\", \"high\"]),\n  examples: z.array(z.string()),\n});\n\nexport const appIdeaSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  market_validation: z.string(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n});\n\nexport const googleTrendSchema = z.object({\n  keyword: z.string(),\n  trend_direction: z.enum([\"rising\", \"stable\", \"declining\"]),\n  interest_level: z.number().min(0).max(100),\n  related_queries: z.array(z.string()),\n});\n\nexport const icpSchema = z.object({\n  demographics: z.object({\n    age_range: z.string(),\n    gender: z.string(),\n    income_level: z.string(),\n    education: z.string(),\n  }),\n  psychographics: z.object({\n    interests: z.array(z.string()),\n    values: z.array(z.string()),\n    lifestyle: z.string(),\n  }),\n  behavioral: z.object({\n    pain_points: z.array(z.string()),\n    preferred_channels: z.array(z.string()),\n    buying_behavior: z.string(),\n  }),\n});\n\nexport const problemStatementSchema = z.object({\n  problem: z.string(),\n  impact: z.string(),\n  evidence: z.array(z.string()),\n  market_size: z.string(),\n});\n\nexport const financialRiskSchema = z.object({\n  risk_type: z.string(),\n  severity: z.enum([\"low\", \"medium\", \"high\"]),\n  description: z.string(),\n  mitigation_strategy: z.string(),\n});\n\nexport const competitorSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  strengths: z.array(z.string()),\n  weaknesses: z.array(z.string()),\n  market_share: z.string(),\n  pricing_model: z.string(),\n});\n\nexport const revenueModelSchema = z.object({\n  model_type: z.string(),\n  description: z.string(),\n  pros: z.array(z.string()),\n  cons: z.array(z.string()),\n  implementation_difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  potential_revenue: z.string(),\n});\n\nexport const analysisResponseSchema = z.object({\n  keywords: z.array(z.string()),\n  subreddits: z.array(z.string()),\n  sentiment_data: z.array(sentimentDataSchema),\n  pain_points: z.array(painPointSchema),\n  app_ideas: z.array(appIdeaSchema),\n  google_trends: z.array(googleTrendSchema),\n  icp: icpSchema,\n  problem_statements: z.array(problemStatementSchema),\n  financial_risks: z.array(financialRiskSchema),\n  competitors: z.array(competitorSchema),\n  revenue_models: z.array(revenueModelSchema),\n  market_interest_level: z.enum([\"low\", \"medium\", \"high\"]),\n  total_posts_analyzed: z.number(),\n  overall_score: z.number().min(1).max(10),\n  viability_score: z.number().min(1).max(10),\n});\n\nexport type AnalyzeIdeaRequest = z.infer<typeof analyzeIdeaSchema>;\nexport type SentimentData = z.infer<typeof sentimentDataSchema>;\nexport type PainPoint = z.infer<typeof painPointSchema>;\nexport type AppIdea = z.infer<typeof appIdeaSchema>;\nexport type GoogleTrend = z.infer<typeof googleTrendSchema>;\nexport type ICP = z.infer<typeof icpSchema>;\nexport type ProblemStatement = z.infer<typeof problemStatementSchema>;\nexport type FinancialRisk = z.infer<typeof financialRiskSchema>;\nexport type Competitor = z.infer<typeof competitorSchema>;\nexport type RevenueModel = z.infer<typeof revenueModelSchema>;\nexport type AnalysisResponse = z.infer<typeof analysisResponseSchema>;\n\n// Premium Business Intelligence Schemas\n\n// Source reference for data provenance\nexport const sourceRefSchema = z.object({\n  id: z.string(),\n  type: z.enum([\"reddit\", \"web\", \"api\", \"internal\"]),\n  url: z.string().optional(),\n  title: z.string(),\n  excerpt: z.string().optional(),\n  confidence: z.number().min(0).max(1),\n  retrievedAt: z.string(),\n});\n\n// Keyword Intelligence with exact volumes, CPC, difficulty\nexport const keywordTrendPointSchema = z.object({\n  month: z.string(), // YYYY-MM format\n  volume: z.number(),\n  competitionScore: z.number().min(0).max(100),\n});\n\nexport const keywordIntelligenceItemSchema = z.object({\n  keyword: z.string(),\n  searchVolume: z.number(),\n  cpc: z.number(), // Cost per click in USD\n  difficulty: z.number().min(0).max(100),\n  intent: z.enum([\"informational\", \"commercial\", \"transactional\", \"navigational\"]),\n  trend24Months: z.array(keywordTrendPointSchema),\n  relatedKeywords: z.array(z.string()),\n  sources: z.array(sourceRefSchema),\n});\n\nexport const keywordIntelligenceSchema = z.object({\n  primaryKeywords: z.array(keywordIntelligenceItemSchema),\n  longTailKeywords: z.array(keywordIntelligenceItemSchema),\n  competitorKeywords: z.array(keywordIntelligenceItemSchema),\n  totalSearchVolume: z.number(),\n  avgCpc: z.number(),\n  avgDifficulty: z.number(),\n  generatedAt: z.string(),\n  locale: z.string().default(\"US\"),\n});\n\n// Reddit Analysis - Comprehensive subreddit insights\nexport const subredditInsightSchema = z.object({\n  subreddit: z.string(),\n  members: z.number(),\n  dailyPosts: z.number(),\n  engagementRate: z.number(),\n  topTopics: z.array(z.string()),\n  sentiment: z.number().min(-1).max(1),\n  keyInfluencers: z.array(z.string()),\n  trending: z.boolean(),\n});\n\nexport const redditDiscussionSchema = z.object({\n  title: z.string(),\n  subreddit: z.string(),\n  upvotes: z.number(),\n  comments: z.number(),\n  url: z.string(),\n  summary: z.string(),\n  painPoints: z.array(z.string()),\n  solutions: z.array(z.string()),\n});\n\nexport const redditAnalysisSchema = z.object({\n  subredditInsights: z.array(subredditInsightSchema),\n  trendingDiscussions: z.array(redditDiscussionSchema),\n  overallSentiment: z.object({\n    positive: z.number(),\n    negative: z.number(), \n    neutral: z.number(),\n  }),\n  keyPainPoints: z.array(z.object({\n    painPoint: z.string(),\n    frequency: z.number(),\n    subreddits: z.array(z.string()),\n    impact: z.enum([\"low\", \"medium\", \"high\"]),\n  })),\n  marketSignals: z.array(z.string()),\n  generatedAt: z.string(),\n});\n\n// Customer Intelligence - Real user personas and behavior\nexport const customerPersonaSchema = z.object({\n  name: z.string(),\n  demographics: z.object({\n    ageRange: z.string(),\n    location: z.string(),\n    income: z.string(),\n    occupation: z.string(),\n  }),\n  behaviors: z.object({\n    onlineActivity: z.array(z.string()),\n    purchaseDrivers: z.array(z.string()),\n    preferredChannels: z.array(z.string()),\n    spendingPatterns: z.string(),\n  }),\n  painPoints: z.array(z.string()),\n  goals: z.array(z.string()),\n  redditActivity: z.object({\n    activeSubreddits: z.array(z.string()),\n    engagementLevel: z.enum([\"low\", \"medium\", \"high\"]),\n    topConcerns: z.array(z.string()),\n  }),\n});\n\nexport const customerIntelligenceSchema = z.object({\n  primaryPersonas: z.array(customerPersonaSchema),\n  marketSegmentation: z.object({\n    segments: z.array(z.object({\n      name: z.string(),\n      size: z.number(),\n      characteristics: z.array(z.string()),\n      revenue_potential: z.string(),\n    })),\n  }),\n  customerJourney: z.array(z.object({\n    stage: z.string(),\n    touchpoints: z.array(z.string()),\n    painPoints: z.array(z.string()),\n    opportunities: z.array(z.string()),\n  })),\n  behaviorInsights: z.array(z.object({\n    insight: z.string(),\n    evidence: z.array(z.string()),\n    implication: z.string(),\n  })),\n  generatedAt: z.string(),\n});\n\n// Financial Projections - Realistic revenue forecasts\nexport const revenueStreamSchema = z.object({\n  name: z.string(),\n  model: z.enum([\"subscription\", \"one-time\", \"usage-based\", \"freemium\", \"advertising\"]),\n  monthlyProjection: z.array(z.object({\n    month: z.number(),\n    revenue: z.number(),\n    users: z.number(),\n  })),\n});\n\nexport const costStructureSchema = z.object({\n  category: z.string(),\n  monthlyProjection: z.array(z.object({\n    month: z.number(),\n    cost: z.number(),\n  })),\n  scalingFactor: z.string(),\n});\n\nexport const financialProjectionsSchema = z.object({\n  revenueStreams: z.array(revenueStreamSchema),\n  costStructure: z.array(costStructureSchema),\n  profitabilityAnalysis: z.object({\n    breakEvenMonth: z.number(),\n    grossMarginTarget: z.number(),\n    burnRate: z.array(z.object({\n      month: z.number(),\n      burnRate: z.number(),\n    })),\n  }),\n  fundingRequirements: z.object({\n    totalNeeded: z.number(),\n    runway: z.number(),\n    milestones: z.array(z.object({\n      milestone: z.string(),\n      month: z.number(),\n      funding: z.number(),\n    })),\n  }),\n  generatedAt: z.string(),\n});\n\n// Technology & Operations - Tech stack and development roadmap\nexport const technologyStackSchema = z.object({\n  category: z.string(),\n  technologies: z.array(z.object({\n    name: z.string(),\n    purpose: z.string(),\n    pros: z.array(z.string()),\n    cons: z.array(z.string()),\n    complexity: z.enum([\"low\", \"medium\", \"high\"]),\n    cost: z.enum([\"free\", \"low\", \"medium\", \"high\"]),\n  })),\n});\n\nexport const developmentPhaseSchema = z.object({\n  phase: z.string(),\n  duration: z.string(),\n  deliverables: z.array(z.string()),\n  resources: z.array(z.string()),\n  risks: z.array(z.string()),\n  estimatedCost: z.number(),\n});\n\nexport const operationalRequirementSchema = z.object({\n  area: z.string(),\n  requirements: z.array(z.object({\n    requirement: z.string(),\n    priority: z.enum([\"low\", \"medium\", \"high\", \"critical\"]),\n    timeline: z.string(),\n    cost: z.number().optional(),\n  })),\n});\n\nexport const technologyOperationsSchema = z.object({\n  recommendedStack: z.array(technologyStackSchema),\n  developmentRoadmap: z.array(developmentPhaseSchema),\n  operationalRequirements: z.array(operationalRequirementSchema),\n  teamStructure: z.object({\n    coreTeam: z.array(z.object({\n      role: z.string(),\n      skills: z.array(z.string()),\n      hiringPriority: z.enum([\"immediate\", \"within-3-months\", \"within-6-months\"]),\n      salaryRange: z.string(),\n    })),\n    advisors: z.array(z.string()),\n  }),\n  generatedAt: z.string(),\n});\n\n// Legal & Regulatory - Compliance and legal structure\nexport const legalRequirementSchema = z.object({\n  area: z.string(),\n  requirements: z.array(z.object({\n    requirement: z.string(),\n    jurisdiction: z.string(),\n    priority: z.enum([\"low\", \"medium\", \"high\", \"critical\"]),\n    timeline: z.string(),\n    estimatedCost: z.string(),\n  })),\n});\n\nexport const complianceFrameworkSchema = z.object({\n  framework: z.string(),\n  applicability: z.string(),\n  requirements: z.array(z.string()),\n  implementationSteps: z.array(z.string()),\n  cost: z.string(),\n});\n\nexport const legalRegulatorySchema = z.object({\n  businessStructure: z.object({\n    recommendedType: z.string(),\n    rationale: z.string(),\n    steps: z.array(z.string()),\n    cost: z.string(),\n  }),\n  intellectualProperty: z.object({\n    protections: z.array(z.object({\n      type: z.string(),\n      description: z.string(),\n      cost: z.string(),\n      timeline: z.string(),\n    })),\n    risks: z.array(z.string()),\n  }),\n  regulatoryRequirements: z.array(legalRequirementSchema),\n  complianceFrameworks: z.array(complianceFrameworkSchema),\n  contractsAndAgreements: z.array(z.object({\n    type: z.string(),\n    priority: z.enum([\"immediate\", \"short-term\", \"medium-term\"]),\n    description: z.string(),\n  })),\n  generatedAt: z.string(),\n});\n\n// 12-Month Launch Roadmap - Detailed timeline with milestones\nexport const milestoneSchema = z.object({\n  month: z.number(),\n  milestone: z.string(),\n  description: z.string(),\n  dependencies: z.array(z.string()),\n  deliverables: z.array(z.string()),\n  success_criteria: z.array(z.string()),\n  risks: z.array(z.object({\n    risk: z.string(),\n    impact: z.enum([\"low\", \"medium\", \"high\"]),\n    mitigation: z.string(),\n  })),\n});\n\nexport const quarterlyGoalSchema = z.object({\n  quarter: z.string(),\n  objectives: z.array(z.string()),\n  key_metrics: z.array(z.object({\n    metric: z.string(),\n    target: z.number(),\n    unit: z.string(),\n  })),\n  budget: z.number(),\n});\n\nexport const launchRoadmapSchema = z.object({\n  milestones: z.array(milestoneSchema),\n  quarterlyGoals: z.array(quarterlyGoalSchema),\n  criticalPath: z.array(z.object({\n    activity: z.string(),\n    startMonth: z.number(),\n    endMonth: z.number(),\n    dependencies: z.array(z.string()),\n  })),\n  resourceAllocation: z.array(z.object({\n    resource: z.string(),\n    allocation: z.array(z.object({\n      month: z.number(),\n      percentage: z.number(),\n    })),\n  })),\n  contingencyPlans: z.array(z.object({\n    scenario: z.string(),\n    triggers: z.array(z.string()),\n    response: z.string(),\n  })),\n  generatedAt: z.string(),\n});\n\n// Enhanced Competitor Matrix\nexport const competitorPricingTierSchema = z.object({\n  tier: z.string(),\n  price: z.number(),\n  billingCycle: z.enum([\"monthly\", \"yearly\", \"one-time\"]),\n  features: z.array(z.string()),\n  limitations: z.array(z.string()).optional(),\n});\n\nexport const competitorIntelligenceSchema = z.object({\n  name: z.string(),\n  website: z.string().optional(),\n  description: z.string(),\n  pricing: z.array(competitorPricingTierSchema),\n  sentimentScore: z.number().min(-1).max(1), // -1 negative, +1 positive\n  marketShare: z.number().min(0).max(100).optional(),\n  strengths: z.array(z.string()),\n  weaknesses: z.array(z.string()),\n  differentiators: z.array(z.string()),\n  targetAudience: z.string(),\n  distribution: z.array(z.string()), // Distribution channels\n  fundingStage: z.string().optional(),\n  employeeCount: z.string().optional(),\n  yearFounded: z.number().optional(),\n  sources: z.array(sourceRefSchema),\n});\n\nexport const competitorMatrixSchema = z.object({\n  competitors: z.array(competitorIntelligenceSchema),\n  positioningMap: z.array(z.object({\n    competitor: z.string(),\n    xAxis: z.number(), // Price positioning\n    yAxis: z.number(), // Feature completeness\n  })),\n  marketGaps: z.array(z.string()),\n  competitiveAdvantages: z.array(z.string()),\n  threatsAndOpportunities: z.array(z.string()),\n  generatedAt: z.string(),\n});\n\n// 90-day Go-to-Market Plan\nexport const gtmTacticSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  effort: z.enum([\"low\", \"medium\", \"high\"]),\n  cost: z.enum([\"low\", \"medium\", \"high\"]),\n  impact: z.enum([\"low\", \"medium\", \"high\"]),\n  timeline: z.string(),\n  dependencies: z.array(z.string()),\n});\n\nexport const gtmKpiSchema = z.object({\n  metric: z.string(),\n  target: z.number(),\n  unit: z.string(),\n  measurement: z.string(),\n});\n\nexport const gtmPhaseSchema = z.object({\n  phase: z.string(),\n  weeks: z.string(),\n  objectives: z.array(z.string()),\n  tactics: z.array(gtmTacticSchema),\n  kpis: z.array(gtmKpiSchema),\n  budget: z.number(),\n  owners: z.array(z.string()).optional(),\n});\n\nexport const gtmRiskSchema = z.object({\n  risk: z.string(),\n  probability: z.enum([\"low\", \"medium\", \"high\"]),\n  impact: z.enum([\"low\", \"medium\", \"high\"]),\n  mitigation: z.string(),\n  contingency: z.string().optional(),\n});\n\nexport const gtmKillCriteriaSchema = z.object({\n  metric: z.string(),\n  threshold: z.number(),\n  timeWindow: z.string(),\n  rationale: z.string(),\n});\n\nexport const gtmPlanSchema = z.object({\n  phases: z.array(gtmPhaseSchema),\n  totalBudget: z.number(),\n  expectedOutcomes: z.array(z.string()),\n  successMetrics: z.array(gtmKpiSchema),\n  risks: z.array(gtmRiskSchema),\n  killCriteria: z.array(gtmKillCriteriaSchema),\n  assumptions: z.array(z.string()),\n  generatedAt: z.string(),\n});\n\n// Market Sizing Analysis\nexport const marketSizingMethodSchema = z.object({\n  method: z.enum([\"top-down\", \"bottom-up\", \"comparative\"]),\n  description: z.string(),\n  dataPoints: z.array(z.string()),\n  assumptions: z.array(z.string()),\n  confidence: z.number().min(0).max(1),\n});\n\nexport const marketSegmentSchema = z.object({\n  segment: z.string(),\n  size: z.number(),\n  unit: z.string(), // \"USD\", \"customers\", etc.\n  growthRate: z.number(), // Annual growth rate\n  accessibility: z.number().min(0).max(1), // How accessible is this segment\n});\n\nexport const marketSizingSchema = z.object({\n  tam: z.object({\n    value: z.number(),\n    unit: z.string(),\n    method: marketSizingMethodSchema,\n    segments: z.array(marketSegmentSchema),\n  }),\n  sam: z.object({\n    value: z.number(),\n    unit: z.string(),\n    method: marketSizingMethodSchema,\n    reasoningFactors: z.array(z.string()),\n  }),\n  som: z.object({\n    value: z.number(),\n    unit: z.string(),\n    method: marketSizingMethodSchema,\n    marketPenetration: z.number().min(0).max(1),\n    timeToCapture: z.number(), // Years\n  }),\n  bottomUpAnalysis: z.object({\n    unitEconomics: z.object({\n      units: z.number(),\n      pricePerUnit: z.number(),\n      adoptionRate: z.number().min(0).max(1),\n    }),\n    scaling: z.array(z.object({\n      year: z.number(),\n      units: z.number(),\n      revenue: z.number(),\n    })),\n  }).optional(),\n  references: z.array(sourceRefSchema),\n  generatedAt: z.string(),\n});\n\n// Export functionality\nexport const exportRequestSchema = z.object({\n  type: z.enum([\"csv\", \"json\", \"pdf\", \"zip\"]),\n  sections: z.array(z.string()), // Which sections to include\n  analysisId: z.string(),\n  includeCharts: z.boolean().default(false),\n  includeRawData: z.boolean().default(false),\n});\n\nexport const exportResultSchema = z.object({\n  id: z.string(),\n  status: z.enum([\"pending\", \"processing\", \"completed\", \"failed\"]),\n  downloadUrl: z.string().optional(),\n  filename: z.string(),\n  fileSize: z.number().optional(),\n  createdAt: z.string(),\n  expiresAt: z.string(),\n  error: z.string().optional(),\n});\n\n// Comprehensive Premium Analysis Response\nexport const premiumAnalysisSchema = z.object({\n  analysisId: z.string(),\n  keywordIntelligence: keywordIntelligenceSchema,\n  redditAnalysis: redditAnalysisSchema,\n  customerIntelligence: customerIntelligenceSchema,\n  financialProjections: financialProjectionsSchema,\n  technologyOperations: technologyOperationsSchema,\n  legalRegulatory: legalRegulatorySchema,\n  launchRoadmap: launchRoadmapSchema,\n  competitorMatrix: competitorMatrixSchema,\n  gtmPlan: gtmPlanSchema,\n  marketSizing: marketSizingSchema,\n  sources: z.array(sourceRefSchema),\n  generatedAt: z.string(),\n  expiresAt: z.string(),\n});\n\n// Premium API Input Schemas\nexport const keywordGenerationInputSchema = z.object({\n  analysisId: z.string(),\n  primaryKeyword: z.string(),\n  industry: z.string(),\n  targetAudience: z.string(),\n  locale: z.string().default(\"US\"),\n});\n\n// Remove old financial model input schema\n\nexport const competitorAnalysisInputSchema = z.object({\n  analysisId: z.string(),\n  industry: z.string(),\n  targetKeyword: z.string(),\n});\n\nexport const gtmPlanInputSchema = z.object({\n  analysisId: z.string(),\n  productDescription: z.string(),\n  targetAudience: z.string(),\n  budget: z.number(),\n});\n\nexport const marketSizingInputSchema = z.object({\n  analysisId: z.string(),\n  industry: z.string(),\n  productCategory: z.string(),\n  geography: z.string(),\n});\n\n// Type exports for all premium schemas\nexport type KeywordGenerationInput = z.infer<typeof keywordGenerationInputSchema>;\nexport type CompetitorAnalysisInput = z.infer<typeof competitorAnalysisInputSchema>;\nexport type GtmPlanInput = z.infer<typeof gtmPlanInputSchema>;\nexport type MarketSizingInput = z.infer<typeof marketSizingInputSchema>;\nexport type RedditAnalysis = z.infer<typeof redditAnalysisSchema>;\nexport type CustomerIntelligence = z.infer<typeof customerIntelligenceSchema>;\nexport type FinancialProjections = z.infer<typeof financialProjectionsSchema>;\nexport type TechnologyOperations = z.infer<typeof technologyOperationsSchema>;\nexport type LegalRegulatory = z.infer<typeof legalRegulatorySchema>;\nexport type LaunchRoadmap = z.infer<typeof launchRoadmapSchema>;\nexport type SourceRef = z.infer<typeof sourceRefSchema>;\nexport type KeywordTrendPoint = z.infer<typeof keywordTrendPointSchema>;\nexport type KeywordIntelligenceItem = z.infer<typeof keywordIntelligenceItemSchema>;\nexport type KeywordIntelligence = z.infer<typeof keywordIntelligenceSchema>;\nexport type CompetitorPricingTier = z.infer<typeof competitorPricingTierSchema>;\nexport type CompetitorIntelligence = z.infer<typeof competitorIntelligenceSchema>;\nexport type CompetitorMatrix = z.infer<typeof competitorMatrixSchema>;\nexport type GtmTactic = z.infer<typeof gtmTacticSchema>;\nexport type GtmKpi = z.infer<typeof gtmKpiSchema>;\nexport type GtmPhase = z.infer<typeof gtmPhaseSchema>;\nexport type GtmRisk = z.infer<typeof gtmRiskSchema>;\nexport type GtmKillCriteria = z.infer<typeof gtmKillCriteriaSchema>;\nexport type GtmPlan = z.infer<typeof gtmPlanSchema>;\nexport type MarketSizingMethod = z.infer<typeof marketSizingMethodSchema>;\nexport type MarketSegment = z.infer<typeof marketSegmentSchema>;\nexport type MarketSizing = z.infer<typeof marketSizingSchema>;\nexport type ExportRequest = z.infer<typeof exportRequestSchema>;\nexport type ExportResult = z.infer<typeof exportResultSchema>;\nexport type PremiumAnalysis = z.infer<typeof premiumAnalysisSchema>;\n","size_bytes":21823},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { PremiumProvider } from \"@/contexts/premium-context\";\nimport { UpgradeModal } from \"@/components/upgrade-modal\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Results from \"@/pages/results\";\nimport PremiumResults from \"@/pages/premium-results\";\nimport Analytics from \"@/pages/analytics\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/results\" component={Results} />\n      <Route path=\"/premium-results\" component={PremiumResults} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/trends\" component={Dashboard} />\n      <Route path=\"/pain-points\" component={Dashboard} />\n      <Route path=\"/ideas\" component={Dashboard} />\n      <Route path=\"/history\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <PremiumProvider>\n          <TooltipProvider>\n            <div className=\"min-h-screen bg-background\">\n              <main className=\"p-6 max-w-6xl mx-auto w-full\">\n                <Router />\n              </main>\n            </div>\n            <UpgradeModal />\n            <Toaster />\n          </TooltipProvider>\n        </PremiumProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1917},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 222 84% 5%;\n\n  --border: 215 16% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 222 84% 5%;\n\n  --card-border: 215 16% 85%;\n\n  --sidebar: 210 6% 95%;\n\n  --sidebar-foreground: 222 84% 5%;\n\n  --sidebar-border: 215 16% 82%;\n\n  --sidebar-primary: 217 100% 65%;\n\n  --sidebar-primary-foreground: 210 20% 98%;\n\n  --sidebar-accent: 212 8% 88%;\n\n  --sidebar-accent-foreground: 222 84% 10%;\n\n  --sidebar-ring: 217 100% 65%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 222 84% 5%;\n\n  --popover-border: 215 16% 80%;\n\n  --primary: 217 100% 65%;\n\n  --primary-foreground: 210 20% 98%;\n\n  --secondary: 210 6% 92%;\n\n  --secondary-foreground: 222 84% 10%;\n\n  --muted: 210 8% 94%;\n\n  --muted-foreground: 215 16% 45%;\n\n  --accent: 212 12% 90%;\n\n  --accent-foreground: 222 84% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 20% 98%;\n\n  --input: 215 16% 75%;\n  --ring: 217 100% 65%;\n  --chart-1: 217 100% 65%;\n  --chart-2: 142 84% 55%;\n  --chart-3: 25 95% 60%;\n  --chart-4: 330 85% 65%;\n  --chart-5: 33 95% 55%;\n  \n  /* Highlighter theme accent colors */\n  --neon-green: 142 84% 55%;\n  --hot-pink: 330 85% 65%;\n  --bright-orange: 25 95% 60%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 8% 12%;\n\n  --foreground: 210 20% 98%;\n\n  --border: 215 14% 20%;\n\n  --card: 222 10% 16%;\n\n  --card-foreground: 210 20% 98%;\n\n  --card-border: 215 14% 25%;\n\n  --sidebar: 220 8% 10%;\n\n  --sidebar-foreground: 210 20% 98%;\n\n  --sidebar-border: 215 14% 18%;\n\n  --sidebar-primary: 217 100% 65%;\n\n  --sidebar-primary-foreground: 210 20% 98%;\n\n  --sidebar-accent: 220 10% 22%;\n\n  --sidebar-accent-foreground: 215 16% 85%;\n\n  --sidebar-ring: 217 100% 65%;\n\n  --popover: 222 12% 18%;\n\n  --popover-foreground: 210 20% 98%;\n\n  --popover-border: 215 14% 28%;\n\n  --primary: 217 100% 65%;\n\n  --primary-foreground: 210 20% 98%;\n\n  --secondary: 222 12% 24%;\n\n  --secondary-foreground: 215 16% 85%;\n\n  --muted: 220 10% 20%;\n\n  --muted-foreground: 215 16% 65%;\n\n  --accent: 220 12% 18%;\n\n  --accent-foreground: 215 16% 82%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 20% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 215 14% 35%;\n  --ring: 217 100% 65%;\n  --chart-1: 217 100% 65%;\n  --chart-2: 142 84% 55%;\n  --chart-3: 25 95% 60%;\n  --chart-4: 330 85% 65%;\n  --chart-5: 33 95% 65%;\n  \n  /* Highlighter theme accent colors */\n  --neon-green: 142 84% 55%;\n  --hot-pink: 330 85% 65%;\n  --bright-orange: 25 95% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.2), 0px 2px 4px -2px hsl(0 0% 0% / 0.2);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.2), 0px 4px 6px -4px hsl(0 0% 0% / 0.2);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.2), 0px 8px 10px -6px hsl(0 0% 0% / 0.2);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.4);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10291},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-ideas-generator.tsx":{"content":"import { useState } from \"react\"\nimport { Lightbulb, Star, TrendingUp, Users, DollarSign, Zap, Copy, ExternalLink } from \"lucide-react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n\ninterface AppIdea {\n  id: string\n  title: string\n  description: string\n  targetAudience: string\n  marketOpportunity: number\n  feasibility: number\n  competitiveness: number\n  category: string\n  features: string[]\n  potentialRevenue: string\n  timeToMarket: string\n  basedOnPainPoints: string[]\n}\n\ninterface AppIdeasGeneratorProps {\n  appIdeas?: Array<{\n    title: string;\n    description: string;\n    market_validation: string;\n    difficulty: \"easy\" | \"medium\" | \"hard\";\n  }>;\n}\n\nexport function AppIdeasGenerator({ appIdeas: propAppIdeas }: AppIdeasGeneratorProps) {\n  const [selectedIdea, setSelectedIdea] = useState<string | null>(null)\n  const [generatingNew, setGeneratingNew] = useState(false)\n\n  // Convert API app ideas to local format or use mock data\n  const appIdeas: AppIdea[] = propAppIdeas ? propAppIdeas.map((idea, index) => ({\n    id: index.toString(),\n    title: idea.title,\n    description: idea.description,\n    targetAudience: \"General users\", \n    marketOpportunity: idea.market_validation === \"high\" ? 85 : idea.market_validation === \"medium\" ? 70 : 55,\n    feasibility: idea.difficulty === \"easy\" ? 90 : idea.difficulty === \"medium\" ? 75 : 60,\n    competitiveness: 70,\n    category: \"AI-Generated\",\n    features: [\"Core functionality\", \"User-friendly interface\", \"Mobile-first design\"],\n    potentialRevenue: idea.market_validation === \"high\" ? \"$2-5M ARR\" : \"$500K-2M ARR\",\n    timeToMarket: idea.difficulty === \"easy\" ? \"2-3 months\" : idea.difficulty === \"medium\" ? \"3-6 months\" : \"6-12 months\",\n    basedOnPainPoints: [\"AI-identified pain points\"]\n  })) : [\n    {\n      id: \"1\",\n      title: \"SimpleBudget\",\n      description: \"A minimalist budgeting app that focuses on just the essentials: income, expenses, and savings goals. Uses smart categorization with minimal user input required.\",\n      targetAudience: \"Budget-conscious individuals who find traditional apps too complex\",\n      marketOpportunity: 85,\n      feasibility: 90,\n      competitiveness: 75,\n      category: \"Personal Finance\",\n      features: [\n        \"One-tap expense logging\",\n        \"Smart category detection\",\n        \"Visual spending overview\",\n        \"Simple savings goals\",\n        \"Bank sync integration\"\n      ],\n      potentialRevenue: \"$2-5M ARR\",\n      timeToMarket: \"3-4 months\",\n      basedOnPainPoints: [\"Budgeting apps are too complex\", \"Manual transaction entry is tedious\"]\n    },\n    {\n      id: \"2\", \n      title: \"GoalTracker Pro\",\n      description: \"A specialized app focused entirely on financial goal setting and tracking with gamification elements to keep users motivated.\",\n      targetAudience: \"Goal-oriented individuals and families planning major purchases\",\n      marketOpportunity: 70,\n      feasibility: 80,\n      competitiveness: 60,\n      category: \"Goal Management\",\n      features: [\n        \"Visual goal progress\",\n        \"Achievement milestones\",\n        \"Family goal sharing\",\n        \"Automated savings recommendations\",\n        \"Goal celebration features\"\n      ],\n      potentialRevenue: \"$1-3M ARR\", \n      timeToMarket: \"2-3 months\",\n      basedOnPainPoints: [\"Lack of goal tracking features\"]\n    },\n    {\n      id: \"3\",\n      title: \"AutoBudget AI\",\n      description: \"An AI-powered budgeting assistant that requires zero manual input. Connects to all accounts and creates budgets automatically based on spending patterns.\",\n      targetAudience: \"Busy professionals who want automated financial management\",\n      marketOpportunity: 95,\n      feasibility: 60,\n      competitiveness: 85,\n      category: \"AI Finance\",\n      features: [\n        \"Complete automation\",\n        \"AI spending insights\",\n        \"Predictive budgeting\",\n        \"Smart alerts\",\n        \"Voice interaction\"\n      ],\n      potentialRevenue: \"$10-20M ARR\",\n      timeToMarket: \"6-8 months\",\n      basedOnPainPoints: [\"Manual transaction entry is tedious\", \"Budgeting apps are too complex\"]\n    }\n  ]\n\n  const generateNewIdeas = () => {\n    setGeneratingNew(true)\n    console.log('Generate new ideas triggered')\n    \n    // todo: remove mock functionality - simulate AI generation\n    setTimeout(() => {\n      setGeneratingNew(false)\n    }, 3000)\n  }\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-chart-2\"\n    if (score >= 60) return \"text-chart-3\"\n    return \"text-destructive\"\n  }\n\n  const copyToClipboard = (idea: AppIdea) => {\n    const text = `${idea.title}\\n\\n${idea.description}\\n\\nTarget Audience: ${idea.targetAudience}\\nPotential Revenue: ${idea.potentialRevenue}\\nTime to Market: ${idea.timeToMarket}\\n\\nKey Features:\\n${idea.features.map(f => `• ${f}`).join('\\n')}`\n    navigator.clipboard.writeText(text)\n    console.log('Copied to clipboard:', idea.title)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Lightbulb className=\"h-5 w-5\" />\n            AI-Generated App Ideas\n          </CardTitle>\n          <Button \n            onClick={generateNewIdeas}\n            disabled={generatingNew}\n            data-testid=\"button-generate-ideas\"\n          >\n            <Zap className=\"h-4 w-4 mr-2\" />\n            {generatingNew ? \"Generating...\" : \"Generate New Ideas\"}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-6\">\n          {appIdeas.map((idea) => (\n            <Card key={idea.id} className=\"hover-elevate\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <h4 className=\"font-semibold text-lg\">{idea.title}</h4>\n                      <Badge variant=\"outline\">{idea.category}</Badge>\n                    </div>\n                    <p className=\"text-muted-foreground\">{idea.description}</p>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => copyToClipboard(idea)}\n                      data-testid={`copy-idea-${idea.id}`}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => console.log('Export idea', idea.id)}\n                      data-testid={`export-idea-${idea.id}`}\n                    >\n                      <ExternalLink className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Tabs defaultValue=\"overview\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-3\">\n                    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                    <TabsTrigger value=\"features\">Features</TabsTrigger>\n                    <TabsTrigger value=\"analysis\">Analysis</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"overview\" className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm font-medium\">Target Audience</p>\n                        <p className=\"text-sm text-muted-foreground\">{idea.targetAudience}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium\">Time to Market</p>\n                        <p className=\"text-sm text-muted-foreground\">{idea.timeToMarket}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium\">Potential Revenue</p>\n                        <p className=\"text-sm font-semibold text-chart-2\">{idea.potentialRevenue}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium\">Based on Pain Points:</p>\n                      <div className=\"flex gap-2 flex-wrap\">\n                        {idea.basedOnPainPoints.map((painPoint, index) => (\n                          <Badge key={index} variant=\"secondary\">\n                            {painPoint}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"features\" className=\"space-y-4\">\n                    <div className=\"grid gap-2\">\n                      {idea.features.map((feature, index) => (\n                        <div \n                          key={index}\n                          className=\"flex items-center gap-2 p-2 rounded-md bg-muted/30\"\n                        >\n                          <Star className=\"h-4 w-4 text-chart-3\" />\n                          <span className=\"text-sm\">{feature}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"analysis\" className=\"space-y-4\">\n                    <div className=\"grid gap-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <TrendingUp className=\"h-4 w-4\" />\n                            <span className=\"text-sm font-medium\">Market Opportunity</span>\n                          </div>\n                          <span className={`text-sm font-semibold ${getScoreColor(idea.marketOpportunity)}`}>\n                            {idea.marketOpportunity}%\n                          </span>\n                        </div>\n                        <Progress value={idea.marketOpportunity} />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Zap className=\"h-4 w-4\" />\n                            <span className=\"text-sm font-medium\">Feasibility</span>\n                          </div>\n                          <span className={`text-sm font-semibold ${getScoreColor(idea.feasibility)}`}>\n                            {idea.feasibility}%\n                          </span>\n                        </div>\n                        <Progress value={idea.feasibility} />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Users className=\"h-4 w-4\" />\n                            <span className=\"text-sm font-medium\">Competitive Edge</span>\n                          </div>\n                          <span className={`text-sm font-semibold ${getScoreColor(idea.competitiveness)}`}>\n                            {idea.competitiveness}%\n                          </span>\n                        </div>\n                        <Progress value={idea.competitiveness} />\n                      </div>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","size_bytes":12146},"client/src/components/app-sidebar.tsx":{"content":"import { BarChart3, Search, TrendingUp, MessageSquare, Lightbulb, History } from \"lucide-react\"\nimport { Link, useLocation } from \"wouter\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\"\n\n// Menu items\nconst items = [\n  {\n    title: \"Search\",\n    url: \"/\",\n    icon: Search,\n    description: \"Search Reddit topics\"\n  },\n  {\n    title: \"Analytics\",\n    url: \"/analytics\",\n    icon: BarChart3,\n    description: \"View sentiment analysis\"\n  },\n  {\n    title: \"Trends\",\n    url: \"/trends\", \n    icon: TrendingUp,\n    description: \"Discover trending topics\"\n  },\n  {\n    title: \"Pain Points\",\n    url: \"/pain-points\",\n    icon: MessageSquare,\n    description: \"Analyze user problems\"\n  },\n  {\n    title: \"App Ideas\",\n    url: \"/ideas\",\n    icon: Lightbulb,\n    description: \"Generated solutions\"\n  },\n  {\n    title: \"History\",\n    url: \"/history\",\n    icon: History,\n    description: \"Past searches\"\n  },\n]\n\nexport function AppSidebar() {\n  const [location] = useLocation()\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b border-sidebar-border p-6\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n            <BarChart3 className=\"h-4 w-4\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold\">Idea Validator</h2>\n            <p className=\"text-xs text-muted-foreground\">Reddit Research Tool</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`nav-${item.title.toLowerCase()}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      \n      <SidebarFooter className=\"border-t border-sidebar-border p-4\">\n        <div className=\"text-xs text-muted-foreground\">\n          <p>Powered by AI</p>\n          <p>Real-time Reddit analysis</p>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  )\n}","size_bytes":2791},"client/src/components/metrics-overview.tsx":{"content":"import { TrendingUp, MessageSquare, Users, Clock } from \"lucide-react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport type { AnalysisResponse } from \"@shared/schema\"\n\ninterface MetricCardProps {\n  title: string\n  value: string | number\n  change?: string\n  icon: React.ElementType\n  trend?: \"up\" | \"down\" | \"neutral\"\n}\n\nfunction MetricCard({ title, value, change, icon: Icon, trend = \"neutral\" }: MetricCardProps) {\n  const getTrendColor = () => {\n    switch (trend) {\n      case \"up\": return \"text-chart-2\"\n      case \"down\": return \"text-destructive\"\n      default: return \"text-muted-foreground\"\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={`metric-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </div>\n        {change && (\n          <p className={`text-xs ${getTrendColor()} flex items-center gap-1`}>\n            <TrendingUp className=\"h-3 w-3\" />\n            {change}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\ninterface MetricsOverviewProps {\n  analysisData?: AnalysisResponse;\n}\n\nexport function MetricsOverview({ analysisData }: MetricsOverviewProps) {\n  const metrics = analysisData ? [\n    {\n      title: \"Reddit Posts Analyzed\",\n      value: analysisData.total_posts_analyzed.toLocaleString(),\n      change: `From ${analysisData.subreddits.length} relevant subreddits`,\n      icon: MessageSquare,\n      trend: \"up\" as const\n    },\n    {\n      title: \"Market Interest Level\",\n      value: analysisData.market_interest_level.charAt(0).toUpperCase() + analysisData.market_interest_level.slice(1),\n      change: analysisData.market_interest_level === \"high\" ? \"Strong demand signals detected\" : \n             analysisData.market_interest_level === \"medium\" ? \"Moderate interest shown\" : \n             \"Limited interest observed\",\n      icon: TrendingUp,\n      trend: (analysisData.market_interest_level === \"high\" ? \"up\" : \n             analysisData.market_interest_level === \"medium\" ? \"neutral\" : \"down\") as const\n    },\n    {\n      title: \"Pain Points Found\",\n      value: analysisData.pain_points.length.toString(),\n      change: \"Actionable user frustrations\",\n      icon: Users,\n      trend: \"neutral\" as const\n    },\n    {\n      title: \"Keywords Generated\",\n      value: analysisData.keywords.length.toString(),\n      change: \"Research topics identified\",\n      icon: Clock,\n      trend: \"neutral\" as const\n    }\n  ] : [\n    {\n      title: \"Reddit Posts Analyzed\",\n      value: \"2,847\",\n      change: \"From 12 relevant subreddits\",\n      icon: MessageSquare,\n      trend: \"up\" as const\n    },\n    {\n      title: \"Market Interest Level\",\n      value: \"High\",\n      change: \"Strong demand signals detected\",\n      icon: TrendingUp,\n      trend: \"up\" as const\n    },\n    {\n      title: \"Pain Points Found\",\n      value: \"23\",\n      change: \"Actionable user frustrations\",\n      icon: Users,\n      trend: \"neutral\" as const\n    },\n    {\n      title: \"Research Timeframe\",\n      value: \"Past Month\",\n      change: \"Recent discussions analyzed\",\n      icon: Clock,\n      trend: \"neutral\" as const\n    }\n  ]\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      {metrics.map((metric) => (\n        <MetricCard key={metric.title} {...metric} />\n      ))}\n    </div>\n  )\n}","size_bytes":3596},"client/src/components/pain-points-display.tsx":{"content":"import { useState } from \"react\"\nimport { AlertCircle, ChevronDown, ExternalLink, Filter } from \"lucide-react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\n\ninterface PainPoint {\n  id: string\n  title: string\n  description: string\n  frequency: number\n  severity: \"high\" | \"medium\" | \"low\"\n  category: string\n  relatedSubreddits: string[]\n  examplePosts: Array<{\n    title: string\n    subreddit: string\n    upvotes: number\n    url: string\n  }>\n}\n\ninterface PainPointsDisplayProps {\n  painPoints?: Array<{\n    title: string;\n    frequency: number;\n    urgency: \"low\" | \"medium\" | \"high\";\n    examples: string[];\n  }>;\n}\n\nexport function PainPointsDisplay({ painPoints: propPainPoints }: PainPointsDisplayProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\")\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set())\n\n  // Convert API pain points to local format or use mock data\n  const painPoints: PainPoint[] = propPainPoints ? propPainPoints.map((pp, index) => ({\n    id: index.toString(),\n    title: pp.title,\n    description: pp.examples[0] || \"No description available\",\n    frequency: pp.frequency,\n    severity: pp.urgency,\n    category: \"General\", \n    relatedSubreddits: [\"personalfinance\", \"budgeting\"],\n    examplePosts: pp.examples.slice(0, 3).map((example, i) => ({\n      title: example,\n      subreddit: \"personalfinance\",\n      upvotes: Math.floor(Math.random() * 300) + 50,\n      url: \"#\"\n    }))\n  })) : [\n    {\n      id: \"1\",\n      title: \"Budgeting apps are too complex\",\n      description: \"Users consistently complain that existing budgeting apps have overwhelming interfaces with too many features they don't need.\",\n      frequency: 89,\n      severity: \"high\",\n      category: \"UX/UI\",\n      relatedSubreddits: [\"personalfinance\", \"budgeting\", \"ynab\"],\n      examplePosts: [\n        { title: \"Why are all budgeting apps so complicated?\", subreddit: \"personalfinance\", upvotes: 342, url: \"#\" },\n        { title: \"Looking for a SIMPLE budget tracker\", subreddit: \"budgeting\", upvotes: 156, url: \"#\" },\n        { title: \"YNAB is too complex for beginners\", subreddit: \"ynab\", upvotes: 89, url: \"#\" }\n      ]\n    },\n    {\n      id: \"2\", \n      title: \"Manual transaction entry is tedious\",\n      description: \"People are frustrated with having to manually input every transaction and want better automation.\",\n      frequency: 76,\n      severity: \"high\",\n      category: \"Automation\",\n      relatedSubreddits: [\"personalfinance\", \"mintuit\", \"budgeting\"],\n      examplePosts: [\n        { title: \"Tired of entering every transaction manually\", subreddit: \"personalfinance\", upvotes: 234, url: \"#\" },\n        { title: \"Why can't budget apps sync with all banks?\", subreddit: \"budgeting\", upvotes: 178, url: \"#\" }\n      ]\n    },\n    {\n      id: \"3\",\n      title: \"Lack of goal tracking features\",\n      description: \"Users want better ways to set and track financial goals within their budgeting apps.\",\n      frequency: 62,\n      severity: \"medium\",\n      category: \"Features\",\n      relatedSubreddits: [\"personalfinance\", \"financialplanning\"],\n      examplePosts: [\n        { title: \"Need app that helps track savings goals\", subreddit: \"personalfinance\", upvotes: 145, url: \"#\" },\n        { title: \"Budget apps need better goal visualization\", subreddit: \"financialplanning\", upvotes: 98, url: \"#\" }\n      ]\n    }\n  ]\n\n  const categories = [\"all\", ...Array.from(new Set(painPoints.map(p => p.category)))]\n\n  const filteredPainPoints = selectedCategory === \"all\" \n    ? painPoints \n    : painPoints.filter(p => p.category === selectedCategory)\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"high\": return \"destructive\"\n      case \"medium\": return \"default\"\n      case \"low\": return \"secondary\"\n      default: return \"secondary\"\n    }\n  }\n\n  const toggleExpanded = (id: string) => {\n    const newExpanded = new Set(expandedItems)\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id)\n    } else {\n      newExpanded.add(id)\n    }\n    setExpandedItems(newExpanded)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-5 w-5\" />\n            Pain Points Analysis\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-pain-points\">\n              <Filter className=\"h-4 w-4 mr-1\" />\n              Filter\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex gap-2 flex-wrap\">\n          {categories.map((category) => (\n            <Button\n              key={category}\n              variant={selectedCategory === category ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedCategory(category)}\n              data-testid={`filter-category-${category}`}\n            >\n              {category === \"all\" ? \"All\" : category}\n            </Button>\n          ))}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {filteredPainPoints.map((painPoint) => (\n          <Collapsible\n            key={painPoint.id}\n            open={expandedItems.has(painPoint.id)}\n            onOpenChange={() => toggleExpanded(painPoint.id)}\n          >\n            <Card className=\"hover-elevate\">\n              <CollapsibleTrigger asChild>\n                <CardHeader className=\"cursor-pointer\" data-testid={`pain-point-${painPoint.id}`}>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-2 flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className=\"font-medium\">{painPoint.title}</h4>\n                        <Badge variant={getSeverityColor(painPoint.severity)}>\n                          {painPoint.severity}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm text-muted-foreground\">Frequency:</span>\n                          <Progress value={painPoint.frequency} className=\"w-20\" />\n                          <span className=\"text-sm font-medium\">{painPoint.frequency}%</span>\n                        </div>\n                        <Badge variant=\"outline\">{painPoint.category}</Badge>\n                      </div>\n                    </div>\n                    <ChevronDown \n                      className={`h-4 w-4 transition-transform ${\n                        expandedItems.has(painPoint.id) ? \"rotate-180\" : \"\"\n                      }`} \n                    />\n                  </div>\n                </CardHeader>\n              </CollapsibleTrigger>\n              \n              <CollapsibleContent>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">{painPoint.description}</p>\n                    \n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium text-sm\">Related Subreddits:</h5>\n                      <div className=\"flex gap-1 flex-wrap\">\n                        {painPoint.relatedSubreddits.map((subreddit) => (\n                          <Badge key={subreddit} variant=\"secondary\">\n                            r/{subreddit}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium text-sm\">Example Posts:</h5>\n                      <div className=\"space-y-2\">\n                        {painPoint.examplePosts.map((post, index) => (\n                          <div \n                            key={index}\n                            className=\"flex items-center justify-between p-2 rounded-md bg-muted/50\"\n                          >\n                            <div className=\"flex-1\">\n                              <p className=\"text-sm font-medium\">{post.title}</p>\n                              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                                <span>r/{post.subreddit}</span>\n                                <span>•</span>\n                                <span>{post.upvotes} upvotes</span>\n                              </div>\n                            </div>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => console.log('View post', post.url)}\n                              data-testid={`view-post-${index}`}\n                            >\n                              <ExternalLink className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </CollapsibleContent>\n            </Card>\n          </Collapsible>\n        ))}\n      </CardContent>\n    </Card>\n  )\n}","size_bytes":9561},"client/src/components/scoring-cards.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { HelpCircle } from \"lucide-react\"\n\ninterface ScoringCardsProps {\n  overallScore?: number\n  viabilityScore?: number\n}\n\nexport function ScoringCards({ overallScore = 0, viabilityScore = 0 }: ScoringCardsProps) {\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return \"text-green-600 dark:text-green-400\"\n    if (score >= 6) return \"text-yellow-600 dark:text-yellow-400\" \n    if (score >= 4) return \"text-orange-600 dark:text-orange-400\"\n    return \"text-red-600 dark:text-red-400\"\n  }\n\n  const getScoreBgColor = (score: number) => {\n    if (score >= 8) return \"bg-green-50 dark:bg-green-950/30 border-green-200 dark:border-green-800\"\n    if (score >= 6) return \"bg-yellow-50 dark:bg-yellow-950/30 border-yellow-200 dark:border-yellow-800\"\n    if (score >= 4) return \"bg-orange-50 dark:bg-orange-950/30 border-orange-200 dark:border-orange-800\"\n    return \"bg-red-50 dark:bg-red-950/30 border-red-200 dark:border-red-800\"\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <Card className={getScoreBgColor(overallScore)}>\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n            Overall Score\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground cursor-help\" data-testid=\"tooltip-overall-score\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Overall score out of 10 on the idea on how good or bad of an idea it is</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\" data-testid=\"text-overall-score\">\n            <span className={getScoreColor(overallScore)}>{(overallScore || 0).toFixed(1)}</span>\n            <span className=\"text-muted-foreground text-base font-normal ml-1\">/10</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className={getScoreBgColor(viabilityScore)}>\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n            Viability Score\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground cursor-help\" data-testid=\"tooltip-viability-score\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>On a scale of 10 how easy or difficult it is to bring the idea to life (considering complexities and scale)</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\" data-testid=\"text-viability-score\">\n            <span className={getScoreColor(viabilityScore)}>{(viabilityScore || 0).toFixed(1)}</span>\n            <span className=\"text-muted-foreground text-base font-normal ml-1\">/10</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":3380},"client/src/components/search-interface.tsx":{"content":"import { useState } from \"react\"\nimport { useLocation } from \"wouter\"\nimport { Lightbulb, Sparkles, Target, Building2, ChevronDown, ChevronUp, BarChart3 } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\nimport { useMutation } from \"@tanstack/react-query\"\nimport { apiRequest } from \"@/lib/queryClient\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport type { AnalyzeIdeaRequest, AnalysisResponse } from \"@shared/schema\"\n\ninterface SearchInterfaceProps {\n  // No props needed anymore - navigation handles the flow\n}\n\nexport function SearchInterface({}: SearchInterfaceProps) {\n  const [idea, setIdea] = useState(\"\")\n  const [industry, setIndustry] = useState(\"\")\n  const [targetAudience, setTargetAudience] = useState(\"\")\n  const [country, setCountry] = useState(\"global\")\n  const [platform, setPlatform] = useState<\"web-app\" | \"mobile-app\" | \"both\">(\"web-app\")\n  const [fundingMethod, setFundingMethod] = useState<\"self-funded\" | \"bootstrapping\" | \"raising-capital\">(\"self-funded\")\n  const [timeRange, setTimeRange] = useState<\"week\" | \"month\" | \"quarter\" | \"year\">(\"year\")\n  const [email, setEmail] = useState(\"\")\n  const [goal, setGoal] = useState(\"\")\n  const [role, setRole] = useState(\"\")\n  const [timeline, setTimeline] = useState(\"\")\n  const [showOptionalFields, setShowOptionalFields] = useState(false)\n  const [showEmailCapture, setShowEmailCapture] = useState(false)\n  const { toast } = useToast()\n  const [location, setLocation] = useLocation()\n\n  // Industry options\n  const industries = [\n    \"FinTech\", \"HealthTech\", \"EdTech\", \"E-commerce\", \"SaaS\", \n    \"Social Media\", \"Gaming\", \"Food & Beverage\", \"Travel\", \n    \"Real Estate\", \"Fitness\", \"Productivity\", \"Entertainment\"\n  ]\n\n  // Country options\n  const countries = [\n    \"Global\",\n    \"United States\", \"Canada\", \"United Kingdom\", \"Germany\", \"France\", \"Italy\", \"Spain\", \"Netherlands\", \"Belgium\", \"Switzerland\", \"Austria\", \"Sweden\", \"Norway\", \"Denmark\", \"Finland\", \"Poland\", \"Czech Republic\", \"Hungary\", \"Romania\", \"Bulgaria\", \"Croatia\", \"Slovenia\", \"Slovakia\", \"Lithuania\", \"Latvia\", \"Estonia\", \"Ireland\", \"Portugal\", \"Greece\", \"Cyprus\", \"Malta\", \"Luxembourg\",\n    \"Australia\", \"New Zealand\", \"Japan\", \"South Korea\", \"Singapore\", \"Hong Kong\", \"Taiwan\", \"Malaysia\", \"Thailand\", \"Philippines\", \"Indonesia\", \"Vietnam\", \"India\", \"China\", \"Pakistan\", \"Bangladesh\", \"Sri Lanka\", \"Nepal\", \"Myanmar\", \"Cambodia\", \"Laos\",\n    \"Brazil\", \"Argentina\", \"Chile\", \"Colombia\", \"Peru\", \"Ecuador\", \"Bolivia\", \"Paraguay\", \"Uruguay\", \"Venezuela\", \"Mexico\", \"Guatemala\", \"Honduras\", \"El Salvador\", \"Nicaragua\", \"Costa Rica\", \"Panama\", \"Dominican Republic\", \"Haiti\", \"Jamaica\", \"Trinidad and Tobago\", \"Barbados\",\n    \"South Africa\", \"Nigeria\", \"Kenya\", \"Ghana\", \"Ethiopia\", \"Morocco\", \"Egypt\", \"Tunisia\", \"Algeria\", \"Libya\", \"Sudan\", \"Tanzania\", \"Uganda\", \"Zimbabwe\", \"Zambia\", \"Botswana\", \"Namibia\", \"Mauritius\", \"Seychelles\",\n    \"Russia\", \"Ukraine\", \"Belarus\", \"Moldova\", \"Georgia\", \"Armenia\", \"Azerbaijan\", \"Kazakhstan\", \"Uzbekistan\", \"Turkmenistan\", \"Tajikistan\", \"Kyrgyzstan\", \"Mongolia\",\n    \"Israel\", \"Turkey\", \"Saudi Arabia\", \"United Arab Emirates\", \"Qatar\", \"Kuwait\", \"Bahrain\", \"Oman\", \"Jordan\", \"Lebanon\", \"Iraq\", \"Iran\", \"Afghanistan\"\n  ]\n\n  const analyzeIdeaMutation = useMutation({\n    mutationFn: async (data: AnalyzeIdeaRequest): Promise<AnalysisResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/analyze\", data)\n      return await response.json() as AnalysisResponse\n    },\n    onSuccess: (results) => {\n      console.log('Analysis completed successfully:', results)\n      // Save results to sessionStorage and navigate to results page\n      sessionStorage.setItem('analysis-results', JSON.stringify(results))\n      setLocation('/results')\n      toast({\n        title: \"Analysis Complete!\",\n        description: `Found ${results.subreddits.length} relevant subreddits and ${results.pain_points.length} key pain points.`,\n      })\n    },\n    onError: (error) => {\n      console.error('Analysis failed:', error)\n      toast({\n        title: \"Analysis Failed\",\n        description: \"There was an error analyzing your startup idea. Please try again.\",\n        variant: \"destructive\",\n      })\n    },\n  })\n\n  const handleAnalyze = () => {\n    if (!idea.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please describe your startup idea first.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    console.log('Analysis triggered', { idea, industry, targetAudience, country, platform, fundingMethod, timeRange })\n    \n    analyzeIdeaMutation.mutate({\n      idea: idea.trim(),\n      industry: industry || undefined,\n      targetAudience: targetAudience || undefined,\n      country,\n      platform,\n      fundingMethod,\n      timeRange,\n    })\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-4 sm:py-8 px-2 sm:px-4\">\n      <Card className=\"border-2 border-primary/20 shadow-xl bg-gradient-to-br from-card to-primary/5\">\n        <CardContent className=\"p-3 sm:p-6 space-y-4 sm:space-y-6\">\n          {/* Main idea input - Always visible above the fold */}\n          <div className=\"space-y-2\">\n            <label className=\"text-lg font-medium\">\n              Describe your idea (1–3 sentences)\n            </label>\n            <Textarea\n              placeholder=\"AI meal-planning coach that builds weekly menus from pantry photos.\"\n              value={idea}\n              onChange={(e) => setIdea(e.target.value)}\n              data-testid=\"input-startup-idea\"\n              className=\"min-h-[120px] text-base border-2 border-primary/30 focus:border-primary\"\n            />\n          </div>\n\n          {/* Improve accuracy section - Progressive disclosure */}\n          <Collapsible open={showOptionalFields} onOpenChange={setShowOptionalFields}>\n            <CollapsibleTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-between p-3 h-auto bg-gradient-to-r from-[hsl(var(--neon-green))/5] to-[hsl(var(--hot-pink))/5] hover:from-[hsl(var(--neon-green))/10] hover:to-[hsl(var(--hot-pink))/10] border border-[hsl(var(--neon-green))/20] rounded-lg\"\n                data-testid=\"toggle-optional-fields\"\n              >\n                <div className=\"flex flex-col sm:flex-row sm:items-center gap-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Target className=\"h-4 w-4 text-[hsl(var(--neon-green))]\" />\n                    <span className=\"text-sm font-semibold text-[hsl(var(--neon-green))]\">\n                      Improve accuracy (optional)\n                    </span>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-[hsl(var(--neon-green))] text-white text-xs w-fit\">\n                    +43.25% accuracy\n                  </Badge>\n                </div>\n                {showOptionalFields ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n              </Button>\n            </CollapsibleTrigger>\n            <CollapsibleContent className=\"pt-4\">\n              <div className=\"bg-gradient-to-r from-[hsl(var(--neon-green))/10] to-[hsl(var(--hot-pink))/10] rounded-lg p-4 border border-[hsl(var(--neon-green))/20]\">\n\n              <div className=\"space-y-4\">\n              {/* Target Audience - Free text with suggestions */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Target audience</label>\n                <Input\n                  placeholder=\"e.g., Busy parents with young children\"\n                  value={targetAudience}\n                  onChange={(e) => setTargetAudience(e.target.value)}\n                  data-testid=\"input-custom-audience\"\n                  className=\"text-sm\"\n                />\n                <div className=\"flex gap-2 flex-wrap\">\n                  {[\"Gen-Z freelancers\", \"New parents\", \"SMBs\", \"College students\", \"Remote workers\"].map((suggestion) => (\n                    <Button\n                      key={suggestion}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setTargetAudience(suggestion)}\n                      className=\"text-xs\"\n                    >\n                      {suggestion}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Industry */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Industry</label>\n                  <Select value={industry} onValueChange={setIndustry}>\n                    <SelectTrigger data-testid=\"select-industry\">\n                      <SelectValue placeholder=\"Select your industry\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {industries.map((ind) => (\n                        <SelectItem key={ind} value={ind}>\n                          {ind}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Geography */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Target geography</label>\n                  <Select value={country} onValueChange={setCountry}>\n                    <SelectTrigger data-testid=\"select-country\">\n                      <SelectValue placeholder=\"Select target country\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {countries.map((country) => (\n                        <SelectItem key={country} value={country.toLowerCase().replace(/ /g, '-')}>\n                          {country}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Platform */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Platform</label>\n                  <Select value={platform} onValueChange={(value: \"web-app\" | \"mobile-app\" | \"both\") => setPlatform(value)}>\n                    <SelectTrigger data-testid=\"select-platform\">\n                      <SelectValue placeholder=\"Select platform\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"web-app\">Web App</SelectItem>\n                      <SelectItem value=\"mobile-app\">Mobile App</SelectItem>\n                      <SelectItem value=\"both\">Both</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Time Range - Fixed to 12 months for optimal insights */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Analysis time range</label>\n                  <div className=\"px-3 py-2 bg-muted/50 border border-border rounded-md text-sm text-muted-foreground flex items-center gap-2\" data-testid=\"text-time-range\">\n                    <BarChart3 className=\"h-4 w-4\" />\n                    Past 12 months (optimal for trend analysis)\n                  </div>\n                </div>\n\n                {/* Main Goal */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Main goal</label>\n                  <Select value={goal} onValueChange={setGoal}>\n                    <SelectTrigger data-testid=\"select-goal\">\n                      <SelectValue placeholder=\"Select main goal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"validate-demand\">Validate demand</SelectItem>\n                      <SelectItem value=\"find-competitors\">Find competitors</SelectItem>\n                      <SelectItem value=\"understand-pain-points\">Understand pain points</SelectItem>\n                      <SelectItem value=\"identify-features\">Identify key features</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              </div>\n            </div>\n            </CollapsibleContent>\n            </Collapsible>\n\n          {!showEmailCapture && !analyzeIdeaMutation.isPending && (\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-3 pt-2\">\n              <Button \n                onClick={() => {\n                  if (!idea.trim()) {\n                    toast({\n                      title: \"Missing Information\",\n                      description: \"Please describe your startup idea first.\",\n                      variant: \"destructive\",\n                    })\n                    return\n                  }\n                  setShowEmailCapture(true)\n                }}\n                disabled={!idea.trim()}\n                data-testid=\"button-analyze\"\n                className=\"px-8 py-4 text-lg font-semibold bg-primary hover:bg-primary/90 text-primary-foreground rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 w-full sm:w-auto\"\n              >\n                Validate my Startup Idea\n              </Button>\n              <button\n                onClick={() => {\n                  // TODO: Open sample report modal/new tab\n                  toast({\n                    title: \"Sample Report\",\n                    description: \"Opening sample report preview...\",\n                  })\n                }}\n                data-testid=\"link-sample-report\"\n                className=\"text-primary hover:text-primary/80 underline underline-offset-4 font-medium text-base transition-colors duration-200\"\n              >\n                👀 See a sample report\n              </button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Step 2: Email Capture During Generation */}\n      {showEmailCapture && (\n        <Card className=\"mt-8 border-2 border-[hsl(var(--hot-pink))/20] shadow-2xl bg-gradient-to-br from-card to-[hsl(var(--hot-pink))/5]\">\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-6\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"flex items-center justify-center gap-3\">\n                  <div className=\"h-3 w-3 bg-[hsl(var(--hot-pink))] rounded-full animate-pulse\"></div>\n                  <span className=\"text-2xl font-bold bg-gradient-to-r from-[hsl(var(--hot-pink))] to-primary bg-clip-text text-transparent\">\n                    We're scanning sources…\n                  </span>\n                </div>\n                <p className=\"text-lg text-muted-foreground\">Where should we send the link & updates?</p>\n              </div>\n              \n              <div className=\"space-y-6 max-w-lg mx-auto\">\n                <div className=\"space-y-3\">\n                  <Input\n                    type=\"email\"\n                    placeholder=\"your-email@example.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    data-testid=\"input-email\"\n                    className=\"text-center text-xl h-14 border-2 border-[hsl(var(--hot-pink))/30] focus:border-[hsl(var(--hot-pink))]\"\n                  />\n                  <p className=\"text-sm text-muted-foreground text-center\">\n                    We only use this to save & send your report. No spam.\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Role (optional)</label>\n                    <Select value={role} onValueChange={setRole}>\n                      <SelectTrigger data-testid=\"select-role\" className=\"h-12\">\n                        <SelectValue placeholder=\"Select role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"founder\">Founder</SelectItem>\n                        <SelectItem value=\"indie-hacker\">Indie hacker</SelectItem>\n                        <SelectItem value=\"pm\">PM</SelectItem>\n                        <SelectItem value=\"agency\">Agency</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Timeline (optional)</label>\n                    <Select value={timeline} onValueChange={setTimeline}>\n                      <SelectTrigger data-testid=\"select-timeline\" className=\"h-12\">\n                        <SelectValue placeholder=\"Select timeline\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"now\">Now</SelectItem>\n                        <SelectItem value=\"this-month\">This month</SelectItem>\n                        <SelectItem value=\"exploring\">Exploring</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleAnalyze}\n                  disabled={!email.trim() || analyzeIdeaMutation.isPending}\n                  data-testid=\"button-start-analysis\"\n                  size=\"lg\"\n                  className=\"w-full py-6 text-xl font-bold bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] hover:from-[hsl(var(--hot-pink))/90] hover:to-[hsl(var(--bright-orange))/90] shadow-2xl\"\n                >\n                  <Sparkles className=\"h-6 w-6 mr-3\" />\n                  {analyzeIdeaMutation.isPending ? \"Analyzing Reddit Discussions...\" : \"🚀 Start Analysis\"}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Loading States */}\n      {analyzeIdeaMutation.isPending && (\n        <Card className=\"mt-8 border-2 border-[hsl(var(--bright-orange))/20] shadow-2xl bg-gradient-to-br from-card to-[hsl(var(--bright-orange))/5]\">\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4 p-6 bg-muted/50 rounded-xl\">\n              <div className=\"flex items-center gap-3 text-lg\">\n                <div className=\"h-3 w-3 bg-primary rounded-full animate-pulse\"></div>\n                AI is identifying relevant subreddits and communities...\n              </div>\n              <div className=\"flex items-center gap-3 text-lg\">\n                <div className=\"h-3 w-3 bg-[hsl(var(--neon-green))] rounded-full animate-pulse\"></div>\n                Analyzing discussions about \"{idea.slice(0, 50)}...\"\n              </div>\n              <div className=\"flex items-center gap-3 text-lg\">\n                <div className=\"h-3 w-3 bg-[hsl(var(--hot-pink))] rounded-full animate-pulse\"></div>\n                Extracting pain points and sentiment analysis...\n              </div>\n              <div className=\"flex items-center gap-3 text-lg\">\n                <div className=\"h-3 w-3 bg-[hsl(var(--bright-orange))] rounded-full animate-pulse\"></div>\n                Generating app ideas and market insights...\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Information Preview */}\n      {idea && !showEmailCapture && !analyzeIdeaMutation.isPending && !analyzeIdeaMutation.isSuccess && (\n        <Card className=\"mt-8 border-2 border-primary/20 shadow-xl\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4 p-6 bg-muted/30 rounded-xl\">\n              <p className=\"text-lg font-semibold\">🤖 AI will automatically research:</p>\n              <div className=\"flex gap-3 flex-wrap\">\n                <Badge variant=\"secondary\" className=\"text-base py-2 px-4\">Relevant subreddits</Badge>\n                <Badge variant=\"secondary\" className=\"text-base py-2 px-4\">Keywords & topics</Badge>\n                <Badge variant=\"secondary\" className=\"text-base py-2 px-4\">Pain points & frustrations</Badge>\n                <Badge variant=\"secondary\" className=\"text-base py-2 px-4\">Solution requests</Badge>\n                <Badge variant=\"secondary\" className=\"text-base py-2 px-4\">Market sentiment</Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Research areas automatically selected based on your idea and target audience\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Success State */}\n      {analyzeIdeaMutation.isSuccess && (\n        <Card className=\"mt-8 border-2 border-[hsl(var(--neon-green))] shadow-2xl bg-gradient-to-br from-card to-[hsl(var(--neon-green))/5]\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4 p-6 bg-[hsl(var(--neon-green))/10] rounded-xl border border-[hsl(var(--neon-green))/20]\">\n              <p className=\"text-xl font-bold text-[hsl(var(--neon-green))]\">✅ Analysis Complete!</p>\n              <p className=\"text-lg text-muted-foreground\">\n                Check the dashboard below for detailed insights about your startup idea.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}","size_bytes":21923},"client/src/components/sentiment-chart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend, BarChart, Bar, XAxis, YAxis, CartesianGrid } from \"recharts\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { TrendingUp, TrendingDown, Minus } from \"lucide-react\"\n\ninterface SentimentChartProps {\n  sentimentData?: Array<{\n    value: number;\n    name: string;\n    color: string;\n    description: string;\n  }>;\n}\n\nexport function SentimentChart({ sentimentData: propSentimentData }: SentimentChartProps) {\n  const sentimentData = propSentimentData || [\n    { \n      name: \"Enthusiastic\", \n      value: 45, \n      color: \"hsl(var(--chart-2))\",\n      description: \"Users excited about solutions and expressing strong interest\"\n    },\n    { \n      name: \"Curious/Mixed\", \n      value: 35, \n      color: \"hsl(var(--chart-3))\",\n      description: \"Users asking questions, comparing options, or expressing moderate interest\"\n    },\n    { \n      name: \"Frustrated\", \n      value: 20, \n      color: \"hsl(var(--destructive))\",\n      description: \"Users complaining about current solutions or expressing dissatisfaction\"\n    },\n  ]\n\n  const timelineData = [\n    { time: \"Jan\", positive: 42, negative: 18, neutral: 40 },\n    { time: \"Feb\", positive: 48, negative: 15, neutral: 37 },\n    { time: \"Mar\", positive: 45, negative: 20, neutral: 35 },\n    { time: \"Apr\", positive: 52, negative: 12, neutral: 36 },\n    { time: \"May\", positive: 46, negative: 19, neutral: 35 },\n    { time: \"Jun\", positive: 49, negative: 16, neutral: 35 },\n  ]\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-popover border border-popover-border rounded-md p-3 shadow-md\">\n          <p className=\"font-medium\">{`${label}: ${payload[0].value}%`}</p>\n        </div>\n      )\n    }\n    return null\n  }\n\n  const renderSentimentIcon = (sentiment: string) => {\n    switch (sentiment.toLowerCase()) {\n      case \"enthusiastic\":\n        return <TrendingUp className=\"h-4 w-4 text-chart-2\" />\n      case \"frustrated\":\n        return <TrendingDown className=\"h-4 w-4 text-destructive\" />\n      default:\n        return <Minus className=\"h-4 w-4 text-chart-3\" />\n    }\n  }\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Sentiment Distribution</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[300px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={sentimentData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={100}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {sentimentData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip content={<CustomTooltip />} />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"space-y-3 mt-4\">\n            {sentimentData.map((item) => (\n              <div \n                key={item.name} \n                className=\"flex items-start gap-3 p-2 rounded-md bg-muted/30\"\n                data-testid={`sentiment-${item.name.toLowerCase().replace(/[^a-z]/g, '')}`}\n              >\n                <div className=\"flex items-center gap-2 min-w-0\">\n                  {renderSentimentIcon(item.name)}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium text-sm\">{item.name}</span>\n                      <span className=\"text-sm font-semibold\">{item.value}%</span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{item.description}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Sentiment Trends</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"timeline\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"timeline\" data-testid=\"tab-timeline\">Timeline</TabsTrigger>\n              <TabsTrigger value=\"breakdown\" data-testid=\"tab-breakdown\">Breakdown</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"timeline\">\n              <div className=\"h-[250px] mt-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={timelineData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"positive\" stackId=\"a\" fill=\"hsl(var(--chart-2))\" />\n                    <Bar dataKey=\"neutral\" stackId=\"a\" fill=\"hsl(var(--chart-3))\" />\n                    <Bar dataKey=\"negative\" stackId=\"a\" fill=\"hsl(var(--destructive))\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </TabsContent>\n            <TabsContent value=\"breakdown\">\n              <div className=\"space-y-4 mt-4\">\n                {sentimentData.map((item) => (\n                  <div key={item.name} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {renderSentimentIcon(item.name)}\n                      <span className=\"font-medium\">{item.name}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-semibold\">{item.value}%</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {Math.floor((item.value / 100) * 2847)} posts\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":6334},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"reddit-validator-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1586},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useTheme } from \"./theme-provider\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  )\n}","size_bytes":660},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { MetricsOverview } from \"@/components/metrics-overview\"\nimport { SentimentChart } from \"@/components/sentiment-chart\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { TrendingUp, BarChart3, PieChart } from \"lucide-react\"\n\nexport default function Analytics() {\n  return (\n    <div className=\"space-y-8 p-6\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"page-title\">Analytics Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Deep dive into sentiment analysis and discussion trends\n        </p>\n      </div>\n\n      <MetricsOverview />\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Discussions</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">2,847</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across 15 subreddits\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Engagement Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">68%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +5% from last analysis\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Sentiment Score</CardTitle>\n            <PieChart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">7.2/10</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Mostly positive discussions\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <SentimentChart />\n    </div>\n  )\n}","size_bytes":2339},"client/src/pages/dashboard.tsx":{"content":"import { SearchInterface } from \"@/components/search-interface\";\nimport { UpgradeCTA } from \"@/components/upgrade-cta\";\nimport { PremiumBadge } from \"@/components/premium-badge\";\nimport { usePremium } from \"@/contexts/premium-context\";\n\nexport default function Dashboard() {\n  const { isPremium } = usePremium();\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section with Gradient Background */}\n      <div className=\"relative bg-gradient-to-br from-primary/10 via-background to-[hsl(var(--hot-pink))/10] py-8 sm:py-16 lg:py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-[hsl(var(--primary))/5] to-[hsl(var(--neon-green))/5]\"></div>\n        <div className=\"relative max-w-6xl mx-auto text-center space-y-4 sm:space-y-6 lg:space-y-8\">\n          <div className=\"space-y-6\">\n            <h1 className=\"text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold tracking-tight\" data-testid=\"page-title\">\n              Stop guessing.{\" \"}\n              <span className=\"bg-gradient-to-r from-primary via-[hsl(var(--hot-pink))] to-[hsl(var(--neon-green))] bg-clip-text text-transparent\">\n                Validate your startup idea\n              </span>{\" \"}\n              with real user evidence.\n            </h1>\n            \n            {/* Premium Status Banner */}\n            {isPremium ? (\n              <div className=\"flex items-center justify-center gap-2\">\n                <div className=\"bg-gradient-to-r from-[hsl(var(--neon-green))]/10 to-[hsl(var(--neon-green))]/5 border border-[hsl(var(--neon-green))]/20 rounded-full px-4 py-2\">\n                  <span className=\"text-sm font-medium text-[hsl(var(--neon-green))]\">\n                    🚀 Premium Access Active - All Features Unlocked!\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-center\">\n                <UpgradeCTA text=\"Unlock Premium Analysis\" size=\"lg\" />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <SearchInterface />\n      \n      {/* Social proof - positioned for optimal credibility building */}\n      <div className=\"py-12 px-2 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <div className=\"flex flex-col sm:flex-row justify-center items-center gap-4 sm:gap-8 opacity-80\">\n            <div className=\"text-sm font-medium text-muted-foreground\">Trusted by founders at</div>\n            <div className=\"flex flex-wrap items-center justify-center gap-3 sm:gap-6\">\n              <div className=\"px-3 py-1 border border-primary/20 rounded text-xs font-medium bg-primary/5\">YC Startups</div>\n              <div className=\"px-3 py-1 border border-[hsl(var(--neon-green))/20] rounded text-xs font-medium bg-[hsl(var(--neon-green))/5]\">Indie Hackers</div>\n              <div className=\"px-3 py-1 border border-[hsl(var(--hot-pink))/20] rounded text-xs font-medium bg-[hsl(var(--hot-pink))/5]\">Product Hunt</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* What you'll get section */}\n      <div className=\"py-24 px-4 sm:px-6 lg:px-8 bg-gradient-to-b from-background to-primary/5\">\n        <div className=\"max-w-6xl mx-auto space-y-12\">\n          <div className=\"text-center space-y-6\">\n            <h2 className=\"text-4xl sm:text-5xl font-bold bg-gradient-to-r from-foreground via-primary to-[hsl(var(--hot-pink))] bg-clip-text text-transparent\">\n              What you'll get\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Real insights from actual user discussions and market data\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {/* Evidence chips */}\n            <div className=\"relative group bg-card border-2 border-primary/20 hover:border-primary/50 rounded-2xl p-6 space-y-4 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2\">\n              <div className=\"absolute top-4 right-4 flex items-center gap-2\">\n                <PremiumBadge variant=\"sparkles\" />\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-16 w-16 bg-gradient-to-br from-primary to-primary/70 rounded-2xl flex items-center justify-center shadow-lg\">\n                  <span className=\"text-2xl\">📊</span>\n                </div>\n                <h3 className=\"text-xl font-bold\">Evidence chips</h3>\n                <p className=\"text-muted-foreground\">\n                  e.g., <span className=\"text-primary font-semibold\">23 Reddit threads</span> • <span className=\"text-[hsl(var(--neon-green))] font-semibold\">12 reviews</span> • <span className=\"text-[hsl(var(--hot-pink))] font-semibold\">41 keywords</span>\n                </p>\n              </div>\n              <div className=\"pt-4 border-t border-border/50\">\n                {!isPremium ? (\n                  <UpgradeCTA variant=\"card\" feature=\"exact source counts and analysis\" />\n                ) : (\n                  <p className=\"text-sm font-medium text-[hsl(var(--neon-green))]\">\n                    ✅ Premium Access: Full numbers & playbook included\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Problem clusters */}\n            <div className=\"relative group bg-card border-2 border-[hsl(var(--hot-pink))/20] hover:border-[hsl(var(--hot-pink))/50] rounded-2xl p-6 space-y-4 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2\">\n              <div className=\"absolute top-4 right-4 flex items-center gap-2\">\n                <PremiumBadge variant=\"crown\" />\n                <div className=\"w-2 h-2 bg-[hsl(var(--hot-pink))] rounded-full animate-pulse\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-16 w-16 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--hot-pink))/70] rounded-2xl flex items-center justify-center shadow-lg\">\n                  <span className=\"text-2xl\">💬</span>\n                </div>\n                <h3 className=\"text-xl font-bold\">Problem clusters</h3>\n                <p className=\"text-muted-foreground\">\n                  Top pains & solution requests (with <span className=\"text-[hsl(var(--hot-pink))] font-semibold\">2 linked quotes</span>)\n                </p>\n              </div>\n              <div className=\"pt-4 border-t border-border/50\">\n                {!isPremium ? (\n                  <UpgradeCTA variant=\"card\" feature=\"complete problem analysis with quotes\" />\n                ) : (\n                  <p className=\"text-sm font-medium text-[hsl(var(--neon-green))]\">\n                    ✅ Premium Access: Full analysis with linked quotes\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Market signals */}\n            <div className=\"relative group bg-card border-2 border-[hsl(var(--neon-green))/20] hover:border-[hsl(var(--neon-green))/50] rounded-2xl p-6 space-y-4 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2\">\n              <div className=\"absolute top-4 right-4 flex items-center gap-2\">\n                <PremiumBadge variant=\"lock\" />\n                <div className=\"w-2 h-2 bg-[hsl(var(--neon-green))] rounded-full animate-pulse\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-16 w-16 bg-gradient-to-br from-[hsl(var(--neon-green))] to-[hsl(var(--neon-green))/70] rounded-2xl flex items-center justify-center shadow-lg\">\n                  <span className=\"text-2xl\">📈</span>\n                </div>\n                <h3 className=\"text-xl font-bold\">Market signals</h3>\n                <p className=\"text-muted-foreground\">\n                  <span className=\"text-[hsl(var(--neon-green))] font-semibold\">12-month</span> trend sparkline (<span className=\"text-primary font-semibold\">24 months</span> in paid)\n                </p>\n              </div>\n              <div className=\"pt-4 border-t border-border/50\">\n                {!isPremium ? (\n                  <UpgradeCTA variant=\"card\" feature=\"24-month trends and exact volumes\" />\n                ) : (\n                  <p className=\"text-sm font-medium text-[hsl(var(--neon-green))]\">\n                    ✅ Premium Access: 24-month data with exact numbers\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Action plan */}\n            <div className=\"relative group bg-card border-2 border-[hsl(var(--bright-orange))/20] hover:border-[hsl(var(--bright-orange))/50] rounded-2xl p-6 space-y-4 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2\">\n              <div className=\"absolute top-4 right-4 flex items-center gap-2\">\n                <PremiumBadge variant=\"sparkles\" />\n                <div className=\"w-2 h-2 bg-[hsl(var(--bright-orange))] rounded-full animate-pulse\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-16 w-16 bg-gradient-to-br from-[hsl(var(--bright-orange))] to-[hsl(var(--bright-orange))/70] rounded-2xl flex items-center justify-center shadow-lg\">\n                  <span className=\"text-2xl\">🚀</span>\n                </div>\n                <h3 className=\"text-xl font-bold\">Action plan</h3>\n                <p className=\"text-muted-foreground\">\n                  <span className=\"text-[hsl(var(--bright-orange))] font-semibold\">90-day GTM</span> + risks (full in paid)\n                </p>\n              </div>\n              <div className=\"pt-4 border-t border-border/50\">\n                {!isPremium ? (\n                  <UpgradeCTA variant=\"card\" feature=\"complete 90-day GTM plan and risk analysis\" />\n                ) : (\n                  <p className=\"text-sm font-medium text-[hsl(var(--neon-green))]\">\n                    ✅ Premium Access: Full GTM plan with risk assessment\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      {/* How it works - VIBRANT REDESIGN */}\n      <div className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-[hsl(var(--neon-green))/5] via-background to-[hsl(var(--hot-pink))/5]\">\n        <div className=\"max-w-6xl mx-auto space-y-16\">\n          <div className=\"text-center space-y-6\">\n            <h2 className=\"text-4xl sm:text-5xl font-bold bg-gradient-to-r from-foreground via-primary to-[hsl(var(--hot-pink))] bg-clip-text text-transparent\">\n              How it works\n            </h2>\n            <div className=\"space-y-3\">\n              <p className=\"text-xl text-muted-foreground\">Get validated insights in three simple steps</p>\n            </div>\n          </div>\n        \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12\">\n            <div className=\"text-center space-y-6 group\">\n              <div className=\"mx-auto w-20 h-20 bg-gradient-to-br from-primary to-[hsl(var(--neon-green))] text-white rounded-2xl flex items-center justify-center font-bold text-2xl shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                1\n              </div>\n              <div className=\"space-y-3\">\n                <h3 className=\"text-xl font-bold\">💡 Enter your idea</h3>\n                <p className=\"text-muted-foreground\">\n                  Describe your startup concept in 1-3 sentences\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-center space-y-6 group\">\n              <div className=\"mx-auto w-20 h-20 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] text-white rounded-2xl flex items-center justify-center font-bold text-2xl shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                2\n              </div>\n              <div className=\"space-y-3\">\n                <h3 className=\"text-xl font-bold\">🤖 We mine Reddit + reviews + trends</h3>\n                <p className=\"text-muted-foreground\">\n                  AI analyzes thousands of real user discussions and market signals\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-center space-y-6 group\">\n              <div className=\"mx-auto w-20 h-20 bg-gradient-to-br from-[hsl(var(--neon-green))] to-primary text-white rounded-2xl flex items-center justify-center font-bold text-2xl shadow-2xl group-hover:scale-110 transition-transform duration-300\">\n                3\n              </div>\n              <div className=\"space-y-3\">\n                <h3 className=\"text-xl font-bold\">📊 You get a free report</h3>\n                <p className=\"text-muted-foreground\">\n                  Upgrade for exact volumes, CPC, CAC/LTV simulator, 24-mo trends, full sources\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Free vs Paid comparison - VIBRANT REDESIGN */}\n      <div className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-background via-[hsl(var(--bright-orange))/5] to-background\">\n        <div className=\"max-w-5xl mx-auto space-y-12\">\n          <div className=\"text-center space-y-6\">\n            <h2 className=\"text-4xl sm:text-5xl font-bold bg-gradient-to-r from-foreground via-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] bg-clip-text text-transparent\">\n              Free vs Paid\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">Make the value gap obvious</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Free column - VIBRANT */}\n            <div className=\"relative bg-card border-2 border-muted-foreground/20 rounded-2xl p-8 space-y-6 hover:shadow-2xl transition-all duration-300\">\n              <div className=\"text-center space-y-4\">\n                <h3 className=\"text-2xl font-bold text-muted-foreground\">Free</h3>\n                <p className=\"text-4xl font-bold\">$0</p>\n              </div>\n              <ul className=\"space-y-4 text-base\">\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--neon-green))] to-[hsl(var(--neon-green))/70] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  2–3 full pain clusters (with 2 linked quotes)\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--neon-green))] to-[hsl(var(--neon-green))/70] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  Trend sparkline (bands, no exact numbers)\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--neon-green))] to-[hsl(var(--neon-green))/70] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  1 competitor row (features summary)\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--neon-green))] to-[hsl(var(--neon-green))/70] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  Personas light + roadmap headings\n                </li>\n              </ul>\n            </div>\n\n            {/* Paid column - VIBRANT PREMIUM */}\n            <div className=\"relative bg-gradient-to-br from-card to-primary/5 border-4 border-primary rounded-2xl p-8 space-y-6 shadow-2xl hover:shadow-[0_0_50px_rgba(59,130,246,0.3)] transition-all duration-300 transform hover:scale-105\">\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                <div className=\"bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] text-white px-6 py-2 rounded-full text-sm font-bold shadow-lg animate-pulse\">\n                  ⭐ Most Popular\n                </div>\n              </div>\n              <div className=\"text-center space-y-4\">\n                <h3 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-[hsl(var(--neon-green))] bg-clip-text text-transparent\">Paid</h3>\n                <p className=\"text-5xl font-bold bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] bg-clip-text text-transparent\">$39</p>\n              </div>\n              <ul className=\"space-y-4 text-base\">\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <span className=\"font-medium\">Exact search volumes, CPC, difficulty + 24-mo trend</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <span className=\"font-medium\">CAC/LTV simulator + payback estimate</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <span className=\"font-medium\">Full competitor matrix (pricing, sentiment, differentiators)</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <span className=\"font-medium\">90-day GTM plan + risks & kill-criteria</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <svg className=\"h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <span className=\"font-medium\">All sources & exports</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* FAQ Section - VIBRANT REDESIGN */}\n      <div className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-[hsl(var(--hot-pink))/5] via-background to-[hsl(var(--neon-green))/5]\">\n        <div className=\"max-w-4xl mx-auto space-y-12\">\n          <div className=\"text-center space-y-6\">\n            <h2 className=\"text-4xl sm:text-5xl font-bold bg-gradient-to-r from-foreground via-[hsl(var(--neon-green))] to-[hsl(var(--hot-pink))] bg-clip-text text-transparent\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">Everything you need to know</p>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div className=\"bg-card border-2 border-primary/20 rounded-xl p-6 space-y-4 hover:border-primary/50 hover:shadow-xl transition-all duration-300\">\n              <h3 className=\"text-lg font-bold flex items-center gap-3\">\n                <span className=\"w-8 h-8 bg-gradient-to-br from-primary to-[hsl(var(--neon-green))] rounded-full flex items-center justify-center text-white font-bold text-sm\">?</span>\n                Why not show all numbers for free?\n              </h3>\n              <p className=\"text-muted-foreground pl-11\">\n                We keep costly data pulls for paid; free still shows real quotes & trend signals.\n              </p>\n            </div>\n            \n            <div className=\"bg-card border-2 border-[hsl(var(--hot-pink))/20] rounded-xl p-6 space-y-4 hover:border-[hsl(var(--hot-pink))]/50 hover:shadow-xl transition-all duration-300\">\n              <h3 className=\"text-lg font-bold flex items-center gap-3\">\n                <span className=\"w-8 h-8 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] rounded-full flex items-center justify-center text-white font-bold text-sm\">📊</span>\n                What sources?\n              </h3>\n              <p className=\"text-muted-foreground pl-11\">\n                Reddit + public reviews + Trends; links included.\n              </p>\n            </div>\n            \n            <div className=\"bg-card border-2 border-[hsl(var(--neon-green))]/20 rounded-xl p-6 space-y-4 hover:border-[hsl(var(--neon-green))]/50 hover:shadow-xl transition-all duration-300\">\n              <h3 className=\"text-lg font-bold flex items-center gap-3\">\n                <span className=\"w-8 h-8 bg-gradient-to-br from-[hsl(var(--neon-green))] to-primary rounded-full flex items-center justify-center text-white font-bold text-sm\">🔒</span>\n                Is my idea private?\n              </h3>\n              <p className=\"text-muted-foreground pl-11\">\n                We don't share your prompt; excerpts are public-source quotes only.\n              </p>\n            </div>\n            \n            <div className=\"bg-card border-2 border-[hsl(var(--bright-orange))]/20 rounded-xl p-6 space-y-4 hover:border-[hsl(var(--bright-orange))]/50 hover:shadow-xl transition-all duration-300\">\n              <h3 className=\"text-lg font-bold flex items-center gap-3\">\n                <span className=\"w-8 h-8 bg-gradient-to-br from-[hsl(var(--bright-orange))] to-[hsl(var(--hot-pink))] rounded-full flex items-center justify-center text-white font-bold text-sm\">💰</span>\n                Refunds?\n              </h3>\n              <p className=\"text-muted-foreground pl-11\">\n                If the paid report lacks enough data to decide, we'll make it right.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer trust & compliance */}\n      <div className=\"max-w-4xl mx-auto text-center space-y-4 py-8 border-t\">\n        <p className=\"text-sm text-muted-foreground\">\n          Stripe-secure checkout, wallets supported\n        </p>\n        <div className=\"flex justify-center gap-6 text-xs text-muted-foreground\">\n          <a href=\"#\" className=\"hover:text-foreground\">Privacy</a>\n          <a href=\"#\" className=\"hover:text-foreground\">Terms</a>\n          <a href=\"#\" className=\"hover:text-foreground\">Contact</a>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":25132},"client/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Home, Search } from \"lucide-react\"\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">Page Not Found</CardTitle>\n          <p className=\"text-muted-foreground\">\n            The page you're looking for doesn't exist or may have been moved.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-2 justify-center\">\n            <Button asChild data-testid=\"button-home\">\n              <Link href=\"/\">\n                <Home className=\"h-4 w-4 mr-2\" />\n                Go Home\n              </Link>\n            </Button>\n            <Button variant=\"outline\" asChild data-testid=\"button-search\">\n              <Link href=\"/\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                Start Search\n              </Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":1243},"client/src/components/examples/AppIdeasGenerator.tsx":{"content":"import { AppIdeasGenerator } from '../app-ideas-generator'\n\nexport default function AppIdeasGeneratorExample() {\n  return <AppIdeasGenerator />\n}","size_bytes":145},"client/src/components/examples/MetricsOverview.tsx":{"content":"import { MetricsOverview } from '../metrics-overview'\n\nexport default function MetricsOverviewExample() {\n  return <MetricsOverview />\n}","size_bytes":136},"client/src/components/examples/PainPointsDisplay.tsx":{"content":"import { PainPointsDisplay } from '../pain-points-display'\n\nexport default function PainPointsDisplayExample() {\n  return <PainPointsDisplay />\n}","size_bytes":145},"client/src/components/examples/SearchInterface.tsx":{"content":"import { SearchInterface } from '../search-interface'\n\nexport default function SearchInterfaceExample() {\n  return <SearchInterface />\n}","size_bytes":136},"client/src/components/examples/SentimentChart.tsx":{"content":"import { SentimentChart } from '../sentiment-chart'\n\nexport default function SentimentChartExample() {\n  return <SentimentChart />\n}","size_bytes":132},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/methodology-modal.tsx":{"content":"import { Brain, Database, TrendingUp, Users, BarChart3 } from \"lucide-react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\n\ninterface MethodologyModalProps {\n  trigger?: React.ReactNode\n}\n\nexport function MethodologyModal({ trigger }: MethodologyModalProps) {\n  const defaultTrigger = (\n    <button \n      className=\"text-primary hover:text-primary/80 underline underline-offset-4 font-medium text-sm transition-colors duration-200\"\n      data-testid=\"link-methodology\"\n    >\n      Learn about our methodology →\n    </button>\n  )\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" data-testid=\"modal-methodology\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-primary via-[hsl(var(--hot-pink))] to-[hsl(var(--neon-green))] bg-clip-text text-transparent\">\n            Our AI-Powered Analysis Methodology\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-8 pt-4\">\n          {/* Overview */}\n          <div className=\"space-y-4\">\n            <p className=\"text-lg text-muted-foreground leading-relaxed\">\n              Our startup validation tool combines advanced AI with comprehensive data mining to provide evidence-based insights. \n              Here's exactly how we analyze your startup idea:\n            </p>\n          </div>\n\n          {/* Process Steps */}\n          <div className=\"grid gap-6\">\n            {/* Step 1: Data Collection */}\n            <div className=\"flex gap-4 p-6 border border-border/50 rounded-lg bg-gradient-to-r from-primary/5 to-[hsl(var(--neon-green))/5]\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-[hsl(var(--neon-green))] rounded-xl flex items-center justify-center\">\n                  <Database className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold\">1. Multi-Source Data Mining</h3>\n                <p className=\"text-muted-foreground\">\n                  We systematically collect data from Reddit discussions, online reviews, search trends, and public forums \n                  related to your startup domain. Our AI identifies relevant conversations, pain points, and market signals \n                  across thousands of data points.\n                </p>\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  <span className=\"px-2 py-1 bg-primary/10 text-primary text-xs rounded\">Reddit Posts & Comments</span>\n                  <span className=\"px-2 py-1 bg-[hsl(var(--neon-green))/10] text-[hsl(var(--neon-green))] text-xs rounded\">Product Reviews</span>\n                  <span className=\"px-2 py-1 bg-[hsl(var(--hot-pink))/10] text-[hsl(var(--hot-pink))] text-xs rounded\">Search Trends</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Step 2: AI Analysis */}\n            <div className=\"flex gap-4 p-6 border border-border/50 rounded-lg bg-gradient-to-r from-[hsl(var(--hot-pink))/5] to-[hsl(var(--bright-orange))/5]\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] rounded-xl flex items-center justify-center\">\n                  <Brain className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold\">2. Advanced AI Processing</h3>\n                <p className=\"text-muted-foreground\">\n                  Using OpenAI's latest models, we perform sentiment analysis, extract key themes, identify pain points, \n                  and analyze market demand patterns. Our AI understands context, emotion, and user intent to provide \n                  meaningful insights rather than just keyword matching.\n                </p>\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  <span className=\"px-2 py-1 bg-[hsl(var(--hot-pink))/10] text-[hsl(var(--hot-pink))] text-xs rounded\">Sentiment Analysis</span>\n                  <span className=\"px-2 py-1 bg-[hsl(var(--bright-orange))/10] text-[hsl(var(--bright-orange))] text-xs rounded\">Theme Extraction</span>\n                  <span className=\"px-2 py-1 bg-primary/10 text-primary text-xs rounded\">Context Understanding</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Step 3: Market Intelligence */}\n            <div className=\"flex gap-4 p-6 border border-border/50 rounded-lg bg-gradient-to-r from-[hsl(var(--neon-green))/5] to-primary/5\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-[hsl(var(--neon-green))] to-primary rounded-xl flex items-center justify-center\">\n                  <TrendingUp className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold\">3. Market Signal Analysis</h3>\n                <p className=\"text-muted-foreground\">\n                  We analyze 12-month trends to identify growing demand, seasonal patterns, and competitive landscape. \n                  Our system correlates discussion volume, sentiment changes, and user engagement to predict market timing \n                  and opportunity size.\n                </p>\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  <span className=\"px-2 py-1 bg-[hsl(var(--neon-green))/10] text-[hsl(var(--neon-green))] text-xs rounded\">Demand Trends</span>\n                  <span className=\"px-2 py-1 bg-primary/10 text-primary text-xs rounded\">Competitive Analysis</span>\n                  <span className=\"px-2 py-1 bg-[hsl(var(--bright-orange))/10] text-[hsl(var(--bright-orange))] text-xs rounded\">Market Timing</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Step 4: Insight Generation */}\n            <div className=\"flex gap-4 p-6 border border-border/50 rounded-lg bg-gradient-to-r from-[hsl(var(--bright-orange))/5] to-[hsl(var(--hot-pink))/5]\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-[hsl(var(--bright-orange))] to-[hsl(var(--hot-pink))] rounded-xl flex items-center justify-center\">\n                  <BarChart3 className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold\">4. Actionable Insights & Recommendations</h3>\n                <p className=\"text-muted-foreground\">\n                  Finally, we synthesize all findings into concrete recommendations including pain point clusters, \n                  market entry strategies, feature priorities, and go-to-market plans. Each insight is backed by \n                  specific evidence and linked to source discussions.\n                </p>\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  <span className=\"px-2 py-1 bg-[hsl(var(--bright-orange))/10] text-[hsl(var(--bright-orange))] text-xs rounded\">GTM Strategy</span>\n                  <span className=\"px-2 py-1 bg-[hsl(var(--hot-pink))/10] text-[hsl(var(--hot-pink))] text-xs rounded\">Feature Prioritization</span>\n                  <span className=\"px-2 py-1 bg-[hsl(var(--neon-green))/10] text-[hsl(var(--neon-green))] text-xs rounded\">Evidence Links</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Quality Assurance */}\n          <div className=\"border-t border-border/50 pt-6\">\n            <div className=\"flex gap-4 p-4 bg-muted/30 rounded-lg\">\n              <Users className=\"h-8 w-8 text-primary flex-shrink-0\" />\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold\">Quality & Reliability</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  All analysis is based on real user discussions and validated market data. We focus on authentic signals \n                  rather than vanity metrics, ensuring actionable insights for startup founders making critical decisions.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}","size_bytes":8608},"client/src/pages/results.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useLocation } from \"wouter\"\nimport { Button } from \"@/components/ui/button\"\nimport { ArrowLeft, Download, Share2 } from \"lucide-react\"\nimport { ScoringCards } from \"@/components/scoring-cards\"\nimport { MetricsOverview } from \"@/components/metrics-overview\"\nimport { SentimentChart } from \"@/components/sentiment-chart\"\nimport { PainPointsDisplay } from \"@/components/pain-points-display\"\nimport { AppIdeasGenerator } from \"@/components/app-ideas-generator\"\nimport { GoogleTrends } from \"@/components/google-trends\"\nimport { ICPDisplay } from \"@/components/icp-display\"\nimport { ProblemStatements } from \"@/components/problem-statements\"\nimport { FinancialRisks } from \"@/components/financial-risks\"\nimport { CompetitorsAnalysis } from \"@/components/competitors-analysis\"\nimport { RevenueModels } from \"@/components/revenue-models\"\nimport { MethodologyModal } from \"@/components/methodology-modal\"\nimport { PremiumBadge } from \"@/components/premium-badge\"\nimport { UpgradeCTA } from \"@/components/upgrade-cta\"\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\"\nimport { Crown, Sparkles, TrendingUp, Lock } from \"lucide-react\"\nimport { usePremium } from \"@/contexts/premium-context\"\nimport type { AnalysisResponse } from \"@shared/schema\"\n\nexport default function Results() {\n  const [location, setLocation] = useLocation()\n  const [analysisResults, setAnalysisResults] = useState<AnalysisResponse | null>(null)\n  const { isPremium } = usePremium()\n\n  useEffect(() => {\n    // Get results from sessionStorage (set by dashboard after analysis)\n    const savedResults = sessionStorage.getItem('analysis-results')\n    if (savedResults) {\n      try {\n        const parsedResults = JSON.parse(savedResults)\n        setAnalysisResults(parsedResults)\n      } catch (error) {\n        console.error('Failed to parse analysis results:', error)\n        // Redirect back to dashboard if no valid results\n        setLocation('/')\n      }\n    } else {\n      // Redirect to dashboard if no results found\n      setLocation('/')\n    }\n  }, [setLocation])\n\n  if (!analysisResults) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin h-8 w-8 border-2 border-primary border-t-transparent rounded-full mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading your analysis results...</p>\n        </div>\n      </div>\n    )\n  }\n\n  const handleNewAnalysis = () => {\n    sessionStorage.removeItem('analysis-results')\n    setLocation('/')\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header with navigation */}\n      <div className=\"sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setLocation('/')}\n                data-testid=\"button-back-home\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                New Analysis\n              </Button>\n              <div className=\"hidden sm:block h-6 border-l border-border\"></div>\n              <h1 className=\"text-xl font-semibold\" data-testid=\"results-page-title\">\n                Startup Validation Report\n                <PremiumBadge />\n              </h1>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share\">\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Share\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-download\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button onClick={handleNewAnalysis} size=\"sm\" data-testid=\"button-analyze-new\">\n                Analyze New Idea\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Free Report Banner */}\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <Card className=\"bg-gradient-to-r from-primary/5 to-[hsl(var(--hot-pink))/5] border-primary/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between flex-wrap gap-4\">\n              <div className=\"flex items-center gap-3\">\n                <Crown className=\"h-5 w-5 text-primary\" />\n                <div>\n                  <h3 className=\"font-semibold\">Free Analysis Report</h3>\n                  <p className=\"text-sm text-muted-foreground\">Upgrade to Premium for deeper insights & unlimited reports</p>\n                </div>\n              </div>\n              <UpgradeCTA size=\"sm\" text=\"Upgrade to Premium - $39\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Results content */}\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\" data-testid=\"analysis-results\">\n        <div className=\"space-y-8\">\n          {/* Executive Summary */}\n          <div className=\"bg-gradient-to-r from-primary/10 to-[hsl(var(--hot-pink))/10] rounded-2xl p-6 border border-primary/20\">\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-bold\">Executive Summary</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">\n                    {analysisResults.overall_score}/10\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-[hsl(var(--hot-pink))]\">\n                    {analysisResults.viability_score}/10\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Viability Score</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-[hsl(var(--neon-green))]\">\n                    {analysisResults.total_posts_analyzed}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Posts Analyzed</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Scoring Cards */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Market Validation Scores</h2>\n            <ScoringCards \n              overallScore={analysisResults.overall_score || 0} \n              viabilityScore={analysisResults.viability_score || 0} \n            />\n          </div>\n\n          {/* Metrics Overview */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Key Metrics</h2>\n            <MetricsOverview analysisData={analysisResults} />\n          </div>\n\n          {/* Sentiment Analysis */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2\">\n              <h2 className=\"text-2xl font-bold\">Market Sentiment Analysis</h2>\n              <PremiumBadge />\n            </div>\n            {isPremium ? (\n              <SentimentChart sentimentData={analysisResults.sentiment_data} />\n            ) : (\n              <Card className=\"relative\">\n                <CardContent className=\"p-8 text-center space-y-4\">\n                  <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-[hsl(var(--hot-pink))]/10 to-[hsl(var(--bright-orange))]/10 rounded-full flex items-center justify-center\">\n                    <Lock className=\"h-6 w-6 text-[hsl(var(--hot-pink))]\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">Detailed Sentiment Analysis</h3>\n                    <p className=\"text-muted-foreground\">Unlock comprehensive sentiment breakdown, emotional triggers, and user satisfaction metrics</p>\n                  </div>\n                  <UpgradeCTA text=\"Unlock for $39\" size=\"sm\" />\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Pain Points */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Pain Points Discovered</h2>\n            <PainPointsDisplay painPoints={analysisResults.pain_points} />\n          </div>\n\n          {/* Premium Upgrade CTA */}\n          <div className=\"my-8\">\n            <Card className=\"bg-gradient-to-r from-[hsl(var(--hot-pink))/5] to-primary/5 border-primary/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <Sparkles className=\"h-6 w-6 text-primary\" />\n                    <h3 className=\"text-xl font-semibold\">Want Deeper Market Insights?</h3>\n                  </div>\n                  <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                    Upgrade to Premium for advanced competitor analysis, detailed financial projections, \n                    market sizing data, and unlimited validation reports.\n                  </p>\n                  <UpgradeCTA text=\"Upgrade to Premium - $39/month\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* App Ideas */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2\">\n              <h2 className=\"text-2xl font-bold\">Generated App Ideas</h2>\n              <PremiumBadge />\n            </div>\n            <AppIdeasGenerator appIdeas={analysisResults.app_ideas} />\n          </div>\n\n          {/* Google Trends */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2\">\n              <h2 className=\"text-2xl font-bold\">Google Trends Analysis</h2>\n              <PremiumBadge />\n            </div>\n            {isPremium ? (\n              <GoogleTrends trends={analysisResults.google_trends} />\n            ) : (\n              <Card className=\"relative\">\n                <CardContent className=\"p-8 text-center space-y-4\">\n                  <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-[hsl(var(--hot-pink))]/10 to-[hsl(var(--bright-orange))]/10 rounded-full flex items-center justify-center\">\n                    <Lock className=\"h-6 w-6 text-[hsl(var(--hot-pink))]\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">Google Trends & Search Volume</h3>\n                    <p className=\"text-muted-foreground\">Access real search volumes, trend data, and seasonal patterns for your market</p>\n                  </div>\n                  <UpgradeCTA text=\"Unlock for $39\" size=\"sm\" />\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Ideal Customer Profile */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Ideal Customer Profile (ICP)</h2>\n            <ICPDisplay icp={analysisResults.icp} />\n          </div>\n\n          {/* Problem Statements */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Problem Statements</h2>\n            <ProblemStatements problemStatements={analysisResults.problem_statements} />\n          </div>\n\n          {/* Financial Risks */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2\">\n              <h2 className=\"text-2xl font-bold\">Financial Risk Assessment</h2>\n              <PremiumBadge />\n            </div>\n            {isPremium ? (\n              <FinancialRisks risks={analysisResults.financial_risks} />\n            ) : (\n              <Card className=\"relative\">\n                <CardContent className=\"p-8 text-center space-y-4\">\n                  <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-[hsl(var(--hot-pink))]/10 to-[hsl(var(--bright-orange))]/10 rounded-full flex items-center justify-center\">\n                    <Lock className=\"h-6 w-6 text-[hsl(var(--hot-pink))]\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">Financial Risk Analysis</h3>\n                    <p className=\"text-muted-foreground\">Get detailed financial projections, ROI calculations, and risk mitigation strategies</p>\n                  </div>\n                  <UpgradeCTA text=\"Unlock for $39\" size=\"sm\" />\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Competitors Analysis */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2\">\n              <h2 className=\"text-2xl font-bold\">Competitive Landscape</h2>\n              <PremiumBadge />\n            </div>\n            {isPremium ? (\n              <CompetitorsAnalysis competitors={analysisResults.competitors} />\n            ) : (\n              <Card className=\"relative\">\n                <CardContent className=\"p-8 text-center space-y-4\">\n                  <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-[hsl(var(--hot-pink))]/10 to-[hsl(var(--bright-orange))]/10 rounded-full flex items-center justify-center\">\n                    <Lock className=\"h-6 w-6 text-[hsl(var(--hot-pink))]\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">Complete Competitor Analysis</h3>\n                    <p className=\"text-muted-foreground\">Full competitive matrix, pricing analysis, and market positioning insights</p>\n                  </div>\n                  <UpgradeCTA text=\"Unlock for $39\" size=\"sm\" />\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Revenue Models */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-2\">\n              <h2 className=\"text-2xl font-bold\">Revenue Strategy & Models</h2>\n              <PremiumBadge />\n            </div>\n            {isPremium ? (\n              <RevenueModels revenueModels={analysisResults.revenue_models} />\n            ) : (\n              <Card className=\"relative\">\n                <CardContent className=\"p-8 text-center space-y-4\">\n                  <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-[hsl(var(--hot-pink))]/10 to-[hsl(var(--bright-orange))]/10 rounded-full flex items-center justify-center\">\n                    <Lock className=\"h-6 w-6 text-[hsl(var(--hot-pink))]\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">Revenue Models & Monetization</h3>\n                    <p className=\"text-muted-foreground\">Comprehensive revenue strategies, pricing models, and monetization frameworks</p>\n                  </div>\n                  <UpgradeCTA text=\"Unlock for $39\" size=\"sm\" />\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Final Premium CTA */}\n          <div className=\"mt-12 mb-8\">\n            <Card className=\"bg-gradient-to-r from-primary/10 to-[hsl(var(--neon-green))/10] border-primary/30\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center space-y-6\">\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <TrendingUp className=\"h-8 w-8 text-primary\" />\n                    <h3 className=\"text-2xl font-bold\">Ready to Validate Your Next Big Idea?</h3>\n                  </div>\n                  <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n                    Get unlimited validation reports, advanced market analysis, competitor deep-dives, \n                    and financial projections. Join thousands of successful entrepreneurs.\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                    <UpgradeCTA size=\"lg\" text=\"Start Premium - $39/month\" />\n                    <Button variant=\"outline\" onClick={handleNewAnalysis} data-testid=\"button-new-analysis\">\n                      Try Another Free Analysis\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    30-day money-back guarantee • Cancel anytime • Unlimited reports\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Methodology */}\n          <div className=\"pt-8 border-t\">\n            <MethodologyModal />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":16909},"client/src/components/competitors-analysis.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Building2, TrendingUp, TrendingDown, DollarSign } from \"lucide-react\"\nimport type { Competitor } from \"@shared/schema\"\n\ninterface CompetitorsAnalysisProps {\n  competitors: Competitor[]\n}\n\nexport function CompetitorsAnalysis({ competitors }: CompetitorsAnalysisProps) {\n  return (\n    <div className=\"grid gap-6\" data-testid=\"competitors-section\">\n      {competitors.map((competitor, index) => (\n        <Card key={index} className=\"hover-elevate\" data-testid={`competitor-${index}`}>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Building2 className=\"h-5 w-5 text-primary\" />\n                <CardTitle className=\"text-xl\" data-testid={`competitor-name-${index}`}>\n                  {competitor.name}\n                </CardTitle>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                <Badge variant=\"outline\" data-testid={`competitor-pricing-${index}`}>\n                  {competitor.pricing_model}\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Description */}\n            <div>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`competitor-description-${index}`}>\n                {competitor.description}\n              </p>\n            </div>\n\n            {/* Market Share */}\n            <div className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n              <span className=\"text-sm font-medium text-muted-foreground\">Market Share</span>\n              <Badge variant=\"secondary\" data-testid={`competitor-market-share-${index}`}>\n                {competitor.market_share}\n              </Badge>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {/* Strengths */}\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm font-medium text-green-700\">Strengths</span>\n                </div>\n                <div className=\"space-y-1\">\n                  {competitor.strengths.map((strength, strengthIndex) => (\n                    <div \n                      key={strengthIndex}\n                      className=\"flex items-start gap-2\"\n                      data-testid={`competitor-strength-${index}-${strengthIndex}`}\n                    >\n                      <div className=\"w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                      <p className=\"text-xs text-muted-foreground\">{strength}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Weaknesses */}\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                  <span className=\"text-sm font-medium text-red-700\">Weaknesses</span>\n                </div>\n                <div className=\"space-y-1\">\n                  {competitor.weaknesses.map((weakness, weaknessIndex) => (\n                    <div \n                      key={weaknessIndex}\n                      className=\"flex items-start gap-2\"\n                      data-testid={`competitor-weakness-${index}-${weaknessIndex}`}\n                    >\n                      <div className=\"w-1.5 h-1.5 bg-red-500 rounded-full mt-2 flex-shrink-0\" />\n                      <p className=\"text-xs text-muted-foreground\">{weakness}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}","size_bytes":4026},"client/src/components/financial-risks.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { AlertCircle, Shield } from \"lucide-react\"\nimport type { FinancialRisk } from \"@shared/schema\"\n\ninterface FinancialRisksProps {\n  risks: FinancialRisk[]\n}\n\nexport function FinancialRisks({ risks }: FinancialRisksProps) {\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"high\":\n        return \"bg-red-50 text-red-700 border-red-200\"\n      case \"medium\":\n        return \"bg-yellow-50 text-yellow-700 border-yellow-200\"\n      case \"low\":\n        return \"bg-green-50 text-green-700 border-green-200\"\n      default:\n        return \"bg-gray-50 text-gray-700 border-gray-200\"\n    }\n  }\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case \"high\":\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />\n      case \"medium\":\n        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\n      case \"low\":\n        return <AlertCircle className=\"h-4 w-4 text-green-500\" />\n      default:\n        return <AlertCircle className=\"h-4 w-4 text-gray-500\" />\n    }\n  }\n\n  return (\n    <div className=\"grid gap-4\" data-testid=\"financial-risks-section\">\n      {risks.map((risk, index) => (\n        <Card key={index} className=\"hover-elevate\" data-testid={`financial-risk-${index}`}>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                {getSeverityIcon(risk.severity)}\n                <CardTitle className=\"text-lg\" data-testid={`risk-type-${index}`}>\n                  {risk.risk_type}\n                </CardTitle>\n              </div>\n              <Badge \n                variant=\"outline\" \n                className={getSeverityColor(risk.severity)}\n                data-testid={`risk-severity-${index}`}\n              >\n                {risk.severity.toUpperCase()}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Description */}\n            <div>\n              <span className=\"text-sm font-medium text-muted-foreground\">Risk Description</span>\n              <p className=\"text-sm mt-1\" data-testid={`risk-description-${index}`}>\n                {risk.description}\n              </p>\n            </div>\n\n            {/* Mitigation Strategy */}\n            <div className=\"p-3 bg-secondary/30 rounded-lg border-l-4 border-l-primary\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Shield className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-sm font-medium text-primary\">Mitigation Strategy</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`risk-mitigation-${index}`}>\n                {risk.mitigation_strategy}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}","size_bytes":3027},"client/src/components/google-trends.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { TrendingUp, TrendingDown, Minus } from \"lucide-react\"\nimport type { GoogleTrend } from \"@shared/schema\"\n\ninterface GoogleTrendsProps {\n  trends: GoogleTrend[]\n}\n\nexport function GoogleTrends({ trends }: GoogleTrendsProps) {\n  const getTrendIcon = (direction: string) => {\n    switch (direction) {\n      case \"rising\":\n        return <TrendingUp className=\"h-4 w-4 text-green-500\" />\n      case \"declining\":\n        return <TrendingDown className=\"h-4 w-4 text-red-500\" />\n      default:\n        return <Minus className=\"h-4 w-4 text-yellow-500\" />\n    }\n  }\n\n  const getTrendColor = (direction: string) => {\n    switch (direction) {\n      case \"rising\":\n        return \"bg-green-50 text-green-700 border-green-200\"\n      case \"declining\":\n        return \"bg-red-50 text-red-700 border-red-200\"\n      default:\n        return \"bg-yellow-50 text-yellow-700 border-yellow-200\"\n    }\n  }\n\n  return (\n    <div className=\"grid gap-4\" data-testid=\"google-trends-section\">\n      {trends.map((trend, index) => (\n        <Card key={index} className=\"hover-elevate\" data-testid={`trend-card-${index}`}>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold\" data-testid={`trend-keyword-${index}`}>\n                {trend.keyword}\n              </CardTitle>\n              <div className=\"flex items-center gap-2\">\n                {getTrendIcon(trend.trend_direction)}\n                <Badge \n                  variant=\"outline\" \n                  className={getTrendColor(trend.trend_direction)}\n                  data-testid={`trend-direction-${index}`}\n                >\n                  {trend.trend_direction}\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Interest Level</span>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-24 bg-secondary rounded-full h-2\">\n                  <div \n                    className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                    style={{ width: `${trend.interest_level}%` }}\n                    data-testid={`trend-interest-bar-${index}`}\n                  />\n                </div>\n                <span className=\"text-sm font-medium\" data-testid={`trend-interest-value-${index}`}>\n                  {trend.interest_level}%\n                </span>\n              </div>\n            </div>\n            \n            {trend.related_queries.length > 0 && (\n              <div className=\"space-y-2\">\n                <span className=\"text-sm font-medium text-muted-foreground\">Related Queries</span>\n                <div className=\"flex flex-wrap gap-2\">\n                  {trend.related_queries.map((query, queryIndex) => (\n                    <Badge \n                      key={queryIndex} \n                      variant=\"secondary\" \n                      className=\"text-xs\"\n                      data-testid={`related-query-${index}-${queryIndex}`}\n                    >\n                      {query}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}","size_bytes":3533},"client/src/components/icp-display.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Users, Brain, Activity } from \"lucide-react\"\nimport type { ICP } from \"@shared/schema\"\n\ninterface ICPDisplayProps {\n  icp: ICP\n}\n\nexport function ICPDisplay({ icp }: ICPDisplayProps) {\n  return (\n    <div className=\"grid gap-6 md:grid-cols-3\" data-testid=\"icp-section\">\n      {/* Demographics */}\n      <Card className=\"hover-elevate\" data-testid=\"icp-demographics\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5 text-primary\" />\n            <CardTitle className=\"text-lg\">Demographics</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Age Range</span>\n            <p className=\"text-sm\" data-testid=\"icp-age-range\">{icp.demographics.age_range}</p>\n          </div>\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Gender</span>\n            <p className=\"text-sm\" data-testid=\"icp-gender\">{icp.demographics.gender}</p>\n          </div>\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Income Level</span>\n            <p className=\"text-sm\" data-testid=\"icp-income\">{icp.demographics.income_level}</p>\n          </div>\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Education</span>\n            <p className=\"text-sm\" data-testid=\"icp-education\">{icp.demographics.education}</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Psychographics */}\n      <Card className=\"hover-elevate\" data-testid=\"icp-psychographics\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n            <CardTitle className=\"text-lg\">Psychographics</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Interests</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {icp.psychographics.interests.map((interest, index) => (\n                <Badge \n                  key={index} \n                  variant=\"secondary\" \n                  className=\"text-xs\"\n                  data-testid={`icp-interest-${index}`}\n                >\n                  {interest}\n                </Badge>\n              ))}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Values</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {icp.psychographics.values.map((value, index) => (\n                <Badge \n                  key={index} \n                  variant=\"outline\" \n                  className=\"text-xs\"\n                  data-testid={`icp-value-${index}`}\n                >\n                  {value}\n                </Badge>\n              ))}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Lifestyle</span>\n            <p className=\"text-sm\" data-testid=\"icp-lifestyle\">{icp.psychographics.lifestyle}</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Behavioral */}\n      <Card className=\"hover-elevate\" data-testid=\"icp-behavioral\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5 text-primary\" />\n            <CardTitle className=\"text-lg\">Behavioral</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Pain Points</span>\n            <div className=\"space-y-1 mt-1\">\n              {icp.behavioral.pain_points.map((painPoint, index) => (\n                <p \n                  key={index} \n                  className=\"text-xs text-muted-foreground\"\n                  data-testid={`icp-pain-point-${index}`}\n                >\n                  • {painPoint}\n                </p>\n              ))}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Preferred Channels</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {icp.behavioral.preferred_channels.map((channel, index) => (\n                <Badge \n                  key={index} \n                  variant=\"secondary\" \n                  className=\"text-xs\"\n                  data-testid={`icp-channel-${index}`}\n                >\n                  {channel}\n                </Badge>\n              ))}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Buying Behavior</span>\n            <p className=\"text-sm\" data-testid=\"icp-buying-behavior\">{icp.behavioral.buying_behavior}</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":5186},"client/src/components/premium-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Crown, Lock, Sparkles } from \"lucide-react\";\nimport { usePremium } from \"@/contexts/premium-context\";\n\ninterface PremiumBadgeProps {\n  variant?: \"lock\" | \"crown\" | \"sparkles\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  showText?: boolean;\n}\n\nexport function PremiumBadge({ variant = \"crown\", size = \"sm\", showText = true }: PremiumBadgeProps) {\n  const { isPremium, isDevelopment } = usePremium();\n\n  // In development, always show premium indicators but with different styling\n  // In production, only show for non-premium users\n  if (isPremium && !isDevelopment) return null;\n\n  const icons = {\n    lock: Lock,\n    crown: Crown,\n    sparkles: Sparkles\n  };\n\n  const Icon = icons[variant];\n\n  const sizeClasses = {\n    sm: \"text-xs px-2 py-1\",\n    md: \"text-sm px-3 py-1\",\n    lg: \"text-base px-4 py-2\"\n  };\n\n  // Different styling for unlocked premium features in development\n  const isUnlocked = isPremium && isDevelopment;\n  \n  return (\n    <Badge \n      variant=\"secondary\" \n      className={`\n        ${sizeClasses[size]} \n        ${isUnlocked \n          ? \"bg-gradient-to-r from-[hsl(var(--neon-green))]/10 to-[hsl(var(--neon-green))]/5 text-[hsl(var(--neon-green))] border-[hsl(var(--neon-green))]/20\"\n          : \"bg-gradient-to-r from-[hsl(var(--hot-pink))]/10 to-[hsl(var(--bright-orange))]/10 text-[hsl(var(--hot-pink))] border-[hsl(var(--hot-pink))]/20\"\n        }\n        hover:from-[hsl(var(--hot-pink))]/20 hover:to-[hsl(var(--bright-orange))]/20\n        transition-all duration-200\n      `}\n      data-testid=\"premium-badge\"\n    >\n      <Icon className=\"h-3 w-3 mr-1\" />\n      {showText && (isUnlocked ? \"Unlocked\" : \"Premium\")}\n    </Badge>\n  );\n}","size_bytes":1708},"client/src/components/problem-statements.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { AlertTriangle, BarChart3, FileText } from \"lucide-react\"\nimport type { ProblemStatement } from \"@shared/schema\"\n\ninterface ProblemStatementsProps {\n  problemStatements: ProblemStatement[]\n}\n\nexport function ProblemStatements({ problemStatements }: ProblemStatementsProps) {\n  return (\n    <div className=\"grid gap-6\" data-testid=\"problem-statements-section\">\n      {problemStatements.map((statement, index) => (\n        <Card key={index} className=\"hover-elevate\" data-testid={`problem-statement-${index}`}>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n              <CardTitle className=\"text-lg\" data-testid={`problem-title-${index}`}>\n                Problem Statement {index + 1}\n              </CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Problem Description */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-2\">\n                <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium text-muted-foreground\">Problem</span>\n              </div>\n              <p className=\"text-sm\" data-testid={`problem-description-${index}`}>\n                {statement.problem}\n              </p>\n            </div>\n\n            {/* Impact */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-2\">\n                <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium text-muted-foreground\">Impact</span>\n              </div>\n              <p className=\"text-sm\" data-testid={`problem-impact-${index}`}>\n                {statement.impact}\n              </p>\n            </div>\n\n            {/* Market Size */}\n            <div className=\"flex items-center justify-between p-3 bg-secondary/50 rounded-lg\">\n              <span className=\"text-sm font-medium text-muted-foreground\">Market Size</span>\n              <Badge variant=\"secondary\" data-testid={`problem-market-size-${index}`}>\n                {statement.market_size}\n              </Badge>\n            </div>\n\n            {/* Evidence */}\n            {statement.evidence.length > 0 && (\n              <div>\n                <span className=\"text-sm font-medium text-muted-foreground\">Supporting Evidence</span>\n                <div className=\"mt-2 space-y-2\">\n                  {statement.evidence.map((evidence, evidenceIndex) => (\n                    <div \n                      key={evidenceIndex}\n                      className=\"flex items-start gap-2 p-2 bg-muted/30 rounded-md\"\n                      data-testid={`problem-evidence-${index}-${evidenceIndex}`}\n                    >\n                      <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                      <p className=\"text-xs text-muted-foreground\">{evidence}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}","size_bytes":3274},"client/src/components/revenue-models.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { DollarSign, TrendingUp, TrendingDown, Settings } from \"lucide-react\"\nimport type { RevenueModel } from \"@shared/schema\"\n\ninterface RevenueModelsProps {\n  revenueModels: RevenueModel[]\n}\n\nexport function RevenueModels({ revenueModels }: RevenueModelsProps) {\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"easy\":\n        return \"bg-green-50 text-green-700 border-green-200\"\n      case \"medium\":\n        return \"bg-yellow-50 text-yellow-700 border-yellow-200\"\n      case \"hard\":\n        return \"bg-red-50 text-red-700 border-red-200\"\n      default:\n        return \"bg-gray-50 text-gray-700 border-gray-200\"\n    }\n  }\n\n  return (\n    <div className=\"grid gap-6\" data-testid=\"revenue-models-section\">\n      {revenueModels.map((model, index) => (\n        <Card key={index} className=\"hover-elevate\" data-testid={`revenue-model-${index}`}>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5 text-primary\" />\n                <CardTitle className=\"text-xl\" data-testid={`revenue-model-type-${index}`}>\n                  {model.model_type}\n                </CardTitle>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Settings className=\"h-4 w-4 text-muted-foreground\" />\n                <Badge \n                  variant=\"outline\" \n                  className={getDifficultyColor(model.implementation_difficulty)}\n                  data-testid={`revenue-model-difficulty-${index}`}\n                >\n                  {model.implementation_difficulty}\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Description */}\n            <div>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`revenue-model-description-${index}`}>\n                {model.description}\n              </p>\n            </div>\n\n            {/* Potential Revenue */}\n            <div className=\"flex items-center justify-between p-3 bg-primary/5 rounded-lg border\">\n              <span className=\"text-sm font-medium text-muted-foreground\">Potential Revenue</span>\n              <Badge variant=\"secondary\" data-testid={`revenue-model-potential-${index}`}>\n                {model.potential_revenue}\n              </Badge>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {/* Pros */}\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm font-medium text-green-700\">Pros</span>\n                </div>\n                <div className=\"space-y-1\">\n                  {model.pros.map((pro, proIndex) => (\n                    <div \n                      key={proIndex}\n                      className=\"flex items-start gap-2\"\n                      data-testid={`revenue-model-pro-${index}-${proIndex}`}\n                    >\n                      <div className=\"w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                      <p className=\"text-xs text-muted-foreground\">{pro}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Cons */}\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                  <span className=\"text-sm font-medium text-red-700\">Cons</span>\n                </div>\n                <div className=\"space-y-1\">\n                  {model.cons.map((con, conIndex) => (\n                    <div \n                      key={conIndex}\n                      className=\"flex items-start gap-2\"\n                      data-testid={`revenue-model-con-${index}-${conIndex}`}\n                    >\n                      <div className=\"w-1.5 h-1.5 bg-red-500 rounded-full mt-2 flex-shrink-0\" />\n                      <p className=\"text-xs text-muted-foreground\">{con}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}","size_bytes":4490},"client/src/components/upgrade-cta.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Crown, Sparkles, ArrowRight } from \"lucide-react\";\nimport { usePremium } from \"@/contexts/premium-context\";\nimport { useLocation } from \"wouter\";\n\ninterface UpgradeCTAProps {\n  variant?: \"button\" | \"card\" | \"inline\";\n  text?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  feature?: string;\n}\n\nexport function UpgradeCTA({ \n  variant = \"button\", \n  text = \"Upgrade to Premium\", \n  size = \"md\",\n  feature \n}: UpgradeCTAProps) {\n  const { isPremium, isDevelopment } = usePremium();\n  const [, setLocation] = useLocation();\n\n  // In development, show CTA even for premium users (for testing)\n  // In production, only show for non-premium users\n  if (isPremium && !isDevelopment) return null;\n\n  const handleUpgrade = () => {\n    setLocation('/premium-results');\n  };\n\n  if (variant === \"card\") {\n    return (\n      <div className=\"bg-gradient-to-r from-[hsl(var(--hot-pink))]/5 to-[hsl(var(--bright-orange))]/5 border border-[hsl(var(--hot-pink))]/20 rounded-xl p-4 space-y-3\">\n        <div className=\"flex items-center gap-2\">\n          <Crown className=\"h-4 w-4 text-[hsl(var(--hot-pink))]\" />\n          <Badge variant=\"secondary\" className=\"bg-[hsl(var(--hot-pink))]/10 text-[hsl(var(--hot-pink))]\">\n            Premium Feature\n          </Badge>\n        </div>\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-medium\">\n            {feature ? `Unlock ${feature}` : \"Get the complete analysis\"}\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            Exact numbers, full data, and actionable insights\n          </p>\n        </div>\n        <Button \n          size=\"sm\" \n          className=\"w-full bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] text-white\"\n          onClick={handleUpgrade}\n          data-testid=\"button-upgrade-card\"\n        >\n          <Sparkles className=\"h-3 w-3 mr-2\" />\n          Upgrade for $39\n        </Button>\n      </div>\n    );\n  }\n\n  if (variant === \"inline\") {\n    return (\n      <Button \n        variant=\"ghost\" \n        size=\"sm\"\n        className=\"h-auto p-1 text-[hsl(var(--hot-pink))] hover:text-[hsl(var(--bright-orange))] hover:bg-[hsl(var(--hot-pink))]/5\"\n        onClick={handleUpgrade}\n        data-testid=\"button-upgrade-inline\"\n      >\n        <Crown className=\"h-3 w-3 mr-1\" />\n        <span className=\"text-xs\">Upgrade</span>\n        <ArrowRight className=\"h-3 w-3 ml-1\" />\n      </Button>\n    );\n  }\n\n  const buttonSizes = {\n    sm: \"sm\",\n    md: \"default\",\n    lg: \"lg\"\n  } as const;\n\n  return (\n    <Button \n      size={buttonSizes[size]}\n      className=\"bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] text-white font-medium\"\n      onClick={handleUpgrade}\n      data-testid=\"button-upgrade-primary\"\n    >\n      <Crown className=\"h-4 w-4 mr-2\" />\n      {text}\n    </Button>\n  );\n}","size_bytes":2932},"client/src/components/upgrade-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { usePremium } from \"@/contexts/premium-context\";\nimport { CheckCircle, Sparkles, TrendingUp, Users, Zap } from \"lucide-react\";\n\nexport function UpgradeModal() {\n  const { showUpgradeModal, setShowUpgradeModal, upgradeToPremium, isDevelopment } = usePremium();\n\n  const handleUpgrade = () => {\n    console.log('🔥 Upgrade button clicked!', { isDevelopment });\n    \n    if (!isDevelopment) {\n      // In production, would redirect to payment processor\n      alert('This would redirect to payment processor in production');\n      setShowUpgradeModal(false);\n      return;\n    }\n    \n    console.log('🚀 Calling upgradeToPremium...');\n    // For development - bypass payment\n    upgradeToPremium();\n    console.log('✅ upgradeToPremium called');\n  };\n\n  return (\n    <Dialog open={showUpgradeModal} onOpenChange={setShowUpgradeModal}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center space-y-2\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <Sparkles className=\"h-6 w-6 text-[hsl(var(--hot-pink))]\" />\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] bg-clip-text text-transparent\">\n                Unlock Premium Features\n              </span>\n              <Sparkles className=\"h-6 w-6 text-[hsl(var(--bright-orange))]\" />\n            </div>\n            <p className=\"text-lg text-muted-foreground\">Get the complete startup validation toolkit</p>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Price */}\n          <div className=\"text-center space-y-2\">\n            <Badge variant=\"secondary\" className=\"text-sm font-medium bg-gradient-to-r from-[hsl(var(--hot-pink))]/10 to-[hsl(var(--bright-orange))]/10 text-[hsl(var(--hot-pink))]\">\n              ⭐ Most Popular\n            </Badge>\n            <div className=\"text-4xl font-bold bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] bg-clip-text text-transparent\">\n              $39\n            </div>\n            <p className=\"text-muted-foreground\">One-time payment • Lifetime access</p>\n          </div>\n\n          {/* Features */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n                <span className=\"text-sm\">Exact search volumes & CPC data</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <TrendingUp className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n                <span className=\"text-sm\">24-month trend analysis</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Zap className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n                <span className=\"text-sm\">CAC/LTV simulator</span>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <Users className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n                <span className=\"text-sm\">Full competitor matrix</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n                <span className=\"text-sm\">90-day GTM plan</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n                <span className=\"text-sm\">All sources & exports</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Development Notice - only show in development */}\n          {isDevelopment && (\n            <div className=\"bg-[hsl(var(--neon-green))]/10 border border-[hsl(var(--neon-green))]/20 rounded-lg p-4\">\n              <p className=\"text-sm text-[hsl(var(--neon-green))] font-medium text-center\">\n                🚀 Development Mode: Click below for instant premium access!\n              </p>\n            </div>\n          )}\n\n          {/* Action buttons */}\n          <div className=\"flex gap-3\">\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\" \n              onClick={() => setShowUpgradeModal(false)}\n              data-testid=\"button-cancel-upgrade\"\n            >\n              Continue with Free\n            </Button>\n            <Button \n              className=\"flex-1 bg-gradient-to-r from-[hsl(var(--hot-pink))] to-[hsl(var(--bright-orange))] hover:from-[hsl(var(--hot-pink))]/90 hover:to-[hsl(var(--bright-orange))]/90 text-white font-medium\" \n              onClick={handleUpgrade}\n              data-testid=\"button-upgrade-premium\"\n              disabled={false}\n            >\n              <Sparkles className=\"h-4 w-4 mr-2\" />\n              {isDevelopment ? 'Upgrade to Premium' : 'Proceed to Payment'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5376},"client/src/contexts/premium-context.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PremiumContextType {\n  isPremium: boolean;\n  isDevelopment: boolean;\n  upgradeToPremium: () => void;\n  showUpgradeModal: boolean;\n  setShowUpgradeModal: (show: boolean) => void;\n  setDevPremiumOverride: (forceNonPremium: boolean) => void;\n}\n\nconst PremiumContext = createContext<PremiumContextType | undefined>(undefined);\n\nexport function PremiumProvider({ children }: { children: React.ReactNode }) {\n  // Environment-based premium access - true for development, false for production\n  const isDevelopment = import.meta.env.MODE === 'development';\n  const [isPremium, setIsPremium] = useState(false);\n  const [showUpgradeModal, setShowUpgradeModal] = useState(false);\n  const { toast } = useToast();\n\n  const upgradeToPremium = () => {\n    console.log('📦 upgradeToPremium called!', { isDevelopment, currentIsPremium: isPremium });\n    \n    // Only allow upgrade in development mode\n    if (!isDevelopment) {\n      console.warn('Premium upgrade blocked in production - requires payment flow');\n      setShowUpgradeModal(false);\n      return;\n    }\n    \n    console.log('💾 Setting premium access...');\n    // For development - instant premium access without payment\n    setIsPremium(true);\n    setShowUpgradeModal(false);\n    localStorage.setItem('premium_access', 'true');\n    console.log('✅ Premium access granted!', { newPremiumStatus: true });\n    \n    // Show success notification\n    toast({\n      title: '🚀 Premium Activated!',\n      description: 'You now have access to all premium features. Scroll down to see your unlocked content.',\n      duration: 5000\n    });\n  };\n\n  const setDevPremiumOverride = (forceNonPremium: boolean) => {\n    localStorage.setItem('force_non_premium', forceNonPremium.toString());\n    // Recalculate premium status\n    const premiumAccess = localStorage.getItem('premium_access');\n    const forceNonPremiumFlag = localStorage.getItem('force_non_premium') === 'true';\n    \n    if (forceNonPremiumFlag) {\n      setIsPremium(false);\n    } else if (isDevelopment || premiumAccess === 'true') {\n      setIsPremium(true);\n    } else {\n      setIsPremium(false);\n    }\n  };\n\n  // Fetch premium status from server in production\n  const { data: serverPremiumStatus } = useQuery({\n    queryKey: ['premium-status'],\n    queryFn: async () => {\n      const response = await fetch('/api/premium-status');\n      if (!response.ok) throw new Error('Failed to fetch premium status');\n      return response.json();\n    },\n    enabled: !isDevelopment,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  useEffect(() => {\n    if (isDevelopment) {\n      // In development, start with free experience unless user has upgraded\n      const premiumAccess = localStorage.getItem('premium_access');\n      const forceNonPremium = localStorage.getItem('force_non_premium') === 'true';\n      \n      if (forceNonPremium) {\n        setIsPremium(false);\n      } else if (premiumAccess === 'true') {\n        setIsPremium(true); // User has manually upgraded\n      } else {\n        setIsPremium(false); // Start with free experience\n      }\n    } else {\n      // In production, trust server response only\n      if (serverPremiumStatus) {\n        setIsPremium(serverPremiumStatus.isPremium || false);\n      }\n    }\n  }, [isDevelopment, serverPremiumStatus]);\n\n  return (\n    <PremiumContext.Provider value={{\n      isPremium,\n      isDevelopment,\n      upgradeToPremium,\n      showUpgradeModal,\n      setShowUpgradeModal,\n      setDevPremiumOverride\n    }}>\n      {children}\n    </PremiumContext.Provider>\n  );\n}\n\nexport function usePremium() {\n  const context = useContext(PremiumContext);\n  if (context === undefined) {\n    throw new Error('usePremium must be used within a PremiumProvider');\n  }\n  return context;\n}","size_bytes":3909},"client/src/pages/premium-results.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useLocation } from \"wouter\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { ArrowLeft, Download, Share2, TrendingUp, TrendingDown, Users, DollarSign, Target, Calendar, MapPin, Crown, Sparkles, BarChart3, PieChart, Calculator, FileText, Globe, Settings, Scale, AlertCircle } from \"lucide-react\"\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart as RechartsPieChart, Cell, Area, AreaChart } from \"recharts\"\nimport { usePremium } from \"@/contexts/premium-context\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { apiRequest } from \"@/lib/queryClient\"\nimport type { AnalysisResponse, KeywordIntelligence, RedditAnalysis, CustomerIntelligence, FinancialProjections, TechnologyOperations, LegalRegulatory, LaunchRoadmap, CompetitorMatrix, GtmPlan, MarketSizing, KeywordGenerationInput, CompetitorAnalysisInput, GtmPlanInput, MarketSizingInput } from \"@shared/schema\"\n\n// Premium analytics data fetching\nconst usePremiumKeywords = (analysisId: string, enabled: boolean) => {\n  return useQuery<KeywordIntelligence>({\n    queryKey: ['/api/premium/keywords', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\n\nconst usePremiumCompetitors = (analysisId: string, enabled: boolean) => {\n  return useQuery<CompetitorMatrix>({\n    queryKey: ['/api/premium/competitors', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\nconst usePremiumGtm = (analysisId: string, enabled: boolean) => {\n  return useQuery<GtmPlan>({\n    queryKey: ['/api/premium/gtm-plan', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\nconst usePremiumMarket = (analysisId: string, enabled: boolean) => {\n  return useQuery<MarketSizing>({\n    queryKey: ['/api/premium/market-sizing', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\n// New premium analytics queries\nconst usePremiumReddit = (analysisId: string, enabled: boolean) => {\n  return useQuery<RedditAnalysis>({\n    queryKey: ['/api/premium/reddit-analysis', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\nconst usePremiumCustomer = (analysisId: string, enabled: boolean) => {\n  return useQuery<CustomerIntelligence>({\n    queryKey: ['/api/premium/customer-intelligence', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\nconst usePremiumFinancialProjections = (analysisId: string, enabled: boolean) => {\n  return useQuery<FinancialProjections>({\n    queryKey: ['/api/premium/financial-projections', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\nconst usePremiumTechnology = (analysisId: string, enabled: boolean) => {\n  return useQuery<TechnologyOperations>({\n    queryKey: ['/api/premium/technology-operations', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\nconst usePremiumLegal = (analysisId: string, enabled: boolean) => {\n  return useQuery<LegalRegulatory>({\n    queryKey: ['/api/premium/legal-regulatory', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\nconst usePremiumRoadmap = (analysisId: string, enabled: boolean) => {\n  return useQuery<LaunchRoadmap>({\n    queryKey: ['/api/premium/launch-roadmap', analysisId],\n    enabled: enabled && !!analysisId,\n  })\n}\n\n// Generate premium data mutations\nconst useGenerateKeywords = () => {\n  const queryClient = useQueryClient()\n  return useMutation<KeywordIntelligence, Error, KeywordGenerationInput>({\n    mutationFn: (data: KeywordGenerationInput) => apiRequest('/api/premium/keywords', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/keywords', variables.analysisId] })\n    }\n  })\n}\n\n\nconst useGenerateCompetitors = () => {\n  const queryClient = useQueryClient()\n  return useMutation<CompetitorMatrix, Error, CompetitorAnalysisInput>({\n    mutationFn: (data: CompetitorAnalysisInput) => apiRequest('/api/premium/competitors', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/competitors', variables.analysisId] })\n    }\n  })\n}\n\nconst useGenerateGtm = () => {\n  const queryClient = useQueryClient()\n  return useMutation<GtmPlan, Error, GtmPlanInput>({\n    mutationFn: (data: GtmPlanInput) => apiRequest('/api/premium/gtm-plan', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/gtm-plan', variables.analysisId] })\n    }\n  })\n}\n\nconst useGenerateMarket = () => {\n  const queryClient = useQueryClient()\n  return useMutation<MarketSizing, Error, MarketSizingInput>({\n    mutationFn: (data: MarketSizingInput) => apiRequest('/api/premium/market-sizing', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/market-sizing', variables.analysisId] })\n    }\n  })\n}\n\n// New premium section mutations\nconst useGenerateReddit = () => {\n  const queryClient = useQueryClient()\n  return useMutation<RedditAnalysis, Error, { analysisId: string, subreddits: string[], keywords: string[], industry: string }>({\n    mutationFn: (data) => apiRequest('/api/premium/reddit-analysis', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/reddit-analysis', variables.analysisId] })\n    }\n  })\n}\n\nconst useGenerateCustomer = () => {\n  const queryClient = useQueryClient()\n  return useMutation<CustomerIntelligence, Error, { analysisId: string, industry: string, targetAudience?: string }>({\n    mutationFn: (data) => apiRequest('/api/premium/customer-intelligence', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/customer-intelligence', variables.analysisId] })\n    }\n  })\n}\n\nconst useGenerateFinancialProjections = () => {\n  const queryClient = useQueryClient()\n  return useMutation<FinancialProjections, Error, { analysisId: string, industry: string, revenueModel?: string }>({\n    mutationFn: (data) => apiRequest('/api/premium/financial-projections', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/financial-projections', variables.analysisId] })\n    }\n  })\n}\n\nconst useGenerateTechnology = () => {\n  const queryClient = useQueryClient()\n  return useMutation<TechnologyOperations, Error, { analysisId: string, productType?: string, scale?: string }>({\n    mutationFn: (data) => apiRequest('/api/premium/technology-operations', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/technology-operations', variables.analysisId] })\n    }\n  })\n}\n\nconst useGenerateLegal = () => {\n  const queryClient = useQueryClient()\n  return useMutation<LegalRegulatory, Error, { analysisId: string, businessType?: string, jurisdiction?: string }>({\n    mutationFn: (data) => apiRequest('/api/premium/legal-regulatory', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/legal-regulatory', variables.analysisId] })\n    }\n  })\n}\n\nconst useGenerateRoadmap = () => {\n  const queryClient = useQueryClient()\n  return useMutation<LaunchRoadmap, Error, { analysisId: string, industry: string, targetLaunchDate?: string }>({\n    mutationFn: (data) => apiRequest('/api/premium/launch-roadmap', 'POST', data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/premium/launch-roadmap', variables.analysisId] })\n    }\n  })\n}\n\n// Keyword Intelligence Component\nfunction KeywordIntelligenceSection({ analysisId, industry, primaryKeyword }: { analysisId: string, industry: string, primaryKeyword: string }) {\n  const { isPremium } = usePremium()\n  const keywordsQuery = usePremiumKeywords(analysisId, isPremium)\n  const generateKeywords = useGenerateKeywords()\n\n  useEffect(() => {\n    if (isPremium && analysisId && !keywordsQuery.data && !keywordsQuery.isLoading) {\n      generateKeywords.mutate({\n        analysisId,\n        primaryKeyword,\n        industry,\n        targetAudience: \"General users\",\n        locale: \"US\"\n      })\n    }\n  }, [isPremium, analysisId, primaryKeyword, industry])\n\n  if (!isPremium) return null\n  if (keywordsQuery.isLoading || generateKeywords.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Keyword Intelligence\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-32 bg-muted rounded\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (keywordsQuery.isError) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Keyword Intelligence\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center text-muted-foreground py-8\">\n            <p>Failed to load keyword data. Please try again.</p>\n            <Button \n              onClick={() => keywordsQuery.refetch()} \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-4\"\n              data-testid=\"button-retry-keywords\"\n            >\n              Retry\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const keywordData = keywordsQuery.data\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <BarChart3 className=\"h-5 w-5\" />\n          Keyword Intelligence & Search Volume Analysis\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {keywordData && (\n          <div className=\"space-y-6\">\n            {/* Overview Metrics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-search-volume\">{keywordData.totalSearchVolume?.toLocaleString() || 'N/A'}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Search Volume</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-avg-cpc\">${keywordData.avgCpc?.toFixed(2) || '0.00'}</div>\n                <div className=\"text-sm text-muted-foreground\">Avg CPC</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\" data-testid=\"text-avg-difficulty\">{Math.round(keywordData.avgDifficulty || 0)}/100</div>\n                <div className=\"text-sm text-muted-foreground\">Avg Difficulty</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-locale\">{keywordData.locale || 'US'}</div>\n                <div className=\"text-sm text-muted-foreground\">Market</div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Keyword Tables */}\n            <Tabs defaultValue=\"primary\" className=\"w-full\">\n              <TabsList data-testid=\"tabs-keyword-types\">\n                <TabsTrigger value=\"primary\" data-testid=\"tab-primary-keywords\">Primary Keywords</TabsTrigger>\n                <TabsTrigger value=\"longtail\" data-testid=\"tab-longtail-keywords\">Long-tail Keywords</TabsTrigger>\n                <TabsTrigger value=\"competitor\" data-testid=\"tab-competitor-keywords\">Competitor Keywords</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"primary\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Primary Keywords Analysis</h4>\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Keyword</TableHead>\n                          <TableHead>Search Volume</TableHead>\n                          <TableHead>CPC</TableHead>\n                          <TableHead>Difficulty</TableHead>\n                          <TableHead>Intent</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {keywordData.primaryKeywords?.map((keyword, index) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{keyword.keyword}</TableCell>\n                            <TableCell>{keyword.searchVolume?.toLocaleString()}</TableCell>\n                            <TableCell>${keyword.cpc?.toFixed(2)}</TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Progress value={keyword.difficulty} className=\"w-16\" />\n                                <span className=\"text-sm\">{keyword.difficulty}/100</span>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={keyword.intent === 'commercial' ? 'default' : 'secondary'}>\n                                {keyword.intent}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        )) || []}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"longtail\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Long-tail Keywords (Lower Competition)</h4>\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Keyword</TableHead>\n                          <TableHead>Search Volume</TableHead>\n                          <TableHead>CPC</TableHead>\n                          <TableHead>Difficulty</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {keywordData.longTailKeywords?.map((keyword, index) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{keyword.keyword}</TableCell>\n                            <TableCell>{keyword.searchVolume?.toLocaleString()}</TableCell>\n                            <TableCell>${keyword.cpc?.toFixed(2)}</TableCell>\n                            <TableCell>\n                              <Progress value={keyword.difficulty} className=\"w-16\" />\n                            </TableCell>\n                          </TableRow>\n                        )) || []}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"competitor\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Competitor Keywords</h4>\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Keyword</TableHead>\n                          <TableHead>Search Volume</TableHead>\n                          <TableHead>CPC</TableHead>\n                          <TableHead>Difficulty</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {keywordData.competitorKeywords?.map((keyword, index) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{keyword.keyword}</TableCell>\n                            <TableCell>{keyword.searchVolume?.toLocaleString()}</TableCell>\n                            <TableCell>${keyword.cpc?.toFixed(2)}</TableCell>\n                            <TableCell>\n                              <Progress value={keyword.difficulty} className=\"w-16\" />\n                            </TableCell>\n                          </TableRow>\n                        )) || []}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* 24-Month Trend Chart */}\n            {keywordData.primaryKeywords?.[0]?.trend24Months && keywordData.primaryKeywords[0].trend24Months.length > 0 && (\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold\">24-Month Search Volume Trend</h4>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={keywordData.primaryKeywords[0].trend24Months}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"volume\" stroke=\"#8884d8\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\n// Reddit Analysis Component\nfunction RedditAnalysisSection({ analysisId, subreddits, keywords, industry }: { analysisId: string, subreddits: string[], keywords: string[], industry: string }) {\n  const { isPremium } = usePremium()\n  const redditQuery = usePremiumReddit(analysisId, isPremium)\n  const generateReddit = useGenerateReddit()\n\n  useEffect(() => {\n    if (isPremium && analysisId && subreddits?.length && keywords?.length && !redditQuery.data && !redditQuery.isLoading) {\n      generateReddit.mutate({\n        analysisId,\n        subreddits,\n        keywords,\n        industry\n      })\n    }\n  }, [isPremium, analysisId, subreddits, keywords, industry])\n\n  if (!isPremium || !subreddits || !keywords) return null\n\n  if (redditQuery.isLoading || generateReddit.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"h-5 w-5\" />\n            Deep Reddit Analysis & Community Insights\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Analyzing Reddit discussions and community sentiment...</div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (redditQuery.error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"h-5 w-5\" />\n            Deep Reddit Analysis & Community Insights\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Failed to load Reddit analysis</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const redditData = redditQuery.data\n  if (!redditData) return null\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Globe className=\"h-5 w-5\" />\n          Deep Reddit Analysis & Community Insights\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Subreddit Insights */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {redditData.subredditInsights?.slice(0, 3).map((subreddit, index) => (\n              <Card key={index} className=\"border-l-4 border-l-blue-500\">\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-blue-600 dark:text-blue-400\">r/{subreddit.name}</h4>\n                  <div className=\"space-y-2 mt-2\">\n                    <div className=\"text-sm\">\n                      <span className=\"font-medium\">Members: </span>\n                      <span data-testid={`text-${subreddit.name}-members`}>{subreddit.members}</span>\n                    </div>\n                    <div className=\"text-sm\">\n                      <span className=\"font-medium\">Engagement: </span>\n                      <span className={`${subreddit.engagement === 'High' ? 'text-green-600 dark:text-green-400' : 'text-orange-600 dark:text-orange-400'}`}>\n                        {subreddit.engagement}\n                      </span>\n                    </div>\n                    <div className=\"text-sm\">\n                      <span className=\"font-medium\">Relevance: </span>\n                      <span className=\"text-sm\">{subreddit.relevanceScore}/10</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Trending Discussions */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">High-Impact Discussions & Pain Points</h4>\n            <div className=\"space-y-4\">\n              {redditData.topDiscussions?.slice(0, 3).map((discussion, index) => (\n                <div key={index} className=\"p-4 border rounded-lg hover-elevate\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-2 flex-1\">\n                      <h5 className=\"font-medium\">{discussion.title}</h5>\n                      <p className=\"text-sm text-muted-foreground\">\"{discussion.excerpt}\"</p>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <span>↑ {discussion.upvotes} upvotes</span>\n                        <span>💬 {discussion.comments} comments</span>\n                        <span>📊 {discussion.sentiment} sentiment</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Pain Points Analysis */}\n          {redditData.painPointsAnalysis && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Identified Pain Points from Real Users</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {redditData.painPointsAnalysis.slice(0, 4).map((painPoint, index) => (\n                  <div key={index} className=\"p-4 bg-muted rounded-lg\">\n                    <h5 className=\"font-medium text-sm\">{painPoint.category}</h5>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{painPoint.description}</p>\n                    <div className=\"text-xs text-muted-foreground mt-2\">\n                      Mentioned {painPoint.frequency} times across discussions\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Customer Intelligence Section\nfunction CustomerIntelligenceSection({ analysisId, industry }: { analysisId: string, industry: string }) {\n  const { isPremium } = usePremium()\n  const customerQuery = usePremiumCustomer(analysisId, isPremium)\n  const generateCustomer = useGenerateCustomer()\n\n  useEffect(() => {\n    if (isPremium && analysisId && industry && !customerQuery.data && !customerQuery.isLoading) {\n      generateCustomer.mutate({\n        analysisId,\n        industry,\n        targetAudience: \"General market\"\n      })\n    }\n  }, [isPremium, analysisId, industry])\n\n  if (!isPremium) return null\n\n  if (customerQuery.isLoading || generateCustomer.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Customer Intelligence & Persona Analysis\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Analyzing customer personas and behavior patterns...</div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (customerQuery.error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Customer Intelligence & Persona Analysis\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Failed to load customer intelligence</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const customerData = customerQuery.data\n  if (!customerData) return null\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          Customer Intelligence & Persona Analysis\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Customer Personas */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {customerData.personas?.slice(0, 2).map((persona, index) => (\n              <Card key={index} className={`border-l-4 ${index === 0 ? 'border-l-green-500' : 'border-l-blue-500'}`}>\n                <CardHeader>\n                  <h4 className={`font-semibold ${index === 0 ? 'text-green-600 dark:text-green-400' : 'text-blue-600 dark:text-blue-400'}`}>\n                    {persona.type}: {persona.title}\n                  </h4>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div><strong>Demographics:</strong> {persona.demographics}</div>\n                  <div><strong>Pain Points:</strong> {persona.painPoints?.join(', ')}</div>\n                  <div><strong>Goals:</strong> {persona.goals?.join(', ')}</div>\n                  <div><strong>Buying Triggers:</strong> {persona.buyingTriggers?.join(', ')}</div>\n                  <div><strong>Decision Timeline:</strong> {persona.decisionTimeline}</div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Behavioral Analysis */}\n          {customerData.behaviorAnalysis && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Customer Behavior Analysis</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <h5 className=\"font-medium\">Purchasing Patterns</h5>\n                  <p className=\"text-sm text-muted-foreground mt-2\">{customerData.behaviorAnalysis.purchasingPatterns}</p>\n                </div>\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <h5 className=\"font-medium\">Communication Preferences</h5>\n                  <p className=\"text-sm text-muted-foreground mt-2\">{customerData.behaviorAnalysis.communicationPreferences}</p>\n                </div>\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <h5 className=\"font-medium\">Decision Factors</h5>\n                  <p className=\"text-sm text-muted-foreground mt-2\">{customerData.behaviorAnalysis.decisionFactors}</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Market Segments */}\n          {customerData.marketSegments && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Market Segmentation</h4>\n              <div className=\"space-y-3\">\n                {customerData.marketSegments.map((segment, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h5 className=\"font-medium\">{segment.name}</h5>\n                      <p className=\"text-sm text-muted-foreground\">{segment.description}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold\">{segment.marketShare}%</div>\n                      <div className=\"text-sm text-muted-foreground\">Market Share</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Financial Projections Section (not simulator)\nfunction FinancialProjectionsSection({ analysisId, industry }: { analysisId: string, industry: string }) {\n  const { isPremium } = usePremium()\n  const projectionsQuery = usePremiumFinancialProjections(analysisId, isPremium)\n  const generateProjections = useGenerateFinancialProjections()\n\n  useEffect(() => {\n    if (isPremium && analysisId && industry && !projectionsQuery.data && !projectionsQuery.isLoading) {\n      generateProjections.mutate({\n        analysisId,\n        industry,\n        revenueModel: \"subscription\"\n      })\n    }\n  }, [isPremium, analysisId, industry])\n\n  if (!isPremium) return null\n\n  if (projectionsQuery.isLoading || generateProjections.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            Financial Projections & Revenue Model\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Generating financial projections and revenue models...</div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (projectionsQuery.error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            Financial Projections & Revenue Model\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Failed to load financial projections</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const projectionsData = projectionsQuery.data\n  if (!projectionsData) return null\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <DollarSign className=\"h-5 w-5\" />\n          Financial Projections & Revenue Model\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Revenue Model Options */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {projectionsData.revenueModels?.[0]?.tiers?.map((tier, index) => (\n              <Card key={index} className={`border-l-4 ${index === 0 ? 'border-l-green-500' : index === 1 ? 'border-l-blue-500' : 'border-l-purple-500'}`}>\n                <CardContent className=\"p-4\">\n                  <h5 className={`font-semibold ${index === 0 ? 'text-green-600 dark:text-green-400' : index === 1 ? 'text-blue-600 dark:text-blue-400' : 'text-purple-600 dark:text-purple-400'}`}>\n                    {tier.name}\n                  </h5>\n                  <div className=\"space-y-2 mt-2 text-sm\">\n                    <div>${tier.price}/{tier.billingCycle}</div>\n                    <div>Target: {Math.round(tier.targetPercentage * 100)}% of users</div>\n                    <div className=\"space-y-1\">\n                      {tier.features?.slice(0, 3).map((feature, fIndex) => (\n                        <div key={fIndex} className=\"text-xs\">{feature}</div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* 3-Year Financial Outlook */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">3-Year Growth Projections</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {projectionsData.projections?.slice(0, 3).map((year, index) => (\n                <div key={index} className=\"p-4 border rounded-lg text-center hover-elevate\">\n                  <h5 className=\"font-semibold mb-2\">Year {year.year}</h5>\n                  <div className=\"space-y-1 text-sm\">\n                    <div>Customers: {year.customers?.toLocaleString()}</div>\n                    <div>Revenue: ${year.revenue?.toLocaleString()}</div>\n                    {year.growthRate && <div>Growth: {year.growthRate}x</div>}\n                    {year.churnRate && <div>Churn: {Math.round(year.churnRate * 100)}%</div>}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Unit Economics */}\n          {projectionsData.unitEconomics && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Unit Economics</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"p-4 bg-muted rounded-lg text-center\">\n                  <h5 className=\"font-medium\">CAC</h5>\n                  <p className=\"text-2xl font-bold\">${projectionsData.unitEconomics.customerAcquisitionCost}</p>\n                </div>\n                <div className=\"p-4 bg-muted rounded-lg text-center\">\n                  <h5 className=\"font-medium\">LTV</h5>\n                  <p className=\"text-2xl font-bold\">${projectionsData.unitEconomics.lifetimeValue?.toLocaleString()}</p>\n                </div>\n                <div className=\"p-4 bg-muted rounded-lg text-center\">\n                  <h5 className=\"font-medium\">LTV:CAC</h5>\n                  <p className=\"text-2xl font-bold\">{projectionsData.unitEconomics.ltvCacRatio}:1</p>\n                </div>\n                <div className=\"p-4 bg-muted rounded-lg text-center\">\n                  <h5 className=\"font-medium\">Payback</h5>\n                  <p className=\"text-2xl font-bold\">{projectionsData.unitEconomics.paybackPeriod} mo</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Technology & Operations Section\nfunction TechnologyOperationsSection({ analysisId, industry }: { analysisId: string, industry: string }) {\n  const { isPremium } = usePremium()\n  const technologyQuery = usePremiumTechnology(analysisId, isPremium)\n  const generateTechnology = useGenerateTechnology()\n\n  useEffect(() => {\n    if (isPremium && analysisId && industry && !technologyQuery.data && !technologyQuery.isLoading) {\n      generateTechnology.mutate({\n        analysisId,\n        productType: \"web_application\",\n        scale: \"startup\"\n      })\n    }\n  }, [isPremium, analysisId, industry])\n\n  if (!isPremium) return null\n\n  if (technologyQuery.isLoading || generateTechnology.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Technology Stack & Operations Plan\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Analyzing technology stack and operations requirements...</div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (technologyQuery.error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Technology Stack & Operations Plan\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Failed to load technology operations plan</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const technologyData = technologyQuery.data\n  if (!technologyData) return null\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Settings className=\"h-5 w-5\" />\n          Technology Stack & Operations Plan\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Tech Stack Recommendations */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">Recommended Technology Stack</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {technologyData.technologyStack?.mvp?.concat(technologyData.technologyStack?.production || []).slice(0, 4).map((tech, index) => (\n                <Card key={index} className=\"border-l-4 border-l-blue-500\">\n                  <CardContent className=\"p-4\">\n                    <h5 className=\"font-semibold text-blue-600 dark:text-blue-400\">{tech.category}</h5>\n                    <div className=\"space-y-2 mt-2\">\n                      <div className=\"text-sm font-medium\">{tech.technology}</div>\n                      <div className=\"text-sm text-muted-foreground\">{tech.reasoning}</div>\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span>Cost: {tech.cost}</span>\n                        <span>Learning: {tech.learningCurve}</span>\n                      </div>\n                      {tech.alternatives && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          Alternatives: {tech.alternatives.join(', ')}\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Team Requirements */}\n          {technologyData.team && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Team & Resource Planning</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h5 className=\"font-medium mb-3\">MVP Phase</h5>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>Developers: {technologyData.team.mvpPhase?.developers}</div>\n                    <div>Designer: {technologyData.team.mvpPhase?.designer}</div>\n                    <div>Duration: {technologyData.team.mvpPhase?.duration}</div>\n                    <div className=\"font-medium\">Monthly Cost: ${technologyData.team.mvpPhase?.monthlyCost?.toLocaleString()}</div>\n                  </div>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <h5 className=\"font-medium mb-3\">Growth Phase</h5>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>Developers: {technologyData.team.growthPhase?.developers}</div>\n                    <div>Designer: {technologyData.team.growthPhase?.designer}</div>\n                    <div>DevOps: {technologyData.team.growthPhase?.devops}</div>\n                    <div>Duration: {technologyData.team.growthPhase?.duration}</div>\n                    <div className=\"font-medium\">Monthly Cost: ${technologyData.team.growthPhase?.monthlyCost?.toLocaleString()}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Infrastructure */}\n          {technologyData.infrastructure && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Infrastructure & Hosting</h4>\n              <div className=\"p-4 border rounded-lg\">\n                <h5 className=\"font-medium mb-2\">Hosting Costs (AWS/Vercel)</h5>\n                <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                  <div className=\"text-center\">\n                    <div className=\"font-bold\">${technologyData.infrastructure.hosting?.estimatedCosts?.month1}</div>\n                    <div className=\"text-muted-foreground\">Month 1</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-bold\">${technologyData.infrastructure.hosting?.estimatedCosts?.month6}</div>\n                    <div className=\"text-muted-foreground\">Month 6</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-bold\">${technologyData.infrastructure.hosting?.estimatedCosts?.month12}</div>\n                    <div className=\"text-muted-foreground\">Month 12</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-bold\">${technologyData.infrastructure.hosting?.estimatedCosts?.month24}</div>\n                    <div className=\"text-muted-foreground\">Month 24</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Legal & Regulatory Section\nfunction LegalRegulatorySection({ analysisId, industry }: { analysisId: string, industry: string }) {\n  const { isPremium } = usePremium()\n  const legalQuery = usePremiumLegal(analysisId, isPremium)\n  const generateLegal = useGenerateLegal()\n\n  useEffect(() => {\n    if (isPremium && analysisId && industry && !legalQuery.data && !legalQuery.isLoading) {\n      generateLegal.mutate({\n        analysisId,\n        businessType: \"technology\",\n        jurisdiction: \"Delaware\"\n      })\n    }\n  }, [isPremium, analysisId, industry])\n\n  if (!isPremium) return null\n\n  if (legalQuery.isLoading || generateLegal.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Scale className=\"h-5 w-5\" />\n            Legal & Regulatory Requirements\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Analyzing legal requirements and regulatory compliance...</div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (legalQuery.error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Scale className=\"h-5 w-5\" />\n            Legal & Regulatory Requirements\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Failed to load legal regulatory analysis</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const legalData = legalQuery.data\n  if (!legalData) return null\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Scale className=\"h-5 w-5\" />\n          Legal & Regulatory Requirements\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Business Structure */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardContent className=\"p-4\">\n                <h5 className=\"font-semibold text-blue-600 dark:text-blue-400\">Business Structure</h5>\n                <div className=\"space-y-2 mt-2 text-sm\">\n                  <div>Recommended: {legalData.businessStructure?.recommended}</div>\n                  <div>Alternatives: {legalData.businessStructure?.alternatives?.join(', ')}</div>\n                  <div>Filing Cost: ${legalData.businessStructure?.incorporationCosts?.filing}</div>\n                  <div>Timeline: {legalData.businessStructure?.timeline}</div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardContent className=\"p-4\">\n                <h5 className=\"font-semibold text-green-600 dark:text-green-400\">Intellectual Property</h5>\n                <div className=\"space-y-2 mt-2 text-sm\">\n                  <div>Trademarks: ${legalData.intellectualProperty?.trademarks?.companyName?.cost}</div>\n                  <div>Copyrights: ${legalData.intellectualProperty?.copyrights?.softwareCode?.cost}</div>\n                  <div>Timeline: {legalData.intellectualProperty?.trademarks?.companyName?.timeline}</div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-l-4 border-l-purple-500\">\n              <CardContent className=\"p-4\">\n                <h5 className=\"font-semibold text-purple-600 dark:text-purple-400\">Compliance</h5>\n                <div className=\"space-y-2 mt-2 text-sm\">\n                  <div>Privacy Policy: Required</div>\n                  <div>Terms of Service: Required</div>\n                  <div>GDPR: {legalData.compliance?.dataPrivacy?.[0]?.penalties}</div>\n                  <div>Cost: $800-3500</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Legal Timeline */}\n          {legalData.timeline && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Legal Implementation Timeline</h4>\n              <div className=\"space-y-3\">\n                {legalData.timeline.map((phase, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg\">\n                    <h5 className=\"font-medium\">{phase.phase}</h5>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{phase.tasks?.join(', ')}</p>\n                    <div className=\"flex justify-between text-sm mt-2\">\n                      <span>Cost: ${phase.cost?.toLocaleString()}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// 12-Month Launch Roadmap Section\nfunction LaunchRoadmapSection({ analysisId, industry }: { analysisId: string, industry: string }) {\n  const { isPremium } = usePremium()\n  const roadmapQuery = usePremiumRoadmap(analysisId, isPremium)\n  const generateRoadmap = useGenerateRoadmap()\n\n  useEffect(() => {\n    if (isPremium && analysisId && industry && !roadmapQuery.data && !roadmapQuery.isLoading) {\n      generateRoadmap.mutate({\n        analysisId,\n        industry,\n        targetLaunchDate: undefined\n      })\n    }\n  }, [isPremium, analysisId, industry])\n\n  if (!isPremium) return null\n\n  if (roadmapQuery.isLoading || generateRoadmap.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            12-Month Launch Roadmap\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Generating comprehensive 12-month launch roadmap...</div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (roadmapQuery.error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            12-Month Launch Roadmap\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Failed to load launch roadmap</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const roadmapData = roadmapQuery.data\n  if (!roadmapData) return null\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calendar className=\"h-5 w-5\" />\n          12-Month Launch Roadmap\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Quarterly Breakdown */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {roadmapData.quarters?.map((quarter, index) => (\n              <Card key={index} className={`border-l-4 ${index === 0 ? 'border-l-blue-500' : index === 1 ? 'border-l-green-500' : index === 2 ? 'border-l-purple-500' : 'border-l-orange-500'}`}>\n                <CardHeader className=\"pb-2\">\n                  <h4 className={`font-semibold ${index === 0 ? 'text-blue-600 dark:text-blue-400' : index === 1 ? 'text-green-600 dark:text-green-400' : index === 2 ? 'text-purple-600 dark:text-purple-400' : 'text-orange-600 dark:text-orange-400'}`}>\n                    {quarter.quarter}: {quarter.title}\n                  </h4>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-2 text-sm\">\n                    {quarter.objectives?.slice(0, 4).map((objective, objIndex) => (\n                      <div key={objIndex} className=\"flex items-center gap-2\">\n                        <div className=\"w-1.5 h-1.5 bg-primary rounded-full\" />\n                        {objective}\n                      </div>\n                    ))}\n                    <div className=\"text-xs text-muted-foreground mt-2\">\n                      Budget: ${quarter.budget?.toLocaleString()}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Key Metrics Timeline */}\n          {roadmapData.metricTargets && (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Growth Metrics Timeline</h4>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border rounded-lg\">\n                  <thead>\n                    <tr className=\"bg-muted\">\n                      <th className=\"text-left p-3 font-medium\">Metric</th>\n                      <th className=\"text-center p-3 font-medium\">Month 3</th>\n                      <th className=\"text-center p-3 font-medium\">Month 6</th>\n                      <th className=\"text-center p-3 font-medium\">Month 9</th>\n                      <th className=\"text-center p-3 font-medium\">Month 12</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {roadmapData.metricTargets.map((target, index) => (\n                      <tr key={index} className=\"border-t\">\n                        <td className=\"p-3 font-medium\">{target.metric}</td>\n                        <td className=\"p-3 text-center\">{target.month3}</td>\n                        <td className=\"p-3 text-center\">{target.month6}</td>\n                        <td className=\"p-3 text-center\">{target.month9}</td>\n                        <td className=\"p-3 text-center\">{target.month12}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n\n// Enhanced Competitor Matrix Component\nfunction CompetitorMatrixSection({ analysisId, industry }: { analysisId: string, industry: string }) {\n  const { isPremium } = usePremium()\n  const competitorsQuery = usePremiumCompetitors(analysisId, isPremium)\n  const generateCompetitors = useGenerateCompetitors()\n\n  useEffect(() => {\n    if (isPremium && analysisId && !competitorsQuery.data && !competitorsQuery.isLoading) {\n      generateCompetitors.mutate({\n        analysisId,\n        industry,\n        targetKeyword: industry\n      })\n    }\n  }, [isPremium, analysisId, industry])\n\n  if (!isPremium) return null\n  if (competitorsQuery.isLoading || generateCompetitors.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Competitor Matrix & Market Positioning\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n            <div className=\"h-32 bg-muted rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const competitorData: CompetitorMatrix | undefined = competitorsQuery.data as CompetitorMatrix | undefined\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          Competitor Matrix & Market Positioning\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {competitorData && (\n          <div className=\"space-y-6\">\n            {/* Competitor Table */}\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Company</TableHead>\n                    <TableHead>Pricing (Start)</TableHead>\n                    <TableHead>Market Share</TableHead>\n                    <TableHead>Sentiment</TableHead>\n                    <TableHead>Founded</TableHead>\n                    <TableHead>Funding</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {competitorData.competitors?.map((competitor, index) => (\n                    <TableRow key={index}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{competitor.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{competitor.targetAudience}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {competitor.pricing?.[0] ? (\n                          <div>\n                            <div className=\"font-medium\">${competitor.pricing[0].price}/{competitor.pricing[0].billingCycle}</div>\n                            <div className=\"text-sm text-muted-foreground\">{competitor.pricing[0].tier}</div>\n                          </div>\n                        ) : 'N/A'}\n                      </TableCell>\n                      <TableCell>{competitor.marketShare ? `${competitor.marketShare}%` : 'N/A'}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {competitor.sentimentScore >= 0 ? (\n                            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                          ) : (\n                            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                          )}\n                          <span className={competitor.sentimentScore >= 0 ? 'text-green-600' : 'text-red-600'}>\n                            {((competitor.sentimentScore || 0) * 100).toFixed(0)}%\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>{competitor.yearFounded || 'N/A'}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{competitor.fundingStage || 'Unknown'}</Badge>\n                      </TableCell>\n                    </TableRow>\n                  )) || []}\n                </TableBody>\n              </Table>\n            </div>\n\n            {/* Market Gaps and Opportunities */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold mb-3\">Market Gaps Identified</h4>\n                <div className=\"space-y-2\">\n                  {competitorData.marketGaps?.map((gap, index) => (\n                    <div key={index} className=\"p-3 border rounded-lg bg-yellow-50 dark:bg-yellow-950/20\">\n                      <p className=\"text-sm\">{gap}</p>\n                    </div>\n                  )) || []}\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-3\">Competitive Advantages</h4>\n                <div className=\"space-y-2\">\n                  {competitorData.competitiveAdvantages?.map((advantage, index) => (\n                    <div key={index} className=\"p-3 border rounded-lg bg-green-50 dark:bg-green-950/20\">\n                      <p className=\"text-sm\">{advantage}</p>\n                    </div>\n                  )) || []}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\n// GTM Planning Component\nfunction GtmPlanningSection({ analysisId, productDescription }: { analysisId: string, productDescription: string }) {\n  const { isPremium } = usePremium()\n  const gtmQuery = usePremiumGtm(analysisId, isPremium)\n  const generateGtm = useGenerateGtm()\n\n  useEffect(() => {\n    if (isPremium && analysisId && !gtmQuery.data && !gtmQuery.isLoading) {\n      generateGtm.mutate({\n        analysisId,\n        productDescription,\n        targetAudience: \"General market\",\n        budget: 50000\n      })\n    }\n  }, [isPremium, analysisId, productDescription])\n\n  if (!isPremium) return null\n  if (gtmQuery.isLoading || generateGtm.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"h-5 w-5\" />\n            90-Day Go-to-Market Plan & Risk Analysis\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n            <div className=\"h-32 bg-muted rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const gtmData: GtmPlan | undefined = gtmQuery.data as GtmPlan | undefined\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Target className=\"h-5 w-5\" />\n          90-Day Go-to-Market Plan & Risk Analysis\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {gtmData && (\n          <div className=\"space-y-6\">\n            {/* Budget Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">${gtmData.totalBudget?.toLocaleString()}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Budget</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{gtmData.phases?.length || 0}</div>\n                <div className=\"text-sm text-muted-foreground\">Phases</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{gtmData.successMetrics?.length || 0}</div>\n                <div className=\"text-sm text-muted-foreground\">Success Metrics</div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* GTM Phases */}\n            <Tabs defaultValue=\"phases\" className=\"w-full\">\n              <TabsList>\n                <TabsTrigger value=\"phases\">Execution Phases</TabsTrigger>\n                <TabsTrigger value=\"risks\">Risks & Mitigation</TabsTrigger>\n                <TabsTrigger value=\"criteria\">Kill Criteria</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"phases\">\n                <div className=\"space-y-4\">\n                  {gtmData.phases?.map((phase, index) => (\n                    <Card key={index} className=\"border-l-4 border-l-primary\">\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"text-lg\">{phase.phase}</CardTitle>\n                          <Badge variant=\"outline\">{phase.weeks}</Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <h5 className=\"font-medium mb-2\">Objectives</h5>\n                            <ul className=\"list-disc list-inside space-y-1\">\n                              {phase.objectives?.map((objective, idx) => (\n                                <li key={idx} className=\"text-sm\">{objective}</li>\n                              ))}\n                            </ul>\n                          </div>\n                          \n                          <div>\n                            <h5 className=\"font-medium mb-2\">Key Tactics</h5>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                              {phase.tactics?.slice(0, 4).map((tactic, idx) => (\n                                <div key={idx} className=\"p-2 border rounded text-sm\">\n                                  <div className=\"font-medium\">{tactic.name}</div>\n                                  <div className=\"text-muted-foreground text-xs\">{tactic.timeline}</div>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n\n                          <div>\n                            <h5 className=\"font-medium mb-2\">Success Metrics</h5>\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                              {phase.kpis?.map((kpi, idx) => (\n                                <div key={idx} className=\"text-center p-2 bg-muted rounded\">\n                                  <div className=\"font-bold\">{kpi.target} {kpi.unit}</div>\n                                  <div className=\"text-xs text-muted-foreground\">{kpi.metric}</div>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"risks\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Risk Assessment & Mitigation</h4>\n                  <div className=\"space-y-4\">\n                    {gtmData.risks?.map((risk, index) => (\n                      <Card key={index}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h5 className=\"font-medium\">{risk.risk}</h5>\n                            <div className=\"flex gap-2\">\n                              <Badge variant={risk.probability === 'high' ? 'destructive' : risk.probability === 'medium' ? 'default' : 'secondary'}>\n                                {risk.probability} probability\n                              </Badge>\n                              <Badge variant={risk.impact === 'high' ? 'destructive' : risk.impact === 'medium' ? 'default' : 'secondary'}>\n                                {risk.impact} impact\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div>\n                              <span className=\"text-sm font-medium\">Mitigation: </span>\n                              <span className=\"text-sm\">{risk.mitigation}</span>\n                            </div>\n                            {risk.contingency && (\n                              <div>\n                                <span className=\"text-sm font-medium\">Contingency: </span>\n                                <span className=\"text-sm\">{risk.contingency}</span>\n                              </div>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"criteria\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Kill Criteria - When to Pivot or Stop</h4>\n                  <div className=\"space-y-4\">\n                    {gtmData.killCriteria?.map((criteria, index) => (\n                      <Card key={index} className=\"border-l-4 border-l-red-500\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h5 className=\"font-medium\">{criteria.metric}</h5>\n                            <Badge variant=\"destructive\">Threshold: {criteria.threshold}</Badge>\n                          </div>\n                          <div className=\"space-y-1\">\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Time Window: </span>\n                              {criteria.timeWindow}\n                            </div>\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">Rationale: </span>\n                              {criteria.rationale}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\n// Market Sizing Component  \nfunction MarketSizingSection({ analysisId, industry }: { analysisId: string, industry: string }) {\n  const { isPremium } = usePremium()\n  const marketQuery = usePremiumMarket(analysisId, isPremium)\n  const generateMarket = useGenerateMarket()\n\n  useEffect(() => {\n    if (isPremium && analysisId && !marketQuery.data && !marketQuery.isLoading) {\n      generateMarket.mutate({\n        analysisId,\n        industry,\n        productCategory: industry,\n        geography: \"Global\"\n      })\n    }\n  }, [isPremium, analysisId, industry])\n\n  if (!isPremium) return null\n  if (marketQuery.isLoading || generateMarket.isPending) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"h-5 w-5\" />\n            Market Sizing Analysis (TAM/SAM/SOM)\n            <Badge variant=\"secondary\">Premium</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n            <div className=\"h-32 bg-muted rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const marketData: MarketSizing | undefined = marketQuery.data as MarketSizing | undefined\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1e9) return `$${(value / 1e9).toFixed(1)}B`\n    if (value >= 1e6) return `$${(value / 1e6).toFixed(1)}M`\n    if (value >= 1e3) return `$${(value / 1e3).toFixed(1)}K`\n    return `$${value?.toFixed(0)}`\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Globe className=\"h-5 w-5\" />\n          Market Sizing Analysis (TAM/SAM/SOM)\n          <Badge variant=\"secondary\">Premium</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {marketData && (\n          <div className=\"space-y-6\">\n            {/* Market Size Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card className=\"border-2 border-blue-200\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg text-blue-600\">TAM (Total Addressable Market)</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-blue-600\">{formatCurrency(marketData.tam?.value || 0)}</div>\n                    <div className=\"text-sm text-muted-foreground mt-2\">{marketData.tam?.method?.description}</div>\n                    <div className=\"mt-3\">\n                      <Badge variant=\"outline\">Confidence: {Math.round((marketData.tam?.method?.confidence || 0) * 100)}%</Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 border-green-200\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg text-green-600\">SAM (Serviceable Addressable Market)</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-600\">{formatCurrency(marketData.sam?.value || 0)}</div>\n                    <div className=\"text-sm text-muted-foreground mt-2\">{marketData.sam?.method?.description}</div>\n                    <div className=\"mt-3\">\n                      <Badge variant=\"outline\">Confidence: {Math.round((marketData.sam?.method?.confidence || 0) * 100)}%</Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 border-purple-200\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg text-purple-600\">SOM (Serviceable Obtainable Market)</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-purple-600\">{formatCurrency(marketData.som?.value || 0)}</div>\n                    <div className=\"text-sm text-muted-foreground mt-2\">Realistic market capture</div>\n                    <div className=\"mt-3\">\n                      <Badge variant=\"outline\">{marketData.som?.timeToCapture} years to capture</Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Market Segments */}\n            {marketData.tam?.segments && marketData.tam.segments.length > 0 && (\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold\">Market Segments Analysis</h4>\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Segment</TableHead>\n                        <TableHead>Market Size</TableHead>\n                        <TableHead>Growth Rate</TableHead>\n                        <TableHead>Accessibility</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {marketData.tam.segments.map((segment, index) => (\n                        <TableRow key={index}>\n                          <TableCell className=\"font-medium\">{segment.segment}</TableCell>\n                          <TableCell>{formatCurrency(segment.size)}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-2\">\n                              <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                              <span>{(segment.growthRate * 100).toFixed(1)}%</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Progress value={segment.accessibility * 100} className=\"w-16\" />\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            )}\n\n            {/* Bottom-up Analysis */}\n            {marketData.bottomUpAnalysis && (\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold\">Bottom-up Revenue Projection</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-xl font-bold\">{marketData.bottomUpAnalysis.unitEconomics?.units?.toLocaleString()}</div>\n                    <div className=\"text-sm text-muted-foreground\">Target Units</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xl font-bold\">${marketData.bottomUpAnalysis.unitEconomics?.pricePerUnit}</div>\n                    <div className=\"text-sm text-muted-foreground\">Price per Unit</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xl font-bold\">{(marketData.bottomUpAnalysis.unitEconomics?.adoptionRate * 100).toFixed(1)}%</div>\n                    <div className=\"text-sm text-muted-foreground\">Adoption Rate</div>\n                  </div>\n                </div>\n                \n                {marketData.bottomUpAnalysis.scaling && (\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <AreaChart data={marketData.bottomUpAnalysis.scaling}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"year\" />\n                        <YAxis />\n                        <Tooltip formatter={(value: number) => [formatCurrency(value), \"\"]} />\n                        <Area type=\"monotone\" dataKey=\"revenue\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n                      </AreaChart>\n                    </ResponsiveContainer>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default function PremiumResults() {\n  const [location, setLocation] = useLocation()\n  const [analysisResults, setAnalysisResults] = useState<AnalysisResponse | null>(null)\n  const [analysisId] = useState(() => `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`)\n  const { isPremium, setShowUpgradeModal } = usePremium()\n\n  useEffect(() => {\n    // Set document title for SEO\n    document.title = \"Premium Business Intelligence Report - Reddit Idea Validator\"\n    \n    // Get results from sessionStorage (set by dashboard after analysis)\n    const savedResults = sessionStorage.getItem('analysis-results')\n    if (savedResults) {\n      try {\n        const parsedResults = JSON.parse(savedResults)\n        setAnalysisResults(parsedResults)\n      } catch (error) {\n        console.error('Failed to parse analysis results:', error)\n      }\n    }\n\n    // Cleanup title on unmount\n    return () => {\n      document.title = \"Reddit Idea Validator - Discover Market Opportunities\"\n    }\n  }, [])\n\n  // Auto-open upgrade modal for non-premium users\n  useEffect(() => {\n    if (!isPremium) {\n      setShowUpgradeModal(true)\n    }\n  }, [isPremium, setShowUpgradeModal])\n\n  if (!analysisResults) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => setLocation('/')}\n                  data-testid=\"button-back-home\"\n                >\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Home\n                </Button>\n                <h1 className=\"text-xl font-semibold\">Premium Analysis</h1>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center space-y-6\">\n            <Crown className=\"h-16 w-16 text-primary mx-auto\" />\n            <div className=\"space-y-2\">\n              <h2 className=\"text-2xl font-bold\">Premium Analysis Access</h2>\n              <p className=\"text-muted-foreground max-w-md mx-auto\">\n                Complete a startup analysis first, then upgrade to premium to unlock comprehensive business intelligence and market insights.\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <Button onClick={() => setLocation('/')} size=\"lg\" data-testid=\"button-start-analysis\">\n                Start New Analysis\n              </Button>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-8\">\n                <Card>\n                  <CardContent className=\"p-4 text-center\">\n                    <BarChart3 className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n                    <h3 className=\"font-semibold\">Keyword Intelligence</h3>\n                    <p className=\"text-sm text-muted-foreground\">Search volumes, CPC data, and 24-month trends</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4 text-center\">\n                    <Calculator className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n                    <h3 className=\"font-semibold\">Financial Modeling</h3>\n                    <p className=\"text-sm text-muted-foreground\">CAC/LTV simulator with payback analysis</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4 text-center\">\n                    <Target className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n                    <h3 className=\"font-semibold\">GTM Planning</h3>\n                    <p className=\"text-sm text-muted-foreground\">90-day plans with risks and kill criteria</p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const handleNewAnalysis = () => {\n    sessionStorage.removeItem('analysis-results')\n    setLocation('/')\n  }\n\n  const handleExport = () => {\n    // TODO: Implement comprehensive export functionality\n    console.log('Export functionality will be implemented')\n  }\n\n  // Extract key data for premium analytics\n  const primaryKeyword = analysisResults.keywords?.[0] || 'startup'\n  const industry = 'Technology' // Could be extracted from analysis\n  const productDescription = `Startup idea: ${primaryKeyword} solution for ${industry} market`\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setLocation('/')}\n                data-testid=\"button-back-home\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                New Analysis\n              </Button>\n              <div className=\"hidden sm:block h-6 border-l border-border\"></div>\n              <h1 className=\"text-xl font-semibold flex items-center gap-2\" data-testid=\"premium-results-page-title\">\n                Premium Business Intelligence Report\n                <Crown className=\"h-5 w-5 text-primary\" />\n              </h1>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share\">\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Share\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleExport} data-testid=\"button-download\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button onClick={handleNewAnalysis} size=\"sm\" data-testid=\"button-analyze-new\">\n                Analyze New Idea\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Premium Status Banner */}\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {isPremium ? (\n          <Card className=\"bg-gradient-to-r from-[hsl(var(--neon-green))]/10 to-primary/10 border-[hsl(var(--neon-green))]/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center gap-3\">\n                <Sparkles className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n                <div className=\"text-center\">\n                  <h3 className=\"font-semibold text-[hsl(var(--neon-green))]\">🚀 Premium Business Intelligence Active - All Features Unlocked!</h3>\n                  <p className=\"text-sm text-muted-foreground\">Comprehensive market analysis with keyword research, financial modeling, competitor intelligence, and GTM planning</p>\n                </div>\n                <Sparkles className=\"h-5 w-5 text-[hsl(var(--neon-green))]\" />\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"bg-gradient-to-r from-primary/5 to-[hsl(var(--hot-pink))]/5 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center gap-3\">\n                <Crown className=\"h-5 w-5 text-primary\" />\n                <div className=\"text-center\">\n                  <h3 className=\"font-semibold\">Premium Business Intelligence Preview</h3>\n                  <p className=\"text-sm text-muted-foreground\">Complete the upgrade to unlock advanced analytics, financial modeling, and comprehensive market intelligence</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Premium Analytics Content */}\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\" data-testid=\"premium-analysis-results\">\n        <div className=\"space-y-8\">\n          {/* Executive Summary */}\n          <div className=\"bg-gradient-to-r from-primary/10 to-[hsl(var(--hot-pink))]/10 rounded-2xl p-6 border border-primary/20\">\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n                Executive Summary\n                <Badge variant=\"secondary\">Premium</Badge>\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">\n                    {analysisResults.overall_score}/10\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-[hsl(var(--hot-pink))]\">\n                    {analysisResults.viability_score}/10\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Viability Score</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-[hsl(var(--neon-green))]\">\n                    {analysisResults.total_posts_analyzed}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Data Points Analyzed</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Premium Analytics Sections */}\n          <KeywordIntelligenceSection \n            analysisId={analysisId} \n            industry={industry} \n            primaryKeyword={primaryKeyword} \n          />\n\n          <RedditAnalysisSection \n            analysisId={analysisId} \n            subreddits={analysisResults.subreddits || []} \n            keywords={analysisResults.keywords || []} \n          />\n\n          <CustomerIntelligenceSection analysisId={analysisId} industry={industry} />\n\n          <FinancialProjectionsSection analysisId={analysisId} industry={industry} />\n\n          <TechnologyOperationsSection analysisId={analysisId} industry={industry} />\n\n          <LegalRegulatorySection analysisId={analysisId} industry={industry} />\n\n          <LaunchRoadmapSection analysisId={analysisId} industry={industry} />\n\n          <CompetitorMatrixSection analysisId={analysisId} industry={industry} />\n\n          <GtmPlanningSection analysisId={analysisId} productDescription={productDescription} />\n\n          <MarketSizingSection analysisId={analysisId} industry={industry} />\n\n          {/* Success Message for Premium Users */}\n          {isPremium && (\n            <div className=\"mt-12 mb-8\">\n              <Card className=\"bg-gradient-to-r from-[hsl(var(--neon-green))]/10 to-primary/10 border-[hsl(var(--neon-green))]/30\">\n                <CardContent className=\"p-8\">\n                  <div className=\"text-center space-y-6\">\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <TrendingUp className=\"h-8 w-8 text-[hsl(var(--neon-green))]\" />\n                      <h3 className=\"text-2xl font-bold\">Complete Premium Business Intelligence Report</h3>\n                    </div>\n                    <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n                      You now have access to comprehensive keyword research, financial modeling, competitive intelligence, \n                      go-to-market planning, and market sizing analysis. Use these insights to validate, plan, and execute your startup strategy.\n                    </p>\n                    <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                      <Button onClick={handleExport} size=\"lg\" variant=\"outline\" data-testid=\"button-export-report\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Export Complete Report\n                      </Button>\n                      <Button onClick={handleNewAnalysis} size=\"lg\" data-testid=\"button-new-analysis\">\n                        Analyze Another Idea\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":89777}},"version":1}